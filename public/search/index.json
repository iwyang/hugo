[{"content":"AList 开源项目地址：https://github.com/alist-org/alist\nAList 文档：https://alist.nn.ci/zh/guide/\n本地启动（在alist所在目录打开cmd）：alist server\n安装 默认安装在 /opt/alist 中。 自定义安装路径，将安装路径作为第二个参数添加，必须是绝对路径（如果路径以 alist 结尾，则直接安装到给定路径，否则会安装在给定路径 alist 目录下），如 安装到 /root：\n1 2 3 4 5 6 # Install curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s install /root # update curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s update /root # Uninstall curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s uninstall /root 启动: systemctl start alist 关闭: systemctl stop alist 状态: systemctl status alist 重启: systemctl restart alist 安装完成后：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 访问地址：http://YOUR_IP:5244/ 配置文件路径：/root/alist/data/config.json ---------如何获取密码？-------- 先cd到alist所在目录: cd /root/alist 随机设置新密码: ./alist admin random 或者手动设置新密码: ./alist admin set NEW_PASSWORD ---------------------------- 启动服务中 查看状态：systemctl status alist 启动服务：systemctl start alist 重启服务：systemctl restart alist 停止服务：systemctl stop alist 温馨提示：如果端口无法正常访问，请检查 服务器安全组、本机防火墙、Alist状态 常用网盘见官方文档\n挂载本机磁盘 挂载路径：/本地\n根文件路径：/root\n关闭显示隐藏\n设置访客用户 1 mkdir -p /root/共享 访客基本路径设置为：/本地/共享\n通过RaiDrive挂载网盘到本地电脑 RaiDrive官网：http://www.raidrive.com\n挂载成功后，通过RaiDrive挂载各大网盘到本地电脑上\n挂载到potplay Potplayer播放器挂载alist网盘里的视频\n挂载到安卓 安卓可以挂载到 es文件浏览器\n我的网络—右上角三点—新建webdav\n服务器：IP/dav/\n端口：5244\n用户名：admin\n密码：\n本地开机启动alist 1.在D:\\alist-windows-amd64目录下新建aliststar.vbs：\n1 2 Set ws = CreateObject(\u0026#34;Wscript.Shell\u0026#34;) ws.run \u0026#34;D:\\alist-windows-amd64\\alist.exe server\u0026#34;,vbhide 2.新建aliststar.vbs快捷方式放到桌面。\n3.win+R打开运行窗口，输入shell:startup\n4.上面的快捷方式拖到打开的窗口\n配置反代域名 1.安装nginx\n1 2 3 sudo apt install nginx -y sudo systemctl start nginx sudo systemctl enable nginx 2.为了便于申请证书，需要新建反代网站目录，一定不要在/root目录上新建\n1 2 mkdir -p /var/www/alist cp /usr/share/nginx/html/* /var/www/alist 3.为了使下面申请证书时能访问 http://bore.vip/.well-known/acme-challenge/… 这个链接，首先配置好http://bore.vip/.well-known/acme-challenge/…这个链接，首先配置好Nginx 80 端口，保证上述网址能顺利访问，从而顺利申请证书。所以在 nginx 配置的 server 节点下添加：\n1 2 3 location ~ /.well-known { allow all; } 4.在网站配置文件的 server 字段中添加\n1 2 3 4 5 6 7 8 9 10 11 12 location / { proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; proxy_pass http://127.0.0.1:5244; # the max size of file to upload client_max_body_size 20000m; } 最终修改为：\n1 vi /etc/nginx/conf.d/alist.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 server { listen 80; root /var/www/alist; index index.html index.htm index.nginx-debian.html; server_name alist.bore.vip; #access_log /var/log/nginx/host.access.log main; location / { #try_files $uri $uri/ =404; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; proxy_pass http://127.0.0.1:5244; # the max size of file to upload client_max_body_size 20000m; } location ~ /.well-known { allow all; } } 测试配置是否有问题：\n1 nginx -t 重启 Nginx 生效：\n1 systemctl restart nginx 配置 SSL 证书 安装 Certbot 1 sudo apt-get install letsencrypt -y 使用 webroot 自动生成证书 1 certbot certonly --webroot -w /var/www/alist -d alist.bore.vip -m 455343442@qq.com --agree-tos 编辑 Nginx 1 vi /etc/nginx/conf.d/alist.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 server { listen 80; #listen [::]:80; root /var/www/alist; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; server_name alist.bore.vip; # 此处的示例域名为qbt.example.com location / { #try_files $uri $uri/ =404; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Range $http_range; proxy_set_header If-Range $http_if_range; proxy_redirect off; proxy_pass http://127.0.0.1:5244; # the max size of file to upload client_max_body_size 20000m; } location ~ /.well-known { allow all; } listen 443 ssl; # managed by Certbot # RSA certificate ssl_certificate /etc/letsencrypt/live/alist.bore.vip/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/alist.bore.vip/privkey.pem; # managed by Certbot # Redirect non-https traffic to https if ($scheme != \u0026#34;https\u0026#34;) { return 301 https://$host$request_uri; } # managed by Certbot } 测试配置是否有问题：\n1 nginx -t 重启 Nginx 生效：\n1 systemctl restart nginx 自动续期 Let’s Encrypt 的证书有效期为 90 天，不过我们可以通过 crontab 定时运行命令更新证书。\n先运行以下命令来测试证书的自动更新：\n1 certbot renew --dry-run 如果一切正常，就可以编辑 crontab 定期运行以下命令：\n1 crontab -e 1 30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\n1 openssl x509 -noout -dates -in /etc/letsencrypt/live/alist.bore.vip/cert.pem 修改配置文件 1 vi /root/alist/data/config.json 你可能注意到了，其中有 cert_file和key_file两条配置，正对应着上次申请证书最后输出的Certificate is saved at:和Key is saved at:，把后面的文件路径填进去，就配置好证书文件了\n1 systemctl restart alist 参考链接 1.Alist 挂载阿里云盘、百度网盘、迅雷云盘、123网盘等\n2.部署AList私有云盘\n3.letsencrypt免费证书申请\u0026ndash;Certbot\n","date":"2024-04-06T17:19:21Z","permalink":"//localhost:1313/archives/alist%E6%8C%82%E8%BD%BD%E7%BD%91%E7%9B%98/","title":"Alist挂载网盘"},{"content":"1、通过组策略编辑器来禁用OneDrive。点击任务栏上的Contana搜索框并输入“组策略”，在最佳匹配结果中选择“编辑组策略”控制面板项，进入到本地组策略编辑器环境，如图：\n2、在组策略编辑器窗口左侧栏内，依次定位到“计算机配置→管理模板→Windows组件→OneDrive”，可看到右侧窗格内的5个相关选项，如图所示：\n3、将右侧的5个选项并将它们设置为“已禁用”状态，如图：\n4、右键单击任务栏空白处，调出任务管理器。切换到“启动”。在进程管理列表中找到OneDrive进程，右键单击并选择“禁用”。\n随后，在Windows资源管理器中，点击“查看”功能面板，将“显示/隐藏”分组中的“隐藏的项目”复选框选中。最后进入到当前Windows用户所在的“AppData→Local→Microsoft”文件夹，找到Onedrive子文件夹，将其删除即可。\n若无法直接删除，可利用Unlocker工具或360右键强力删除命令进行删除。\n参考：教你彻底卸载OneDrive图文操作方法\n","date":"2023-09-03T20:41:26Z","permalink":"//localhost:1313/archives/%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDonedrive/","title":"彻底卸载onedrive"},{"content":"{% note warning flat %} Debian10 上安装部分应用，速度几乎为0，至少需要Debian11以上，512M内存足够。 {% endnote %}\n安装桌面环境和VNC服务器 默认情况下，Debian 11的服务器并没有安装图形化桌面环境或VNC服务器，所以你将从安装这些开始。 在选择 VNC 服务器和桌面环境方面，您有很多选择。在本教程中，你将安装最新的Xfce桌面环境和TightVNC软件包，这些软件包可从Ubuntu官方仓库获得。Xfce和TightVNC都以轻量级和快速著称，这将有助于确保即使在较慢的互联网连接上，VNC连接也能顺利和稳定。\n0.如果新装系统，参考:vi 无法正常使用\n1.用SSH连接到你的服务器后，更新你的软件包列表。\n1 sudo apt update 2.现在在你的服务器上安装Xfce桌面环境，以及xfce4-goodies 包。\n1 sudo apt install xfce4 xfce4-goodies 在安装过程中，你可能会被提示为Xfce选择一个默认的显示管理器。显示管理器是一个允许你通过图形界面选择和登录到桌面环境的程序。你只有在用VNC客户端连接时才会使用Xfce，在这些Xfce会话中，你已经以你的非root Debian用户身份登录了。所以在本教程中，你对显示管理器的选择并不重要。选择其中一个，然后按ENTER 。\n3.安装完成后，安装TightVNC服务器。\n1 sudo apt install tightvncserver 如果是debian 11，还需要安装dbus-x11 依赖关系，以确保与VNC服务器的正常连接:sudo apt install tightvncserver\n4.为了在安装后完成VNC服务器的初始配置，使用vncserver 命令来设置安全密码并创建初始配置文件。\n1 vncserver 接下来会有一个提示，要求输入并验证一个密码，以便远程访问你的机器。\n1 2 3 4 5 Output You will require a password to access your desktops. Password: Verify: 密码的长度必须在六到八个字符之间。超过八个字符的密码将被自动截断。\n一旦你验证了密码，你可以选择创建一个仅供查看的密码。使用只查看密码登录的用户将不能用鼠标或键盘控制VNC实例。如果你想用你的VNC服务器向其他人演示一些东西，这是一个有用的选项，但这不是必需的。Would you like to enter a view-only password (y/n)? n\n然后，该过程为服务器创建必要的默认配置文件和连接信息。\n1 2 3 4 5 6 7 8 OutputWould you like to enter a view-only password (y/n)? n xauth: file /home/sammy/.Xauthority does not exist New \u0026#39;X\u0026#39; desktop is your_hostname:1 Creating default startup script /home/sammy/.vnc/xstartup Starting applications specified in /home/sammy/.vnc/xstartup Log file is /home/sammy/.vnc/your_hostname:1.log 接下来，配置它以启动Xfce并通过图形界面访问服务器。\n5.提示执行子进程“dbus-launch”失败\n1 sudo apt-get install dbus-x11 配置VNC服务器 VNC服务器需要知道启动时要执行哪些命令。具体来说，VNC需要知道它应该连接到哪个图形桌面。\n这些命令位于你的主目录下.vnc 文件夹中一个名为xstartup 的配置文件中。启动脚本是在上一步运行vncserver 命令时创建的，但你将创建自己的脚本来启动Xfce桌面。\n当VNC第一次被设置时，它在端口5901 ，启动一个默认的服务器实例。这个端口被称为显示端口，VNC称其为:1 。VNC可以在其他显示端口启动多个实例，如:2 、:3 ，等等。\n因为你要改变VNC服务器的配置方式，所以首先用以下命令停止运行在端口5901 的VNC服务器实例。\n1 vncserver -kill :1 以下是针对你的服务器环境的PID的输出。\n1 2 Output Killing Xtightvnc process ID 17648 在你修改xstartup 文件之前，先备份原文件。\n1 mv ~/.vnc/xstartup ~/.vnc/xstartup.bak 现在创建一个新的xstartup 文件并在你喜欢的文本编辑器中打开它。\n1 vi ~/.vnc/xstartup 只要你启动或重新启动VNC服务器，该文件中的命令就会自动执行。如果你的桌面环境还没有启动，你需要VNC来启动它。在该文件中添加以下命令。\n1 2 3 #!/bin/bash xrdb $HOME/.Xresources startxfce4 \u0026amp; 下面简要介绍一下每一行的作用。\n#!/bin/bash:第一行是一个shebang。在*nix平台上的可执行纯文本文件中，shebang告诉系统将该文件传递给哪个解释器来执行。在这个例子中，你要把文件传给Bash解释器。这将使每一个连续的行被当作命令来执行，按顺序进行。 xrdb $HOME/.Xresources:这个命令告诉VNC的GUI框架读取用户的.Xresources 文件。.Xresources ，用户可以在这里对图形桌面的某些设置进行修改，比如终端颜色、光标主题和字体渲染。 startxfce4 \u0026amp;:这个命令告诉服务器启动Xfce。在这里你可以找到所有你需要的图形软件，以便舒适地管理你的服务器。 当你完成后，保存并退出你的编辑器。如果你使用的是nano ，你可以通过按CTRL+X ，然后按Y ，再按ENTER 。\n为了确保VNC服务器能够正确使用这个新的启动文件，你需要使它可执行。\n1 sudo chmod +x ~/.vnc/xstartup 现在，重新启动VNC服务器。\n1 vncserver 输出结果将类似于以下内容。\n1 2 3 4 5 Output New \u0026#39;X\u0026#39; desktop is your_hostname:1 Starting applications specified in /home/sammy/.vnc/xstartup Log file is /home/sammy/.vnc/your_hostname:1.log 配置防火墙 如果你Debian 11正在运行防火墙，并且使用ufw作为防火墙管理工具。则需要打开端口5901的连接。\n如果你显示端口是:2。则需要打开端口5902的连接，以此类推，请随时添加你需要允许的端口。\n在本教程中我们将打开端口5901，运行ufw命令sudo ufw allow 5901。\n1 sudo ufw allow 5901 配置到位后，你就可以从你的本地机器连接到VNC服务器了。\n安全地连接VNC桌面 这部分内容参考：Step 3 — Connecting the VNC Desktop Securely\n我直接用的：VNC Viewer\n作为系统服务运行VNC 接下来，你将把VNC服务器设置为一个systemd服务。你可以像其他服务一样，根据需要启动、停止和重启它。这也将确保VNC在你的服务器重启时也能启动。\n首先，用你喜欢的文本编辑器创建一个名为/etc/systemd/system/vncserver@.service 的新单元文件。\n1 sudo vi /etc/systemd/system/vncserver@.service 名字后面的@ 符号将让你传入一个参数，你可以在服务配置中使用。你将用它来指定你在管理服务时要使用的VNC显示端口。\n在文件中添加以下几行。请确保修改User 、Group 、WorkingDirectory ，以及PIDFILE 中的用户名，以符合你的用户名。\n官方：(如果要用下面配置，先参考：Initial Server Setup with Debian 10，进行设置用户名、防火墙等操作)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [Unit] Description=Start TightVNC server at startup After=syslog.target network.target [Service] Type=forking User=sammy Group=sammy WorkingDirectory=/home/sammy PIDFile=/home/sammy/.vnc/%H:%i.pid ExecStartPre=-/usr/bin/vncserver -kill :%i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.target 修改为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [Unit] Description=Start TightVNC server at startup After=syslog.target network.target [Service] Type=forking User=root Group=root WorkingDirectory=/root PIDFile=/root/.vnc/%H:%i.pid ExecStartPre=-/usr/bin/vncserver -kill :%i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.target 如果VNC已经在运行，ExecStartPre 命令会停止它。ExecStart 命令启动VNC，并将色深设置为24位色，分辨率为1280x800。你也可以修改这些启动选项以满足你的需要。完成后保存并关闭该文件。\n接下来，让系统知道这个新的单元文件。\n1 sudo systemctl daemon-reload 然后，启用该单元文件。\n1 sudo systemctl enable vncserver@1.service @ 后面的1 标志着服务应该出现在哪个显示号码上，在这种情况下，默认的:1 ，正如在 中讨论的那样。\n如果VNC服务器的当前实例仍在运行，请停止它。\n1 vncserver -kill :1 然后像启动其他systemd服务一样启动它。\n1 sudo systemctl start vncserver@1 你可以用下面的命令来验证它是否启动。\n1 sudo systemctl status vncserver@1 如果启动正确，输出结果将类似于下面。\n1 2 3 4 5 6 7 8 Output ● vncserver@1.service - Start TightVNC server at startup Loaded: loaded (/etc/systemd/system/vncserver@.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2022-08-19 16:21:36 UTC; 5s ago Process: 24469 ExecStartPre=/usr/bin/vncserver -kill :1 \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 (code=exited, status=2) Process: 24474 ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 -localhost :1 (code=exited, status=0/SUCCESS) Main PID: 24482 (Xtightvnc) . . . 当你重新启动机器时，你的VNC服务器就可以使用了。\n再次启动你的SSH隧道。\n1 ssh -L 5901:127.0.0.1:5901 -C -N -l sammy your_server_ip 然后用你的VNC客户端软件建立一个新的连接，localhost:5901 ，连接到你的机器。\nToo many authentication failures VNC server 解决方法：\n1 2 vncserver -kill :1 vncserver xfce4 设置中文 1.安装locales并配置\n1 2 sudo apt install locales sudo dpkg-reconfigure locales 进入语言设置界面，其中，空格键为选取/取消，Tab键为切换到确认选择。\n2.通过方向键与空格键选择语言编码en_US.UTF8，zh_CN GB2312，zh_CN GBK GBK，zh_CN UTF-8 UTF-8\n3.然后按Tab选择，回车进入下一个界面，选择 zh_CN UTF-8 UTF-8为默认系统环境，回车。\n4.为当前用户配置默认语言为中文zh_CN UTF-8 UTF-8\n1 2 3 vi ~/.bashrc 在.bashrc最后添加一行 export LANG=zh_CN.UTF-8 5.安装中文字体\n1 sudo apt install fonts-wqy-zenhei 6.重启\nDebian 10安装firefox 1 2 3 sudo apt update sudo apt upgrade sudo apt install firefox-esr -y Debian 10安装wine 7.0 貌似debian 10只能装wine 7.0，装不了wine 8.0。debian 11才能安装wine 8.0，wine 8.0可以微信，不过都是乱码，根本就没必要装wine，不过还是记录以下\nStep 1: Prerequsiteis In order to run Winehq, You need to enable i386 architecture on your Debian system. Also, import the GPG key to your system by which the wine packages are signed.\n1 2 sudo dpkg --add-architecture i386 wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add - Use one of the following commands to enable the Wine apt repository in your system based on your operating system and version.\n1 2 sudo apt -y install gnupg2 software-properties-common sudo apt-add-repository https://dl.winehq.org/wine-builds/debian/ Step 2: Install Wine on Debian 10 Your system is ready to install Winehq. Update the apt information with the newly added repositories. Execute the following commands. The --install-recommends option will install all the recommended packages by winehq-stable on your system.\n1 2 sudo apt update sudo apt install --install-recommends winehq-stable The wine packages are installed under /opt/wine-stable directory. So set the wine bin directory to the PATH environment to access commands system-wide.\n1 export PATH=$PATH:/opt/wine-stable/bin Step 3: Check Wine Version Wine installation successfully completed. Use the following command to check the version of wine installed on your system\n1 2 3 wine --version wine-7.0 How to Use Wine (Optional) To use wine we need to log in to the Debian desktop system. After that download a windows .exe file like PuTTY on your system and open it with Wine as below screenshot or use the following command.\n1 wine ~/Downloads/putty.exe Debian 11安装wine 8.0 Step 1: Enable 32 bit architecture If you’re running a 64-bit system, enable support for 32-bit applications.\n1 sudo dpkg --add-architecture i386 The command above won’t return any output.\nStep 2: Add WineHQ repository We will pull the latest Wine packages from WineHQ repository that is added manually.\nFirst, import GPG key:\n1 2 3 4 sudo apt update sudo apt -y install gnupg2 software-properties-common wget -nc https://dl.winehq.org/wine-builds/winehq.key sudo apt-key add winehq.key You should receive “OK” in the output.\nAdd the Wine repository by running the following command:\n1 sudo apt-add-repository https://dl.winehq.org/wine-builds/debian/ The command will add repository to line /etc/apt/sources.list file.\nUpdate APT package index after:\n1 sudo apt update Using OBS repository (Alternative) You can also use OBS repository instead of the official repository. Add Wine OBS repository as shown below:\nDebian 11:\n1 2 wget -O- -q https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/Debian_11/Release.key | sudo apt-key add - echo \u0026#34;deb http://download.opensuse.org/repositories/Emulators:/Wine:/Debian/Debian_11 ./\u0026#34; | sudo tee /etc/apt/sources.list.d/wine-obs.list Step 3: Install Wine on Debian 11|10|9 After configuration of the APT repository, the final step is the actual installation of Wine on Debian.\nThen install Wine from Stable branch:\n1 2 sudo apt update sudo apt install --install-recommends winehq-stable The wine packages are installed under /opt/wine-stable directory. So set the wine bin directory to the PATH environment to access commands system-wide.\n1 export PATH=$PATH:/opt/wine-stable/bin After installation. verify version installed.\n1 2 $ wine --version wine-8.0 Step 4: Using Wine on Debian For basic usage of wine, check help page.\n1 $ wine --help Example below is used to run Notepad++ editor on Linux.\n1 2 3 4 cd ~/Downloads VER=$(curl -s https://api.github.com/repos/notepad-plus-plus/notepad-plus-plus/releases/latest | grep tag_name | cut -d \u0026#39;\u0026#34;\u0026#39; -f 4 | sed \u0026#39;s/v//g\u0026#39;) wget https://github.com/notepad-plus-plus/notepad-plus-plus/releases/download/v${VER}/npp.${VER}.Installer.exe wine ./npp.${VER}.Installer.exe Follow installation prompts like for any other Windows application.\n附：第二种作为系统服务运行VNC 1.创建systemd服务文件：使用命令 sudo nano /etc/systemd/system/tightvncserver@.service创建一个新的systemd服务文件。\n2.编辑systemd服务文件：在文件中填写以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [Unit] Description=TightVNC server After=syslog.target network.target [Service] Type=forking User=\u0026lt;username\u0026gt; PAMName=login PIDFile=/home/\u0026lt;username\u0026gt;/.vnc/%H:%i.pid ExecStartPre=-/usr/bin/vncserver -kill :%i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 ExecStart=/usr/bin/vncserver :%i ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.target 修改为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [Unit] Description=TightVNC server After=syslog.target network.target [Service] Type=forking User=root PAMName=login PIDFile=/root/.vnc/%H:%i.pid ExecStartPre=-/usr/bin/vncserver -kill :%i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 ExecStart=/usr/bin/vncserver :%i ExecStop=/usr/bin/vncserver -kill :%i [Install] WantedBy=multi-user.target 3.重新加载systemd服务：在终端窗口中输入命令 sudo systemctl daemon-reload。\n4.启用VNC Server服务：在终端窗口中输入命令 sudo systemctl enable tightvncserver@1\n5.启动VNC Server服务：在终端窗口中输入命令 sudo systemctl start tightvncserver@1\n6.检查VNC Server服务状态：在终端窗口中输入命令 systemctl status tightvncserver@1，检查服务是否已启动。\n这样，你就可以在Ubuntu系统开机时自动启动VNC Server服务了。\n总结 你现在有了一个安全的VNC服务器并在你的Debian 11服务器上运行。现在，您可以通过一个用户友好和熟悉的图形界面来管理您的文件、软件和设置。您还可以远程运行图形化软件，如网页浏览器。\n参考链接 How to Install and Configure VNC on Debian 10\n如何在Debian 11上安装和配置VNC\n如何在Debian 11安装VNC\nxfce4 设置中文\nubuntu vnc开机启动\nInitial Server Setup with Debian 10\nHow to Install and Configure VNC on Debian 11\nHow To Install Wine 7.0 on Debian 10 How To Install Wine 8 on Debian 11\n","date":"2023-07-18T19:36:29Z","permalink":"//localhost:1313/archives/debian-10%E5%AE%89%E8%A3%85xfce%E6%A1%8C%E9%9D%A2%E5%92%8C%E9%85%8D%E7%BD%AEvnc%E5%92%8Cwine/","title":"debian 10安装xfce桌面和配置vnc和wine"},{"content":"虽然Github自带一个Sync Fork的按钮，但是每次都自己点总是麻烦的，所以有人搞了个Github Action来做这件事，https://github.com/tgymnich/fork-sync\n创建workflow 创建新的workflow后在sync.yml输入里面的内容：\n官方：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name: Sync Fork on: schedule: - cron: \u0026#39;*/30 * * * *\u0026#39; # every 30 minutes workflow_dispatch: # on button click jobs: sync: runs-on: ubuntu-latest steps: - uses: tgymnich/fork-sync@v1.8 with: token: ${{ secrets.PERSONAL_TOKEN }} owner: llvm base: master head: master 注释：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 name: Sync Fork on: push: # push 时触发, 主要是为了测试配置有没有问题 schedule: - cron: \u0026#39;* */24 * * *\u0026#39; # 每天一次 jobs: repo-sync: runs-on: ubuntu-latest steps: - uses: tgymnich/fork-sync@v1.8 with: token: ${{ secrets.TOKEN }} #Github Token，记得加入secrets owner: ngosang # fork 的上游仓库 user head: master # fork 的上游仓库 branch base: master # 本地仓库 branch 最终sync.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name: Sync Fork on: schedule: - cron: \u0026#39;* */24 * * *\u0026#39; # 每天一次 workflow_dispatch: # on button click jobs: sync: runs-on: ubuntu-latest steps: - uses: tgymnich/fork-sync@v1.8 with: token: ${{ secrets.PERSONAL_TOKEN }} owner: mack-a base: master head: master * */24 * * *改成* */48 * * *每两天运行一次\nPS：ChatGPT有时给出的答案可能是错误的，需要验证：crontab guru\n创建github访问token 参考：管理个人访问令牌\n1.在任何页面的右上角，单击个人资料照片，然后单击“设置”。\n2.在左侧边栏中，单击“ 开发人员设置”。 3.请在左侧边栏的“ Personal access token”下，单击“细粒度令牌” 。 4.单击“生成新令牌”。 5.在“令牌名称”下，输入令牌的名称。 6.在“过期时间”下，选择令牌的过期时间（永不过期）。\n7.然后权限要开启repo和workflow的权限\n8.创建完成后复制token内容\n添加环境变量secret 在settings/secrets(Secrets and variables)/actions里把Github的Token设置上，比如workflow写的是secrets.PERSONAL_TOKEN，所以添加的时候Name填写PERSONAL_TOKEN，Secret里填写上一步创建Token内容。\n如果部署完成之后，运行显示错误是：\nrepo-sync Failed to create or merge pull request: HttpError: Validation Failed: {“resource”:”PullRequest”,”code”:”custom”,”message”:”No commits between knight000:master and ngosang:master”}\n就证明初步成功了，因为你部署了workflow所以比原仓库新，等原仓库更新后点Re-run jobs就可以测试是否正确部署了。\n自动提交修改到Gitee(未测试) 以下action文件来自https://juejin.cn/post/6894928345830522887\n把GITEE_PRIVATE_KEY、GITEE_TOKEN、GITEE_USER都添加到secrets里，然后Gitee内从URL导入仓库，创建同名仓库即可同步。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # 通过 Github actions， 在 Github 仓库的每一次 commit 后自动同步到 Gitee 上 name: sync2gitee on: push: branches: - master jobs: repo-sync: env: dst_key: ${{ secrets.GITEE_PRIVATE_KEY }} dst_token: ${{ secrets.GITEE_TOKEN }} gitee_user: ${{ secrets.GITEE_USER }} runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: persist-credentials: false - name: sync github -\u0026gt; gitee uses: Yikun/hub-mirror-action@master if: env.dst_key \u0026amp;\u0026amp; env.dst_token \u0026amp;\u0026amp; env.gitee_user with: # 必选，需要同步的 Github 用户（源） src: \u0026#39;github/${{ github.repository_owner }}\u0026#39; # 必选，需要同步到的 Gitee 用户（目的） dst: \u0026#39;gitee/${{ secrets.GITEE_USER }}\u0026#39; # 必选，Gitee公钥对应的私钥，https://gitee.com/profile/sshkeys dst_key: ${{ secrets.GITEE_PRIVATE_KEY }} # 必选，Gitee对应的用于创建仓库的token，https://gitee.com/profile/personal_access_tokens dst_token: ${{ secrets.GITEE_TOKEN }} # 如果是组织，指定组织即可，默认为用户 user # account_type: org # 直接取当前项目的仓库名 static_list: ${{ github.event.repository.name }} 因为有if: env.dst_key \u0026amp;\u0026amp; env.dst_token \u0026amp;\u0026amp; env.gitee_user这一句所以信息不足的情况下是会跳过执行，显示执行成功而不是显示错误，请注意。\n参考链接 GithunActionAutoSync2Gitee 利用Github Actions自动同步Fork fork-sync ","date":"2023-07-13T18:02:15Z","permalink":"//localhost:1313/archives/%E5%88%A9%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5fork/","title":"利用Github Actions自动同步Fork"},{"content":"这里以office2021为例\nword 方法一：\n1.在开始选项卡找到正文。\n2.正文右键，点击修改。\n3.设定格式之后，点击基于该模板的新文档，并且点击确定。\n方法二：\n1.切换到设计选项卡\n2.字体—自定义字体—设为默认值\nexcel 1.新建Excel文档，默认的字体在“文件-选项-常规-新建工作簿时”的设置中指定的\nppt 1.新建一个空白演示文稿。\n2.单击工具栏上的\u0026quot;视图\u0026quot;，然后单击“幻灯片母版”。\n3.找到\u0026quot;字体\u0026quot;，在下拉选项框中选择”自定义字体“。\n4.修改中文和西文字体，保存，然后关闭母版视图。\n5.单击“文件”\u0026gt;“另存为”，将文件名改为\u0026quot;blank\u0026quot;，保存类型改为” PowerPoint模板“。注意：文件名一定是\u0026quot;blank\u0026ldquo;和保存类型一定是” PowerPoint模板“。\n6.再打开”资源管理器“，”查看“→“显示“→勾选”隐藏的项目“。（别关闭第5步的窗口）\n7.看回第5步的”另存为“的界面，手动更改保存的路径：C:\\Users\\\u0026lt;用户名\u0026gt;\\AppData\\Roaming\\Microsoft\\Templates ，然后单击保存完成默认字体的设置。\n随意打开一个新的演示文稿，会看到默认字体已变为微软雅黑。\n在开始菜单中会多一个名为”Default Theme“的ppt模板，以后新建ppt就单击这个就可以。\n参考链接 Word——永久修改默认标题和正文样式 如何设置修改Excel默认字体 修改PPT默认字体方法 ","date":"2023-07-02T21:02:25Z","permalink":"//localhost:1313/archives/office%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%AD%97%E4%BD%93/","title":"office更改默认字体"},{"content":"要修改图片文件里的字体，步骤如下。\n1.打开图片并ctrl+J复制图层。\n2.在你复制的图层上，利用选框工具选出你要修改的地方，然后shif+F5，选择内容识别(他会选择你就近的颜色来填充，尽量不要大面积的填充，若一次填充不行，那就继续选框小范围选择再shif f5 一直到与背景一致为止)。或者使用仿制图章工具也行。\n3.添加你的要文字，一般都是宋体类的，然后靠你仔细度去调整距离，大小，颜色，宽度（把图片放大，找一个字取色，不要纯黑）\n4.栅格化文字以后，滤镜—杂色—添加杂色（一般15左右）\n5.滤镜-模糊-高斯模糊（一般在0.2~0.4左右 视照片模糊程度而定）\n6、如果觉得和样张还有点出入，想再增加一点模糊的效果。可以再复制一个文字的新图层，对新图层文字添加 滤镜\u0026ndash;添加杂色，加15点左右。再使用 滤镜-模糊-高斯模糊，0.2~0.4左右左右。\n7.若照片比较久远，或者为彩印，滤镜-滤镜库-画笔描边-喷溅。会有文字里头有小色斑的效果\n步骤其实不多，靠的是仔细和耐心，因为一旦栅格化以后，字体颜色都是不可改变了。所以真的要造假造的以假乱真，你就得多试几次\nPS：如若字体发黑，可按住ctrl选择文字图层缩略图，将图层转化为选区，然后点击 “选择—修改—扩展—2像素”，然后根据实际情况看是否需要复制文字图层。\n参考链接：\nPS打印效果之术以假乱真\nps怎么做出针式打印机打印效果字体？\n","date":"2023-06-22T15:15:15Z","permalink":"//localhost:1313/archives/ps%E5%88%B6%E4%BD%9C%E6%89%93%E5%8D%B0%E5%AD%97%E4%BD%93%E6%95%88%E6%9E%9C/","title":"PS制作打印字体效果"},{"content":"如果使用中转api key，代理地址一定要填如下形式（/v1/chat/completions一定要加上），才能在wx某模块正常使用。\n1 https://api.xty.app/v1/chat/completions 不同的客户端需要填写不同的BASE_URL, 请尝试如下地址\nhttps://api.chatgptid.net/ 或https://api.chatgptid.net/v1 或https://api.chatgptid.net/v1/chat/completions\n0.解释的更简单些\n1.请帮我用两句话总结以下内容：\n2.请帮我（用悲伤的语气）改写以下内容：\n3.利用以下内容： 将它改写成一首诗\n4.写一篇题为“文章标题”3000字论文，论文末尾附上参考文献\n6.常用指令：\n形容词：\n以中年人语气\n以年轻人语气\n有趣活泼的\n正式的\n7.（1）请写出十个吸引人的关于泡咖啡的Instagram post标题\n（2）请写出“文章标题”Instagram post内文\n8.角色脚本：https://github.com/f/awesome-chatgpt-prompts\n接下来都以中文来回答\n9.脚本应用程序：https://github.com/lencx/ChatGPT\n（1）加载脚本\npreference—control center—language model—sync custom—sync （点击sync后，就会把所有脚本加载）\n（2）输入“/”选择相应角色\n10.角色扮演法提问(一个角色，一个聊天室)\n例如：\n请你扮演一位语言学习专家，擅长以有趣的方式教导一般人语言效果。我现在正在学习英文，在英文口说方面有困难，请给我五个练习英文口说的意见\n11.固定角色设定\n例一：\n请扮演一个专业文字编辑跟翻译，帮我归纳及重点整理英文内容，请使用简体中文回复，此规则应用所有我们的对话，规则不需要我再重复。\n例二：Email助理\n请扮演一个专业英文助理及翻译，帮助我回覆中文或是英文信件，内容要正式，此规则应用接下来所有对话，不需要我再重复\n例三：回一封信\n请帮我用友善的态度回复以下信件，我刚好那一天有私事不能参加，但很高兴收到邀请，祝活动顺利：\u0026ldquo;附上原信内容\u0026rdquo;\n例四：程式码老师\n请扮演一位Python老师，指导我写出我需要的Python程式码，此规则应用所有我们的对话，规则不需要我再重复。\n12.指定作答风格\n范例：目标读者为中老年人的新闻报道\n写一篇新闻报道，以中国记者的文笔，生动活泼地介绍过去五个重要的人工智能发展事件给中国的中老年族群，（不要提到“生动活泼地文笔”，不要提到“中老年族群”\n范例：目标读者为年轻读者的社群平台贴文\n写一篇社群平台贴文,以年轻人编辑的文笔、非正式、casual的方式、加入大量的emoji ,生动活泼地介绍过去五个重要的人工智能发展的事件给中国的年轻族群\n范例：以简短的文字及表格整理作答\n请用一段简短的文字，解释什么是大型语言模型，举例三个语言模型及其特色，以表格呈现。\n13.长篇文章创作\n角色扮演+架构建立\n（1）范例：指定角色并提案文章标题\n请你扮演人工智慧专家，我要写一篇关于人工智慧的发展与AI人型机器人未来对人类生活的影响的长篇文章，这篇文章会发表在个人部落格，请列出十个吸引人的文章标题\n修改标题：提供类似“AI人型机器人的崛起：改变未来生活的无限可能＂另外五个版本标题\n（1.1）请写出10个关于“即将被AI取代的工作”文章标题\n（2）请写出“AI人型机器人的变革之力：探索未来生活的新篇章”的文章大纲\n（3）请按照上面大纲写出“A部分”的内容\n（4）写文章常用指令：\nrephrase 重写\nlengthen 延伸\nshorten 浓缩\nexplain 解释\npull out keywords 抓关键字\n（5）重写（rephrase）“一段话”\n13.资料归纳整理\n范例：\n请扮演一个专业文字编辑及翻译，帮我归纳及重点整理以下新闻，请使用简体中文：“新闻或者是资料内容”\n范例：精准翻译并将专有名词原文附于译文后\nChatGFT,请扮演一名专业的翻译者，将以下英文论文段落精地翻译成繁体中文，适用于学术论文。在翻译过程中，对于专有名词和带有引号的字词，请在繁体中文译文后用括号附上英文原文。例如：美德(virtue)丶汤姆(Tom)以及被引号包围的字词如\u0026quot;word\u0026quot;。请确保翻译结果字数不超过N个字，并在必要时将原文分成较小的段落进行翻译。\n“在这里贴上原文”\n根据以上要求，请将这雨个段落分别翻译成繁体中文，并在适当的地方加上英文原文。请注意保持翻译的精准性和一致性，并避免增加原文没有的句子。\n14.ChatPDF\n15.ChatGPT标记法（gpt-4才能使用）\n范例：分批输入大量资料，使用@帮资料编号\n我接下来要在多个对话中，提供给你用 「@」编号的文章内容，请先记住，但 请不要摘要，此规则不需我再重复，适 用于接下来你所有回答\n先记住@1的文章内容： 文章内容\nps:如果gpt还是给出摘要，提醒：不要摘要，记住规则\n2）\n综合总结@1@2@3全部内容\n16.写电脑自动化程式\n17.Newbing\n附1：bwg无法使用chatgpt 解决方法：\n把VPS的IP伪装成家用IP。用warp来伪装，原理就是把VPS的出口流量转发到另一个IP（由cloudfare免费提供）上进行代理。 具体操作：在VPS上bash \u0026lt;(curl -fsSL git.io/warp.sh) d 直接用一个解锁chatgpt的机场，例如https://songshuyun.top。 参考：Chat GPT是不是\nPS：有些脚本自带分流，分流种类：\nIPv6分流：\n可以指定网站只走IPv6，应用场景【1.Google人机验证 2.流媒体解锁】 vps需支持IPv6 WARP分流\n指定网站通过WARP分流 (如：chatgpt，记得不要设置warp全局，只需要添加openai.com域名即可，不然速度会降低） 其他分流\n附2：ChatGPT 设置定时任务 查看：ChatGPT 设置定时任务\n附3：ChatGPTsed 替换冒号以及冒号后面内容 windows 上使用linux命令，先安装：Git for Windows\n提问：sed 替换冒号以及冒号后面内容\n在Linux和macOS系统中，你可以使用sed命令来替换冒号以及冒号后面的内容。sed是一个流编辑器，可以用于在文本中执行替换等操作。下面是使用sed命令替换冒号以及冒号后面的内容的示例：\n假设你有一个文本文件名为 example.txt，其内容如下：\n1 2 3 这是一段文本: 冒号后面的内容将被删除。 另一段文本: 这也会被删除。 这是没有冒号的文本，不会受影响。 使用sed命令删除冒号以及冒号后面的内容：\n1 sed \u0026#39;s/:.*//\u0026#39; example.txt \u0026gt; output.txt 执行以上命令后，会生成一个名为 output.txt 的新文件，其内容如下：\n1 2 3 这是一段文本 另一段文本 这是没有冒号的文本，不会受影响。 解释一下sed命令的含义：\ns/ 表示替换操作的开始。 : 是要查找的文本，即冒号。 .* 表示匹配冒号后的任意字符（包括冒号本身）。 / 用于分隔查找的文本和替换的文本。 空格后面的是替换的文本，这里我们用空字符串表示删除匹配到的内容。 example.txt 是要处理的输入文件。 \u0026gt; output.txt 表示将输出结果重定向到名为 output.txt 的文件。 请注意，在执行 sed 命令时，原始文件并没有被直接修改，而是将修改后的内容输出到另一个文件。如果需要直接在原始文件上进行修改，可以使用 -i 参数，不过在使用时要小心，确保备份原始文件以防止数据丢失。例如：\n1 sed -i \u0026#39;s/:.*//\u0026#39; example.txt 这样会直接在 example.txt 文件上进行修改。\nPS：合并txt（cmd上操作）： type *txt\u0026gt;\u0026gt;all.txt\n","date":"2023-03-05T20:21:02Z","permalink":"//localhost:1313/archives/chatgpt%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","title":"chatgpt使用方法"},{"content":" Memos是什么：一个开源的、支持私有化部署的碎片化知识卡片管理工具。可以说是支持 Docker 自部署的 flomo\n官网：https://usememos.com/\n仓库地址：https://github.com/usememos/memos\nDocker部署 1 docker run -d --name memos -p 5230:5230 -v ~/.memos/:/var/opt/memos neosmemo/memos:latest Docker Compose部署 1.创建 Memos 工作目录\n1 2 mkdir memos \u0026amp;\u0026amp; cd memos vi docker-compose.yaml 2.编写 docker-compose.yaml 文件：\n1 2 3 4 5 6 7 8 9 10 version: \u0026#34;3.0\u0026#34; services: memos: image: neosmemo/memos:latest restart: always container_name: memos volumes: - ~/.memos/:/var/opt/memos ports: - 5230:5230 更多参考：docker-compose.yaml\n3.执行命令，Memos 后端程序将运行在 http://localhost:端口号\n1 docker-compose up -d 通过访问 localhost:5230 即可打开 Memos，首次安装会提示注册用户，请记牢您的而密码。数据文件默认存储在 ~/.memos 中。\nPS：如果使用vultr，注意由于默认vultr什么端口都没有开放，安装后要记得要开放5230端口：\n1 iptables -I INPUT -p tcp --dport 5230 -j ACCEPT 4.更新。删除现有容器，拉取最新镜像，然后重新创建容器即可。\nDocker Compose\n1 2 3 4 cd memos docker-compose down docker-compose pull docker-compose up -d 可选命令：\ncp -r /root/.memos /root/.memos.archive 事先备份，以防万一（将/root/.memos文件夹下的数据库复制到/root/.memos.archive文件夹下）\ndocker image prune 用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像\n提示：\n1 2 WARNING! This will remove all dangling images. Are you sure you want to continue? [y/N] Docker\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 docker stop memos docker rm -f memos cp -r /root/data/docker_data/memos/.memos /root/data/docker_data/memos/.memos.archive # 万事先备份，以防万一 docker pull neosmemo/memos:latest # 拉取最新镜像 docker run -it -d \\ --name memos \\ --publish 5230:5230 \\ --volume /root/data/docker_data/memos/.memos/:/var/opt/memos \\ neosmemo/memos:latest \\ --mode prod \\ --port 5230 /root/data/docker_data/memos/.memos/这个可以换成你自己服务器的路径；\n5.卸载\n1 2 3 4 5 docker stop memos docker rm -f memos # 停止容器，此时不会删除映射到本地的数据 rm -rf /root/data/docker_data/memos # 完全删除映射到本地的数据 6.一些 Docker Compose 常用命令：\n1 2 3 4 5 docker-compose restart # 重启容器 docker-compose stop # 暂停容器 docker-compose down # 删除容器 docker-compose pull # 更新镜像 docker-compose exec artalk bash # 进入容器 配置域名访问 1 vi /etc/nginx/conf.d/memos.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 server { listen 80; server_name me.bore.vip; # proxy to 5230 location / { proxy_pass http://127.0.0.1:5230; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header REMOTE-HOST $remote_addr; add_header X-Cache $upstream_cache_status; # cache add_header Cache-Control no-cache; expires 12h; } location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/me.bore.vip/; } } 重启Nginx：systemctl restart nginx\n申请SSL证书 参考：Nginx 配置 ssl 证书\n1.新建文件夹：\n1 mkdir -p /data/wwwroot/me.bore.vip 2.申请证书\n1 sudo apt-get install letsencrypt -y 1 certbot certonly --webroot -w /data/wwwroot/me.bore.vip -d me.bore.vip -m 455343442@qq.com --agree-tos 3.编辑 Nginx\n（1）未启用端口复用：\n1 vi /etc/nginx/conf.d/memos.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 server { listen 80; listen 443 ssl http2; server_name me.bore.vip; root /data/wwwroot/me.bore.vip; # SSL setting ssl_certificate /etc/letsencrypt/live/me.bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/me.bore.vip/privkey.pem; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; add_header Strict-Transport-Security \u0026#34;max-age=31536000\u0026#34;; # proxy to 5230 location / { proxy_pass http://127.0.0.1:5230; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header REMOTE-HOST $remote_addr; add_header X-Cache $upstream_cache_status; # cache add_header Cache-Control no-cache; expires 12h; } location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/me.bore.vip/; } } （2）启用端口复用：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 server { listen 80; listen 127.0.0.1:1314 ssl http2 proxy_protocol; set_real_ip_from 127.0.0.1; real_ip_header proxy_protocol; port_in_redirect off; server_name me.bore.vip; root /data/wwwroot/me.bore.vip; if ($host != \u0026#39;me.bore.vip\u0026#39; ) { rewrite ^/(.*)$ https://me.bore.vip/$1 permanent; } # SSL setting ssl_certificate /etc/letsencrypt/live/me.bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/me.bore.vip/privkey.pem; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; add_header Strict-Transport-Security \u0026#34;max-age=31536000\u0026#34;; # proxy to 5230 location / { proxy_pass http://127.0.0.1:5230; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header REMOTE-HOST $remote_addr; add_header X-Cache $upstream_cache_status; # cache add_header Cache-Control no-cache; expires 12h; } location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/me.bore.vip/; } } 4.重启Nginx、xr\n证书自动续期 参考：自动续期\n安卓快捷方式发送Memos 参考：安卓手机上快捷方式发送\n注意：\n1.变量只添加一个content即可\n2.响应体/响应参数，选择自定义类型，Content-Type 填写 application/json，请求体填写：(最好不要直接点复制按钮复制代码，直接拖动选择所有行代码，这样张贴就会保留空格)\n1 2 3 { \u0026#34;content\u0026#34;: \u0026#34;{content}\u0026#34; } {% note warning flat %} 注意：上面的{content} 需要先删除，然后点击旁边的 {} 插入变量（插入的变量颜色是蓝色）。不能直接填写！！！ {% endnote %}\n3.#tag 后面必须有个空格才能创建tag\n首页轮播 API 调用最新 10 条 memos 在博客首页轮播显示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;div id=\u0026#34;bber-talk\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;style\u0026gt; #bber-talk{display:-webkit-flex;display:flex;width:100%;line-height:35px;height:45px;max-width:760px;text-align:left;padding:5px 15px;margin:20px 0;position: relative;background-color: var(--light-header);border-radius:8px;font-size:15px;overflow:hidden;} #bber-talk svg{fill: currentColor;vertical-align: middle;display: inline;margin-right:5px;margin-top: -4px;} .talk-wrap{width:100%;} .talk-list{margin: 0;height: 35px;} .talk-list li {list-style:none;margin-bottom:10px;width: 100%;white-space: nowrap;text-overflow: ellipsis;overflow: hidden;zoom: 1;} .talk-list li .datetime{margin-right:2px;} .talk-list li a{text-decoration:none;} .dark-theme #bber-talk{background-color: var(--dark-header);} .dark-theme .talk-list{color: var(--dark-color);} @media only screen and (max-width:683px) { #bber-talk{margin:2em 1em 1em;width:94%;} } \u0026lt;/style\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/dayjs@1.11.5/dayjs.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/dayjs@1.11.5/locale/zh-cn.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/dayjs@1.11.5/plugin/relativeTime.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;dayjs.locale(\u0026#39;zh-cn\u0026#39;);dayjs.extend(window.dayjs_plugin_relativeTime)\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var bbUrl = \u0026#34;https://me.edui.fun/api/memo?creatorId=101\u0026amp;limit=10\u0026#34; fetch(bbUrl).then(res =\u0026gt; res.json()).then( resdata =\u0026gt;{ var result = \u0026#39;\u0026#39;,resultAll=\u0026#34;\u0026#34;,data = resdata.data console.log(data) for(var i=0;i \u0026lt; data.length;i++){ var bbTime = dayjs.unix(data[i].createdTs).fromNow() var bbCont = data[i].content var newbbCont = bbCont.replace(/(https?:[^:\u0026lt;\u0026gt;\u0026#34;]*\\/)([^:\u0026lt;\u0026gt;\u0026#34;]*)(\\.((png!thumbnail)|(png)|(jpg)|(webp)|(jpeg)|(gif))(!blogimg)?)/g,\u0026#39; 🌅 \u0026#39;) var newbbCont = newbbCont.replace(/\\bhttps?:\\/\\/(?!\\S+(?:jpe?g|png|bmp|gif|webp|jfif|gif))\\S+/g,\u0026#39; 🔗 \u0026#39;) result += `\u0026lt;li class=\u0026#34;item\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;datetime\u0026#34;\u0026gt;${bbTime}\u0026lt;/span\u0026gt;： \u0026lt;a href=\u0026#34;https://me.edui.fun/u/101\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;${newbbCont}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;`; } var bbDom = document.querySelector(\u0026#39;#bber-talk\u0026#39;); var bbBefore = `\u0026lt;span class=\u0026#34;index-talk-icon\u0026#34;\u0026gt;\u0026lt;svg viewBox=\u0026#34;0 0 1024 1024\u0026#34; width=\u0026#34;21\u0026#34; height=\u0026#34;21\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M184.32 891.667692c-12.603077 0-25.206154-2.363077-37.809231-7.876923-37.021538-14.966154-59.864615-49.624615-59.864615-89.009231v-275.692307c0-212.676923 173.292308-385.969231 385.969231-385.969231h78.76923c212.676923 0 385.969231 173.292308 385.969231 385.969231 0 169.353846-137.846154 307.2-307.2 307.2H289.083077l-37.021539 37.021538c-18.904615 18.116923-43.323077 28.356923-67.741538 28.356923zM472.615385 195.347692c-178.018462 0-322.953846 144.935385-322.953847 322.953846v275.692308c0 21.267692 15.753846 29.144615 20.48 31.507692 4.726154 2.363077 22.055385 7.876923 37.021539-7.08923l46.473846-46.473846c6.301538-6.301538 14.178462-9.452308 22.055385-9.452308h354.461538c134.695385 0 244.184615-109.489231 244.184616-244.184616 0-178.018462-144.935385-322.953846-322.953847-322.953846H472.615385z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;path d=\u0026#34;M321.378462 512m-59.076924 0a59.076923 59.076923 0 1 0 118.153847 0 59.076923 59.076923 0 1 0-118.153847 0Z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;path d=\u0026#34;M518.301538 512m-59.076923 0a59.076923 59.076923 0 1 0 118.153847 0 59.076923 59.076923 0 1 0-118.153847 0Z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;path d=\u0026#34;M715.224615 512m-59.076923 0a59.076923 59.076923 0 1 0 118.153846 0 59.076923 59.076923 0 1 0-118.153846 0Z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;div class=\u0026#34;talk-wrap\u0026#34;\u0026gt;\u0026lt;ul class=\u0026#34;talk-list\u0026#34;\u0026gt;` var bbAfter = `\u0026lt;/ul\u0026gt;\u0026lt;/div\u0026gt;` resultAll = bbBefore + result + bbAfter bbDom.innerHTML = resultAll; }); setInterval(function() { for (var s, n = document.querySelector(\u0026#34;.talk-list\u0026#34;), e = n.querySelectorAll(\u0026#34;.item\u0026#34;), t = 0; t \u0026lt; e.length; t++) setTimeout(function() { n.appendChild(e[0]) },1000) },1000) \u0026lt;/script\u0026gt; 单页部署代码 已做 js 文件调用处理，找个页面丢入以下 html + js + css 即可。当然，得先部署个 Memos，或者，找个好朋友开个 id 也可以。\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;div id=\u0026#34;bber\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var bbMemos = { memos : \u0026#39;https://me.edui.fun/\u0026#39;,//修改为自己的 apiurl，末尾有 / 斜杠 limit : \u0026#39;\u0026#39;,//默认每次显示 10条 creatorId:\u0026#39;\u0026#39; ,//默认为 101用户 https://demo.usememos.com/u/101 domId: \u0026#39;\u0026#39;,//默认为 \u0026lt;div id=\u0026#34;bber\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://immmmm.com/bb-lmm.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://fastly.jsdelivr.net/gh/Tokinx/ViewImage/view-image.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://fastly.jsdelivr.net/gh/Tokinx/Lately/lately.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 样式代码供参考：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #bber{margin-top:1em;} .timeline ul {margin:0;} .timeline ul li {background:#3b3d42;list-style-type:none;position:relative;width:3px;margin-left:1em;padding:0.8em 0 2em;} .timeline ul li::after {transform: rotate(45deg);content:\u0026#39;\u0026#39;;background-color: #3b3d42;display: block;position: absolute;top: 10px;left: -5px;width: 0.8em;height: 0.8em;outline:15px solid #fff;} .timeline ul li div {position:relative;top:-13px;left:1em;width:670px;padding:0px 16px 0px;} .timeline ul li p.datatime{color: #fafafa;font-size: 0.75em;font-style: italic;background-color: #3b3d42;display: inline-block;padding:0.25em 1em 0.2em 1em;} .timeline ul li p.datacont{white-space: pre-wrap;margin:0.65em 0 0.3em;} .timeline ul li p.datacont img{display:block;max-height:340px !important;} .timeline ul li p.datacont img[src*=\u0026#34;emotion\u0026#34;]{display:inline-block;width:auto;} .timeline ul li p.datafrom{color: #aaa;font-size: 0.75em !important;font-style: italic;} .timeline ul li p{margin:0;font-size:16px;letter-spacing:1px;color: #3b3d42;} .timeline ul li p.datacont .img{cursor: pointer;border:1px solid #3b3d42;max-width:20rem;margin:6px 0 6px 0;} button{border-radius:0;} .dark-theme .timeline ul li div p{color:#fafafa;} .dark-theme .timeline ul li div p svg{fill:#fafafa;} .dark-theme .timeline ul li p.datafrom{color: #aaa;} .dark-theme .timeline ul li{background:#3b3d42;} .dark-theme .timeline ul li::after{outline: 15px solid #2f2f2f;} @media (max-width:860px) { .timeline ul li{margin-left:0;} .timeline ul li div{width:calc(100vw - 75px);left:30px;} } 定时备份数据库 参考：halo 定时备份的方法\n总结 感觉还是小康speak和Butterfly主题更搭，况且小康speak也可以独立部署，所以还是用前者吧！\n参考链接 Hi，Memos\n哔哔点啥 By Memos\n搭建属于你自己的 flomo 应用 :Memos\n好玩儿的Docker项目\n","date":"2022-09-20T19:44:19Z","permalink":"//localhost:1313/archives/memos%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/","title":"Memos部署记录"},{"content":"{% note warning flat %} Debian10 上安装部分应用，速度几乎为0，至少需要Debian11以上，512M内存足够。 {% endnote %}\n安装 Docker 1.首先，更新现有的软件包列表：\n1 sudo apt update -y 2.接下来，安装一些必备软件包，让 apt 通过 HTTPS 使用软件包。\n1 sudo apt install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y 3.然后将官方 Docker hub 的 GPG key 添加到系统中。\n1 curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - 4.将 Docker 版本库添加到APT源：\n1 sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\u0026#34; 5.接下来，我们用新添加的 Docker 软件包来进行升级更新。\n1 sudo apt update -y 6.安装 Docker\n1 sudo apt install docker-ce -y 7.检查 Docker 是否正在运行\n1 2 docker --version sudo systemctl status docker 8.重启 docker 并设置开机自启\n1 2 3 sudo systemctl enable docker sudo systemctl daemon-reload sudo systemctl restart docker 9.修改Docker配置（来自烧饼博客）\n以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘（泪的教训）\n1 2 3 4 5 6 7 8 9 10 11 12 13 cat \u0026gt; /etc/docker/daemon.json \u0026lt;\u0026lt;EOF { \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;20m\u0026#34;, \u0026#34;max-file\u0026#34;: \u0026#34;3\u0026#34; }, \u0026#34;ipv6\u0026#34;: true, \u0026#34;fixed-cidr-v6\u0026#34;: \u0026#34;fd00:dead:beef:c0::/80\u0026#34;, \u0026#34;experimental\u0026#34;:true, \u0026#34;ip6tables\u0026#34;:true } EOF 然后重启 Docker 服务：\n1 systemctl restart docker 在 Docker 中使用镜像 1.要查看已下载到计算机的镜像：\n1 docker images 2.删除某个docker镜像\n1 docker rmi \u0026lt;your-image-id\u0026gt; 3.一次删除多张镜像\n1 docker rmi \u0026lt;your-image-id\u0026gt; \u0026lt;your-image-id\u0026gt; ... 4.一次删除所有镜像\n1 docker rmi $(docker images -q) 在 Docker 中使用容器 1.要查看所有的容器对象，请使用：\n1 docker ps -a docker ps -a -q 分解\ndocker ps 列出活动中容器。 -a 这个选项用于列出所有容器，包括停止运行的。如果没有这个选项，则默认只列出在运行的容器。 -q 这个选项列出容器的数字 ID，而不是容器的所有信息。 2.要启动已停止的容器，请使用docker start命令+容器ID或容器名\n停止所有容器运行：docker stop $(docker ps -a -q) 3.通过docker rm命令来删除不用的容器。\n先使用docker ps -a命令查找相关镜像关联的容器的容器ID或名称，然后通过docker rm命令来删除其删除。 删除所有停止运行的容器：docker rm $(docker ps -a -q) Docker 容器开机自启 1.在使用docker run启动容器时，使用\u0026ndash;restart参数来设置：\n1 docker run -m 512m --memory-swap 1G -it -p 58080:8080 --restart=always 2.如果创建时未指定 \u0026ndash;restart=always ,可通过update 命令设置\n1 docker update --restart=always 容器ID或名称 安装 Docker Compose 1.安装\n1 2 3 4 export LATEST_VERSION=$(wget -qO- -t1 -T2 \u0026#34;https://api.github.com/repos/docker/compose/releases/latest\u0026#34; | grep \u0026#34;tag_name\u0026#34; | head -n 1 | awk -F \u0026#34;:\u0026#34; \u0026#39;{print $2}\u0026#39; | sed \u0026#39;s/\\\u0026#34;//g;s/,//g;s/ //g\u0026#39;) sudo curl -L https://github.com/docker/compose/releases/download/$LATEST_VERSION/docker-compose-linux-`uname -m` \u0026gt; ./docker-compose sudo chmod +x ./docker-compose sudo mv ./docker-compose /usr/local/bin/docker-compose 2.查看版本\n1 docker-compose --version 3.使用 -d 选项以分离模式启动 Compose(后台)\n1 docker-compose up -d 4.要查看正在运行的 docker 容器，请使用以下命令\n1 docker-compose ps 5.删除容器\n1 2 3 4 5 cd /root/data/docker_data/joplin # 进入docker-compose所在的文件夹 docker-compose down # 停止容器，此时不会删除映射到本地的数据 rm -rf /root/data/docker_data/joplin # 完全删除映射到本地的数据 6.一些 Docker Compose 常用命令：\n1 2 3 4 5 docker-compose restart # 重启容器 docker-compose stop # 暂停容器 docker-compose down # 删除容器 docker-compose pull # 更新镜像 docker-compose exec artalk bash # 进入容器 7.Docker Compose升级\n删除现有容器，拉取最新镜像，然后重新创建容器即可。\n1 2 3 docker-compose down docker-compose pull docker-compose up -d 开机自动启动应用容器 1.方法一、通过 Docker Restart Policy 方法\n在 Docker 中，支持 \u0026ndash;restart 选项，来控制容器自动启动。在 Docker Compose 中，应该使用 restart 属性\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 version: \u0026#39;2\u0026#39; services: database: build: ./mysql/ command: mysqld --user=root --verbose + restart: always environment: MYSQL_DATABASE: \u0026#34;web_level3_sqli\u0026#34; MYSQL_USER: \u0026#34;web_level3_sqli\u0026#34; MYSQL_PASSWORD: \u0026#34;thisisasecurepassword123\u0026#34; MYSQL_ROOT_PASSWORD: \u0026#34;root\u0026#34; MYSQL_ALLOW_EMPTY_PASSWORD: \u0026#34;yes\u0026#34; web: build: ./www/ + restart: always ports: - \u0026#34;12000:80\u0026#34; volumes: - ./www/src:/var/www/html links: - database 注意事项： 1）Docker 并不知道这些服务的依赖关系及启动顺序，需要我们精心编排 docker-compose.yaml 文件； 2）Docker Compose 不支持 deploy:restart_policy 属性，该属性只能用于 a swarm with docker stack deploy 环境；\n2.方法二、通过进程管理服务（推荐）\n该方法本质上还是在执行 docker-compose 命令。\n使用 systemd 管理 如下示例，可以根据需要进行设置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # cat /etc/systemd/system/docker-compose-app.service [Unit] Description=Docker Compose Application Service Requires=docker.service After=docker.service [Service] Type=oneshot RemainAfterExit=yes WorkingDirectory=/srv/docker/app/ ExecStart=/usr/local/bin/docker-compose up -d ExecStop=/usr/local/bin/docker-compose down TimeoutStartSec=0 [Install] WantedBy=multi-user.target 7.卸载 Docker Compose\n1 sudo rm /usr/local/bin/docker-compose 常见问题 1.出错提示：error storing credentials - err: exit status 1, out: Cannot autolaunch D-Bus without X11 $DISPLAY\n解决方法：\n1 sudo apt install gnupg2 pass -y 参考链接 如何在 debian 10 中安装和使用 Docker Debian 11 安装 Docker \u0026amp; Docker Compose 实用教程Debian 10系统中安装Docker Compose过程 Docker 容器开机自启 docker-compose 关机或者重启docker同时重启容器restart always的配置 如何删除 Docker 镜像和容器 ","date":"2022-08-22T17:56:32Z","permalink":"//localhost:1313/archives/debian-10-%E5%AE%89%E8%A3%85-docker-docker-compose/","title":"Debian 10 安装 Docker \u0026 Docker Compose"},{"content":" 注：本攻略来自网上\n整理的攻略：中国：明月 法国：依视路 德国：蔡司，罗敦司得 日本：豪雅，精工 韩国：凯米 网店：宝岛，（​宝岛眼​镜官方旗舰店）依视路（依视路旗舰店），蔡司（Zeiss 蔡司官方旗舰店） 国产总结：明月，万新，康耐特，新天鸿，优立，伟星，唯尊，鸿晨，schuman，洪旭 网上选择镜框尺寸：镜框宽度加一半的鼻梁宽 等于瞳距 或者公式瞳距 32 两只眼睛是 64 镜框宽 54 加鼻梁 16 的一半 8 等于 64 64 的一半是 32 刚好等于瞳距 公式二：📝用眼镜框的宽度 + 鼻梁宽度 - 瞳距再除以 2 最后得到的数尽量小于 3▶️举个例子：镜框宽度 48 + 鼻梁宽度 18=66，用 66 - 瞳距 60=6，再用 6 除以 2 最后等于 3，像这样的镜框就是比较适合的，小伙伴们可以自行去算一下当然越小越好最大也不要超过 5 或者 6。这样的话我们镜片的光学中心和镜框的光学中心能够尽可能的吻合，让我们配戴起来不会加深眼睛疲劳，尤其是青少年度数还不高\n折射率：折射率越大 镜片越薄 但同时视觉效果有所下降 ，价格却直线飙升 度数低尽量别配高折射率镜片 白花钱 折射率参考：100 200-1.50 200-400 -1.56 300-600-1.60 400-800-1.67 800 以上 1.74 啊贝数：这个参数基本品牌差不多 但是同折射率同度数的镜片啊贝数低的就别选了。 球面 ：球面 非球面 双非球面 双非的价格品质最高 度数高 不差钱的不二选择 镀膜：镀膜的好处体现在透光率和耐磨度 但又不起决定作用 ，防辐射 防紫外线的镀膜确实有用 但是感受发黄有反光 不是 it 没必要选择 所以不是杂牌同度数同折射率一百两百和和上千基本没差距 还有抗疲劳和多焦点的 已成年没必要选择 其实没有完全证据证明这类镜片有效 ，酌情考虑，不要相信立等可取 那那么巧刚好有你参数基本符合的镜片 等几天吧 。 配镜：了解前面的品牌数据 就开始配镜了 验光很重要 去三甲医院或大型连锁眼镜店 推荐宝岛 因为他们会在公众号有你的数据档案 ， 后续不管 在网上配还是 线下配 数据都精确​。\n（网友：我是去的线下同仁验光测的，然后买的京东京造。）\n","date":"2022-08-17T08:38:34Z","permalink":"//localhost:1313/archives/%E9%85%8D%E7%9C%BC%E9%95%9C%E6%94%BB%E7%95%A5/","title":"配眼镜攻略"},{"content":" 本文转自：https://blog.csdn.net/weixin_46435234/article/details/114437203\n1.点击键盘F12键，进入开发者模式\n2.发现标志,html5播放器，属于原生支持最方便实现加速的\n3.在开发者模式中找到Console 调式窗口，输入以下代码 可以设置视频播放速度\n1 2 3 4 5 6 7 8 9 10 11 /* play video twice as fast */ document. querySelector(\u0026#39;video\u0026#39;).defaultPlaybackRate = 1.0;//默认一倍速播放 document.querySele ctor(\u0026#39;video\u0026#39;).play(); /* now play three times as fast just for the heck of it */ document.querySelector(\u0026#39;video\u0026#39;).playbackRate = 10.0; //修改此值设置当前的播放倍数 4.直接跳过视频：\n1 2 3 4 5 6 7 8 9 function skip() { let video = document.getElementsByTagName(\u0026#39;video\u0026#39;) for (let i=0; i\u0026lt;video.length; i++) { video[i].currentTime = video[i].duration } } setInterval(skip,200) ","date":"2022-08-08T13:09:22Z","permalink":"//localhost:1313/archives/%E8%A7%A3%E5%86%B3%E7%BD%91%E9%A1%B5%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%A6%81%E6%AD%A2%E6%8B%96%E5%8A%A8/","title":"解决网页视频播放器进度条禁止拖动"},{"content":"所需软件：{% btn \u0026lsquo;https://notepad-plus-plus.org/downloads/',Notepad++,far fa-hand-point-right,blue larger %}\n步骤：\n将所需替换文件放到同一个文件夹里。 用Notepad++打开其中的一个文件，执行搜索—查找—文件查找填好查找目标、替换为、文件类型（如：*.md）、目录，最后点击在文件中替换。 参考：windows批量查找替换多个文本文件中的内容\n","date":"2022-07-13T17:43:13Z","permalink":"//localhost:1313/archives/notepad-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/","title":"Notepad++批量修改文件内容"},{"content":"题型一 此题用相似三角形最简单，3/a=b/8，ab=24 但小学阶段就用上图方法为好。\n题型二 题型三 如图将圆柱斜切一刀求体积。将圆柱补齐，所求图形的体积为高5cm圆柱体积的一半。\nPS：可先用希沃白板画出图形，利用克隆等小工具展示拼接图形的过程。\n参考：六年级：巧求阴影部分面积\n","date":"2022-06-28T23:18:14Z","permalink":"//localhost:1313/archives/%E6%B1%82%E9%98%B4%E5%BD%B1%E9%83%A8%E5%88%86%E9%9D%A2%E7%A7%AF/","title":"求阴影部分面积"},{"content":"由于一些原因，之前服务器上用的Centos换成了Debian。Debian虽然和Centos大同小异，但是还是有些东西要记一下。\n{% note warning flat %} Debian10 上安装部分应用，速度几乎为0，至少需要Debian11以上，512M内存足够。 {% endnote %}\n{% note primary no-icon %} 推荐使用terminal(ssh 工具) ，finashell 也行。 {% endnote %}\nDebian 更新报错的解决方法 一台很老的Debian使用apt-get update的时候，出现一下报错。（非必要，不要更新）\n解决方法\n1 2 apt-get update --allow-releaseinfo-change apt-get upgrade 提示：Unable to fetch some archives, maybe run apt-get update or try with \u0026ndash;fix-missing?\n解决方法（问chatgpt）：\n1 apt-get update --fix-missing 调整时区 如果你不知道服务器当前时间，可以使用下面的命令，查看当前时间：\n1 date -R 修改当前时区为上海：\n1 sudo timedatectl set-timezone Asia/Shanghai 再次不带任何选项参数调用 timedatectl 命令，打印系统当前设置的时区即可：\n1 timedatectl putty保存登录账号和密码 1.创建一个桌面快捷方式。\n2.进入快捷方式属性，修改目标，在后面加上 -ssh -l 用户名 -pw 密码 -i session标识 -P 端口号 IP地址。例如 \u0026ldquo;C:\\Program Files\\PuTTY\\putty.exe\u0026rdquo; -ssh -l root -pw 123456 -i \u0026ldquo;yuanchengserver1\u0026rdquo; -P 22 142.16.187.129\n1 E:\\软件\\putty.exe -ssh -l root -pw password -i \u0026#34;yansvps\u0026#34; -P 22 ip 3.然后，通过快捷方式就可以直接登录了~\nPS：putty没有FinalShell好用。\nvi无法正常使用 1.先安装vim：\n1 apt install vim -y 2.修改vimrc.tiny vi /etc/vim/vimrc.tiny 将其中的语句 set compatible 修改为 set nocompatible ，非兼容模式下可以解决方向键变ABCD的问题。\n在刚才那句话后面再加一句 set backspace=2 来解决退格键无法使用的问题。\n1 2 3 vi /etc/vim/vimrc.tiny set nocompatible set backspace=2 3.卸载vim vim颜色太花眼了，所以最后把它卸载：\n1 apt remove vim -y Debian安装vsftpd {% note warning no-icon %} 传输大文件慢，可以用transmission下载完后，配合nginx开启目录浏览，配置好SSL使用；也可以用terminal(ssh工具)上传下载文件，finashell也行。 {% endnote %}\n0.开启21端口：\n1 iptables -I INPUT 5 -p tcp --dport 21 -j ACCEPT 1.安装命令：\n1 sudo apt install vsftpd -y 2.安装软件包后，启动vsftpd，并使其能够在引导时自动启动：\n1 2 sudo systemctl start vsftpd sudo systemctl enable vsftpd 3.编辑vsftpd.conf\n1 vi /etc/vsftpd.conf （1）去掉write_enable=YES前面的注释，使用户可以上传文件。\n（2）要仅允许某些用户登录FTP服务器，请在文件末尾添加以下行：\n1 2 3 userlist_enable=YES userlist_file=/etc/vsftpd.user_list userlist_deny=NO 启用此选项后，您需要通过向/etc/vsftpd.user_list文件添加用户名（每行一个用户）明确指定哪些用户能够登录。\n（3）添加FTP用户。\n1 2 sudo adduser admin sudo passwd admin （4）将用户添加到允许的 FTP 用户列表中：\n1 echo \u0026#34;admin\u0026#34; | sudo tee -a /etc/vsftpd.user_list （5）关闭防火墙\n1 2 systemctl stop firewalld.service systemctl disable firewalld.service （6）使 ftp 用户admin可以上传文件到指定目录\n1 2 sudo chmod 755 /var/www/speak sudo chown -R admin: /var/www/speak （7）重启 vsftpd 服务\n保存文件并重新启动 vsftpd 服务，以使更改生效：\n1 sudo systemctl restart vsftpd 4.设置允许root登录\n将root添加到允许的FTP用户列表中： 1 echo \u0026#34;root\u0026#34; | sudo tee -a /etc/vsftpd/user_list 修改/etc/vsftpd/user_list和/etc/ftpusers两个设置文件脚本，将root账户前加上#号变为注释 1 vi /etc/vsftpd/user_list 1 vi /etc/ftpusers 5.重启vsftpd服务\n1 sudo systemctl restart vsftpd 6.解决Nginx出现403 forbidden\nj假设网站根目录在/var/www/blog/，则执行：\n1 chmod -R 777 /var/www 7.限制用户登录（未启用）\n要仅允许某些用户登录FTP服务器，请在文件末尾添加以下几行：\n1 vi /etc/vsftpd.conf 1 2 3 userlist_enable=YES userlist_file=/etc/vsftpd/user_list userlist_deny=NO 启用此选项后，您需要通过将用户名添加到/etc/vsftpd.user_list文件（每行一个用户）来明确指定哪些用户可以登录。使用以下命令：\n1 echo \u0026#34;admin\u0026#34; | sudo tee -a /etc/vsftpd/user_list 开启80、443端口 1 iptables -I INPUT -p tcp --dport 443 -j ACCEPT 1 service iptables save 1 service iptables restart Debian 9上安装和配置Postfix邮件 1.安装 mailtuils:\n1 sudo apt install mailutils -y 2.安装postfix后缀:\n1 sudo apt install postfix 在安装过程即将结束时，您将看到一个类似于下图中的窗口的窗口。默认选项是Internet Site。这是本教程的推荐选项，请按TAB，然后按ENTER。 之后，您将获得另一个窗口，就像下一个图像中的窗口一样。该系统邮件名称应该是一样的，你分配给服务器，当你在创造它的名字。如果它显示子域subdomain.example.com，请将其更改为ust example.com。完成后，按TAB，然后ENTER。\n3.配置Postfix\n1 vi /etc/postfix/main.cf 打开文件后，向下滚动，直到看到以下部分：\n1 2 3 4 5 . . . mailbox_size_limit = 0 recipient_delimiter = + inet_interfaces = all . . . 将读取的inet_interfaces = all行更改为inet_interfaces = loopback-only：\n1 2 3 4 5 . . . mailbox_size_limit = 0 recipient_delimiter = + inet_interfaces = loopback-only . . . 您需要修改的另一个指令是mydestination，用于指定通过local_transport邮件传递传输传递的域列表。默认情况下，值类似于：\n1 2 3 . . . mydestination = $myhostname, example.com, localhost.com, , localhost . . . 此指令的建议默认值在下面的代码块中给出，因此请修改以匹配：\n1 2 3 . . . mydestination = $myhostname, localhost.$your_domain, $your_domain . . . 4.重启Postfix。\n1 sudo systemctl restart postfix 5.测试SMTP服务器\n1 echo \u0026#34;This is the body of the email\u0026#34; | mail -s \u0026#34;This is the subject line\u0026#34; your_email_address 6.debian 彻底删除posfix 然后重新安装\n如果安装出错，先彻底删除posfix 然后重新安装\n关闭 service postfix start 1 service postfix stop 卸载postfix 1 2 3 apt-get remove postfix -y dpkg --purge postfix apt autoremove 查看配置文件是否已经删除 查看 /etc/postfix是否已经删除掉\n安装Transmission {% note primary no-icon %} 速度不及下面的qbittorrent {% endnote %}\n1.安装\n1 2 sudo apt-get update -y sudo apt-get install transmission transmission-daemon -y 2.启动\u0026amp;关闭\n1 2 3 systemctl start transmission-daemon systemctl enable transmission-daemon systemctl stop transmission-daemon 3.修改配置（关闭后再修改配置）\n1 sudo vi /var/lib/transmission-daemon/info/settings.json 1 2 3 4 5 6 7 8 9 10 11 12 13 { \u0026#34;download-dir\u0026#34;: \u0026#34;/home/admin\u0026#34;, ...... \u0026#34;rpc-authentication-required\u0026#34;: true \u0026#34;rpc-bind-address\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;rpc-enabled\u0026#34;: true, \u0026#34;rpc-password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;rpc-port\u0026#34;: 9091, \u0026#34;rpc-url\u0026#34;: \u0026#34;/transmission/\u0026#34;, \u0026#34;rpc-username\u0026#34;: \u0026#34;transmission\u0026#34;, \u0026#34;rpc-whitelist\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;rpc-whitelist-enabled\u0026#34;: true, ...... 主要是rpc-whitelist、用户名、密码和 download-dir（可选）\n如果修改下载目录，将下载目录改成： \u0026ldquo;download-dir\u0026rdquo;: \u0026ldquo;/home/admin\u0026rdquo;，那么还要赋予debian-transmission读写/home/admin的权限：\n1 2 sudo chmod 755 /home/admin sudo chown -R debian-transmission: /home/admin 执行sudo vi /etc/init.d/transmission-daemon可以看到运行用户。\n4.美化WEB UI：\n1 2 wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh bash install-tr-control-cn.sh 安装nginx 1 2 3 sudo apt install nginx -y sudo systemctl start nginx sudo systemctl enable nginx 配置nginx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 server { listen 80 ; listen [::]:80; root /home/admin; server_name example.com; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /home/admin; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /home/admin; access_log off; expires 10m; } location / { root /home/admin; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } autoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8,gbk; } debian11配置SSL证书 安装 Certbot 1 sudo apt-get install letsencrypt -y 使用 webroot 自动生成证书 1 certbot certonly --webroot -w /home/admin -d example.com -m 455343442@qq.com --agree-tos 编辑Nginx 1 vi /etc/nginx/conf.d/ftp.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 server { listen 80; listen [::]:80; root /home/admin; server_name example.com; listen 443 ssl; # managed by Certbot # RSA certificate ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot # Redirect non-https traffic to https if ($scheme != \u0026#34;https\u0026#34;) { return 301 https://$host$request_uri; } # managed by Certbot autoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8,gbk; } 测试配置是否有问题：\n1 nginx -t 重启 Nginx 生效：\n1 systemctl restart nginx 自动续期 Let’s Encrypt 的证书有效期为 90 天，不过我们可以通过 crontab 定时运行命令更新证书。\n先运行以下命令来测试证书的自动更新：\n1 certbot renew --dry-run 如果一切正常，就可以编辑 crontab 定期运行以下命令：\n1 crontab -e 1 30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\n1 openssl x509 -noout -dates -in /etc/letsencrypt/live/example.com/cert.pem 安装qbittorrent-nox **1.**安装qbittorrent-nox\n1 2 apt update apt install qbittorrent-nox -y 2. 新建systemd文件，如下所示：\n1 vi /etc/systemd/system/qbittorrent-nox.service 1 2 3 4 5 6 7 8 9 [Unit] Description=qBittorrent Command Line Client After=network.target [Service] User=root ExecStart=/usr/bin/qbittorrent-nox Restart=on-failure [Install] WantedBy=multi-user.target 3. 启用进程守护，直接执行以下命令就行了，最后一条命令执行完，出现active关键字就说明一切都如预期的那样跑起来了。\n1 2 3 4 systemctl daemon-reload systemctl start qbittorrent-nox systemctl enable qbittorrent-nox systemctl status qbittorrent-nox 至此，在浏览器中输入服务器的IP和qbittorrent-nox的端口就可以进入了，例如http://1.1.1.1:8080，这里的1.1.1.1是服务器的IP，8080是刚才进程守护文件中写入的端口。用户名是admin，用户密码：adminadmin。 强烈建议进去之后，立马修改用户名和用户密码！！！具体位置在tool\u0026gt;options\u0026gt;webui这里，还可以修改成中文。\n4. 修改下载目录和设置权限\n1 2 mkdir /home/admin chmod 777 /home/admin 重启qbittorrent-nox：\n1 systemctl daemon-reload 5.最后把下载路径设置到/home/admin就OK了！\nNginx反代qbittorrent-nox的Web-GUI 修改监听地址 http+非标端口，总让人强迫症犯了，所以搞了个SSL和Nginx反代，让qbittorrent-nox的Web-GUI看起来舒服一些。 首先，在tool\u0026gt;options\u0026gt;webui中，将监听的IP地址从*改成127.0.0.1，然后执行重启命令systemctl restart qbittorrent-nox以生效。这样只有服务器本地才能访问，其他都不行(网页打不开，待后面配置好域名才能访问)\n安装 nginx 1 2 3 sudo apt install nginx -y sudo systemctl start nginx sudo systemctl enable nginx 新建网站目录 为了便于申请证书，需要新建反代网站目录，一定不要在/root目录上新建\n1 2 mkdir -p /var/www/qt cp /usr/share/nginx/html/* /var/www/qt 配置 nginx 1 vi /etc/nginx/conf.d/qt.conf 修改配置文件，将server_name _;中的_改成域名，在location /中注释掉try_files $uri $uri/ =404;（debian11上没有这一行，不用注释），并将以下内容写入location /字段：\n1 2 3 4 5 6 7 proxy_pass http://127.0.0.1:8080/; proxy_http_version 1.1; proxy_set_header X-Forwarded-Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; http2_push_preload on; 配置 Nginx http 80 端口 为了使下面申请证书时能访问 http://bore.vip/.well-known/acme-challenge/… 这个链接，首先配置好http://bore.vip/.well-known/acme-challenge/…这个链接，首先配置好Nginx 80 端口，保证上述网址能顺利访问，从而顺利申请证书。所以在 nginx 配置的 server 节点下添加：\n1 2 3 location ~ /.well-known { allow all; } 最终修改为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 server { listen 80; root /var/www/qt; index index.html index.htm index.nginx-debian.html; server_name qt.bore.vip; #access_log /var/log/nginx/host.access.log main; location / { proxy_pass http://127.0.0.1:8080/; proxy_http_version 1.1; proxy_set_header X-Forwarded-Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; http2_push_preload on; } location ~ /.well-known { allow all; } } 测试配置是否有问题：\n1 nginx -t 重启 Nginx 生效：\n1 systemctl restart nginx 配置SSL证书 实际上，我还添加了SSL（需要先注释掉server中的listen 80 default_server;和listen [::]:80 default_server;两行 ）。整体示例如下，就不细说了，可以对照着自己配置文件修改。如果不熟悉的，强烈建议使用Let's Encrypt等一键SSL/TLS程序添加SSL功能。\n安装 Certbot 1 sudo apt-get install letsencrypt -y 使用 webroot 自动生成证书 1 certbot certonly --webroot -w /var/www/qt -d qt.bore.vip -m 455343442@qq.com --agree-tos 如果提示404错误：\n1 2 3 sudo chmod 755 /var/www/qt systemctl restart nginx systemctl restart qbittorrent-nox RN可能要多申请几遍证书，bwg一次就成功了。\n编辑 Nginx 1 vi /etc/nginx/conf.d/qt.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 server { listen 80; server_name qt.bore.vip; root /var/www/qt; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; #access_log /var/log/nginx/host.access.log main; location / { proxy_pass http://127.0.0.1:8080/; proxy_http_version 1.1; proxy_set_header X-Forwarded-Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; http2_push_preload on; } location ~ /.well-known { allow all; } listen 443 ssl; # managed by Certbot # RSA certificate ssl_certificate /etc/letsencrypt/live/qt.bore.vip/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/qt.bore.vip/privkey.pem; # managed by Certbot # Redirect non-https traffic to https if ($scheme != \u0026#34;https\u0026#34;) { return 301 https://$host$request_uri; } # managed by Certbot } 测试配置是否有问题：\n1 nginx -t 重启 Nginx 生效：\n1 systemctl restart nginx 自动续期 Let’s Encrypt 的证书有效期为 90 天，不过我们可以通过 crontab 定时运行命令更新证书。\n先运行以下命令来测试证书的自动更新：\n1 certbot renew --dry-run 如果一切正常，就可以编辑 crontab 定期运行以下命令：\n1 crontab -e 1 30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\n1 openssl x509 -noout -dates -in /etc/letsencrypt/live/qt.bore.vip/cert.pem 配置nginx开启目录浏览 将qt下载目录结合nginx开启目录浏览，便于下载。\n安装 nginx 1 2 3 sudo apt install nginx -y sudo systemctl start nginx sudo systemctl enable nginx 配置 nginx 1 vi /etc/nginx/conf.d/ftp.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 server { listen 80 ; listen [::]:80; root /home/admin; server_name ftp.bore.vip; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /home/admin; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /home/admin; access_log off; expires 10m; } location / { root /home/admin; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } autoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8,gbk; } 配置 SSL 证书 安装 Certbot 1 sudo apt-get install letsencrypt -y 使用 webroot 自动生成证书 1 certbot certonly --webroot -w /home/admin -d example.com -m 455343442@qq.com --agree-tos 编辑 Nginx 1 vi /etc/nginx/conf.d/ftp.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 server { listen 80; listen [::]:80; root /home/admin; server_name ftp.bore.vip; listen 443 ssl; # managed by Certbot # RSA certificate ssl_certificate /etc/letsencrypt/live/ftp.bore.vip/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/ftp.bore.vip/privkey.pem; # managed by Certbot # Redirect non-https traffic to https if ($scheme != \u0026#34;https\u0026#34;) { return 301 https://$host$request_uri; } # managed by Certbot location / { root /home/admin; autoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8,gbk; } } 1 systemctl restart nginx 自动续期 Let’s Encrypt 的证书有效期为 90 天，不过我们可以通过 crontab 定时运行命令更新证书。\n先运行以下命令来测试证书的自动更新：\n1 certbot renew --dry-run 如果一切正常，就可以编辑 crontab 定期运行以下命令：\n1 crontab -e 1 30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\n1 openssl x509 -noout -dates -in /etc/letsencrypt/live/ftp.bore.vip/cert.pem 附录 vsftpd.conf注释 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 # 全域性配置 # 本地系統使用者寫入許可權； write_enable=YES # 本地使用者建立檔案及目錄預設許可權掩碼； local_umask=022 # 列印目錄顯示資訊，通常用於使用者第一次訪問目錄時，資訊提示； dirmessage_enable=YES # 啟用上傳/下載日誌記錄； xferlog_enable=YES # 日誌檔案將根據xferlog的標準格式寫入； xferlog_std_format=YES # 指定 log 路徑 xferlog_file=/var/log/vsftpd.log # FTP使用20埠進行資料傳輸； connect_from_port_20=YES # Vsftpd不以獨立的服務啟動，通過Xinetd服務管理，建議改成YES； listen=NO # 啟用IPV6監聽； listen_ipv6=YES # 登入FTP伺服器，依據/etc/pam.d/vsftpd中內容進行認證； pam_service_name=vsftpd # Vsftpd.user_list和ftpusers配置檔案裡使用者禁止訪問FTP； userlist_enable=YES # 設定vsftpd與tcp wrapper結合進行主機的訪問控制，Vsftpd伺服器檢查/etc/hosts.allow 和/etc/hosts.deny中的設定，來決定請求連線的主機，是否允許訪問該FTP伺服器。 tcp_wrappers=YES # 限制使用者都只能讀取家目錄 chroot_local_user=YES # 這樣子才可以正常讀取家目錄 allow_writeable_chroot=YES # 帳號清單路徑 userlist_file=/etc/vsftpd.userlist # 白名單，拒絕除檔案中的使用者外的使用者FTP訪問 userlist_deny=NO # 是否使用本地時間？vsftpd 預設使用 GMT 時間(格林威治)，所以會比台灣晚 8 小時，建議設定為 YES 吧 use_localtime=YES # 這個選項必須指定一個空的資料夾且任何登入者都不能有寫入的權限，當vsftpd 不需要file system 的權限時，就會將使用者限制在此資料夾中。預設值為/usr/share/empty secure_chroot_dir=/var/run/vsftpd/empty # 這樣子有可能在傳中文不會有亂碼 syslog_enable=YES # 同一個IP最大同時下載人數，預設沒有限制 max_per_ip=1 # 連線閒置時間超180秒就中斷，單位以second accept_timeout=180(DEFAULT:60) # 資料傳送閒置時間超180秒就中斷，單位以second data_connection_timeout=180(DEFAULT:YES) # 本地使用者配置 # 啟用本地系統使用者訪問； local_enable=YES # 本地使用者建立檔案及目錄預設許可權掩碼； local_umask=022 # 修改本地使用者登入時訪問的目錄路徑 local_root=/home/ftp # 匿名使用者訪問配置（最大許可權） # 開啟匿名使用者訪問； anonymous_enable=NO # 匿名使用者上傳檔案的umask值 anon_umask=022 # 允許匿名使用者上傳檔案 anon_upload_enable=YES # 允許匿名使用者建立目錄 anon_mkdir_write_enable=YES # 允許匿名使用者修改目錄名稱或刪除目錄 anon_other_write_enable=YES # 修改匿名使用者登入時訪問的目錄路徑 anon_root=/data/ftpdata 参考链接 1.解决 Debian 下使用 vi 时方向键乱码，退格键不能使用的问题 2.Debian安装vsftpd 3.Debian下vsftpd设置允许root登录分析 4.putty保存登录账号和密码 5.如何在Debian 9上使用VSFTPD设置FTP服务器 6.Ubuntu安装Transmission并美化WEB UI实操教程 7.Update: Using Free Let’s Encrypt SSL/TLS Certificates with NGINX 8.Debian 11安装qbittorrent-nox并设置Nginx反代 9.Debian安装qbittorrent-nox ","date":"2022-05-29T01:12:45Z","permalink":"//localhost:1313/archives/debian%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98/","title":"Debian使用备忘"},{"content":"本文参考：\nHalo-theme-joe2.0 食用文档 Joe2.0 样式指南 安装 \u0026amp; 更新 安装前请确保 Halo版本 和主题的兼容性，V1.0.10 及以上版本仅支持 Halo 1.5+，以下版本兼容到 Halo 1.4.11，请知悉。\n复制主题仓库地址 https://github.com/qinhua/halo-theme-joe2.0.git\n进入博客后台管理 外观-主题-安装-远程下载，贴入仓库地址进行安装（建议直接使用最新版本 ）。 如果在线安装失败（大概率失败 😆 ），那就选择 本地上传，到主题 Release 页面下载指定版本主题压缩包，并上传上去（务必在 Release 页面下载压缩包，否则可能出现资源加载出错的问题）；\n等待提示安装完成即可；\n更新主题时，建议直接通过 外观-主题-Joe2.0-更多-从主题包更新 把下载好的 zip 包上传上去，然后 先切换到其他主题，再切回本主题，并进入主题设置执行一次保存，最后强刷前端页面即可（这里切主题主要是为了避免有时候主题状态未激活和缓存的问题）。\n注意事项 安装主题后请务必到 后台管理 - 博客设置 - 高级选项 中开启 API服务 并配置 Access key 为 joe2.0（切记要和主题设置中的 AccessKey 一致），不然部分用到 Content API 的页面会请求失败并报错。（请参考以下报错） 1 2 “API has been disabled by blogger currently” —— 后台管理中未开启API服务 “API access key is mismatch” —— 主题中的 AccessKey 和后台管理中的不一致 如果后台管理中之前已经配置了其它的 Access Key（内容不是 joe2.0），那么需要你到本主题设置中的 基本设置-AccessKey\u0026lt;必填\u0026gt; 同步一下这个 Access key，保证两部一致即可（切记一致才行，且不要填写中文或特殊字符）。\n有时，主题升级后配置项变化较大，直接访问博客可能会报错，导致页面渲染不出来。此时，只需要进入当前主题的设置界面执行一下保存操作来更新旧的配置，然后再访问页面即可；\n有时，明明已经提示主题更新成功了，但访问博客时页面还是加载的旧版本的文件，可能是由于 主题激活状态不正常 或 主题缓存的问题 导致的。此时，只需要先启用其他主题再启用本主题即可，建议每次更新主题之后都做一下这个操作（目前后台管理系统还不太完善）。还有就是如果你配置了 CDN 服务，记得清理相应节点的缓存，让它回源取最新资源。\n强烈建议 每次更新主题后，务必先清空一下浏览器缓存，保证加载的资源都是最新版本的，并到主题设置中执行一次保存，保证配置项是最新的，不然可能有各种报错（你可以通过 Ctrl + F5 强制刷新或者 Ctrl + Shift + DEL 清空浏览器所有缓存）。\n最后，建议大家在 后台管理-系统-博客设置-高级选项-其他设置 中开启 全局绝对路径。\n插入多媒体 插入音乐 怎样在文章中插入网易云播放器？\nid：网易云歌单 ID 或 歌曲 ID（可从歌曲网址中获取）\n歌单 1 \u0026lt;joe-mlist id=\u0026#34;6800335663\u0026#34;\u0026gt;\u0026lt;/joe-mlist\u0026gt; 单曲 1 \u0026lt;joe-music id=\u0026#34;1303046498\u0026#34;\u0026gt;\u0026lt;/joe-music\u0026gt; 本地音乐 1 2 3 4 5 6 7 \u0026lt;joe-mp3 name=\u0026#34;天生狂野-柴古唐斯主题曲\u0026#34; url=\u0026#34;https://bbchin.com/upload/2022/04/%E5%A4%A9%E7%94%9F%E7%8B%82%E9%87%8E-%E6%9F%B4%E5%8F%A4%E5%94%90%E6%96%AF%E4%B8%BB%E9%A2%98%E6%9B%B2.mp3\u0026#34; theme=\u0026#34;red\u0026#34; cover=\u0026#34;https://bbchin.com/upload/2022/04/cgts.png\u0026#34; autoplay \u0026gt;\u0026lt;/joe-mp3\u0026gt; 插入视频 文章中如何插入视频？\n主题已集成 dplayer，只需要在编辑文章时使用 joe-dplayer 标签插入视频地址即可（建议 MP4 格式，其它格式未必支持，切记前后要空一行），它接受如下属性：\nsrc：视频地址（必传） width：阅读器宽度，默认为 100% height：阅读器高度，默认 500px 1 \u0026lt;joe-dplayer src=\u0026#34;https://xxx.mp4\u0026#34;\u0026gt;\u0026lt;/joe-dplyer\u0026gt; 如果你想嵌入 B站视频，可以使用 joe-bilibili 标签（切记前后要空一行），它接受如下属性（相关参数可以从视频地址中获取）。\nbvid：视频的 id（必传） page：视频的 page，即分页 width：阅读器宽度，默认为 100% height：阅读器高度，默认 500px 1 \u0026lt;joe-bilibili bvid=\u0026#34;BV12h411k7vr\u0026#34;\u0026gt;\u0026lt;/joe-bilibili\u0026gt; 文本元素 段落缩进 1 2 3 4 \u0026lt;p class=\u0026#34;indent\u0026#34;\u0026gt; 有些男人就像烤面筋，外表黄黄的，身体圆圆的，说话柔柔的，无害，看上去还非常好吃。可当你吃下去，才知道他绵绵的，并无特别的味道，甚至到你吃完，你都不知道他是用什么做的。 ---- 李七毛《我们都不擅长告别》 \u0026lt;/p\u0026gt; 居中标题 1 \u0026lt;joe-mtitle title=\u0026#34;牛鞭牛鞭\u0026#34;\u0026gt;\u0026lt;/joe-mtitle\u0026gt; 按钮元素 多彩按钮 1 \u0026lt;joe-abtn color=\u0026#34;#409eff\u0026#34; content=\u0026#34;多彩按钮\u0026#34;\u0026gt;\u0026lt;/joe-abtn\u0026gt; 1 \u0026lt;joe-abtn icon=\u0026#34;fa-bell\u0026#34; content=\u0026#34;带图标按钮\u0026#34;\u0026gt;\u0026lt;/joe-abtn\u0026gt; 1 \u0026lt;joe-abtn radius=\u0026#34;12px\u0026#34; content=\u0026#34;圆角按钮\u0026#34;\u0026gt;\u0026lt;/joe-abtn\u0026gt; 便条按钮 便条按钮不能自定义色彩，必须使用一个图标，其他的的和上面的多彩按钮一样\n1 2 3 4 5 \u0026lt;joe-anote href=\u0026#34;#\u0026#34; type=\u0026#34;secondary\u0026#34; content=\u0026#34;便条按钮\u0026#34;\u0026gt;\u0026lt;/joe-anote\u0026gt; \u0026lt;joe-anote icon=\u0026#34;fa-bus\u0026#34; href=\u0026#34;#\u0026#34; type=\u0026#34;success\u0026#34; content=\u0026#34;便条按钮\u0026#34;\u0026gt;\u0026lt;/joe-anote\u0026gt; \u0026lt;joe-anote icon=\u0026#34;fa-bus\u0026#34; href=\u0026#34;#\u0026#34; type=\u0026#34;warning\u0026#34; content=\u0026#34;便条按钮\u0026#34;\u0026gt;\u0026lt;/joe-anote\u0026gt; \u0026lt;joe-anote icon=\u0026#34;fa-bus\u0026#34; href=\u0026#34;#\u0026#34; type=\u0026#34;error\u0026#34; content=\u0026#34;便条按钮\u0026#34;\u0026gt;\u0026lt;/joe-anote\u0026gt; \u0026lt;joe-anote icon=\u0026#34;fa-bus\u0026#34; href=\u0026#34;#\u0026#34; type=\u0026#34;info\u0026#34; content=\u0026#34;便条按钮\u0026#34;\u0026gt;\u0026lt;/joe-anote\u0026gt; 网盘按钮 1 2 3 4 5 6 7 8 9 \u0026lt;joe-cloud type=\u0026#34;default\u0026#34; url=\u0026#34;\u0026#34; password=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/joe-cloud\u0026gt; \u0026lt;joe-cloud type=\u0026#34;360\u0026#34; url=\u0026#34;\u0026#34; password=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/joe-cloud\u0026gt; \u0026lt;joe-cloud type=\u0026#34;bd\u0026#34; url=\u0026#34;\u0026#34; password=\u0026#34;bn6f\u0026#34;\u0026gt;\u0026lt;/joe-cloud\u0026gt; \u0026lt;joe-cloud type=\u0026#34;ty\u0026#34; url=\u0026#34;\u0026#34; password=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/joe-cloud\u0026gt; \u0026lt;joe-cloud type=\u0026#34;ct\u0026#34; url=\u0026#34;\u0026#34; password=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/joe-cloud\u0026gt; \u0026lt;joe-cloud type=\u0026#34;wy\u0026#34; url=\u0026#34;\u0026#34; password=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/joe-cloud\u0026gt; \u0026lt;joe-cloud type=\u0026#34;github\u0026#34; url=\u0026#34;\u0026#34; password=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/joe-cloud\u0026gt; \u0026lt;joe-cloud type=\u0026#34;gitee\u0026#34; url=\u0026#34;\u0026#34; password=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/joe-cloud\u0026gt; \u0026lt;joe-cloud type=\u0026#34;lz\u0026#34; url=\u0026#34;\u0026#34; password=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/joe-cloud\u0026gt; 装饰元素 跑马灯 1 \u0026lt;span class=\u0026#34;joe_lamp\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 进度条 1 \u0026lt;joe-progress percentage=\u0026#34;50%\u0026#34; color=\u0026#34;#6ce766\u0026#34;\u0026gt;\u0026lt;/joe-progress\u0026gt; 彩色虚线 1 2 \u0026lt;joe-dotted\u0026gt;\u0026lt;/joe-dotted\u0026gt; \u0026lt;joe-dotted startcolor=\u0026#34;#1772e8\u0026#34; endcolor=\u0026#34;#4cd327\u0026#34;\u0026gt;\u0026lt;/joe-dotted\u0026gt; Tabs 1 2 3 4 5 6 \u0026lt;joe-tabs\u0026gt; \u0026lt;div class=\u0026#34;_tpl\u0026#34;\u0026gt; {tabs-pane 第一个}单身狗的故事{/tabs-pane} {tabs-pane 第二个}小说家的故事{/tabs-pane} \u0026lt;/div\u0026gt; \u0026lt;/joe-tabs\u0026gt; {tabs-pane 第一个}单身狗的故事{/tabs-pane}\r{tabs-pane 第二个}小说家的故事{/tabs-pane}\r时间线 1 2 3 4 5 6 7 \u0026lt;joe-timeline\u0026gt; \u0026lt;div class=\u0026#34;_tpl\u0026#34;\u0026gt; {timeline-item 2020}10元{/timeline-item} {timeline-item 2021}20元{/timeline-item} {timeline-item 2022}100元{/timeline-item} \u0026lt;/div\u0026gt; \u0026lt;/joe-timeline\u0026gt; {timeline-item 2020}10元{/timeline-item}\r{timeline-item 2021}20元{/timeline-item}\r{timeline-item 2022}100元{/timeline-item}\r评论后可见 1 \u0026lt;joe-hide\u0026gt;\u0026lt;/joe-hide\u0026gt; 提示元素 1 2 3 4 \u0026lt;joe-message type=\u0026#34;success\u0026#34; content=\u0026#34;成功消息\u0026#34;\u0026gt;\u0026lt;/joe-message\u0026gt; \u0026lt;joe-message type=\u0026#34;info\u0026#34; content=\u0026#34;普通消息\u0026#34;\u0026gt;\u0026lt;/joe-message\u0026gt; \u0026lt;joe-message type=\u0026#34;warning\u0026#34; content=\u0026#34;警告消息\u0026#34;\u0026gt;\u0026lt;/joe-message\u0026gt; \u0026lt;joe-message type=\u0026#34;error\u0026#34; content=\u0026#34;错误消息\u0026#34;\u0026gt;\u0026lt;/joe-message\u0026gt; 常见问题 1.如何自定义导航条菜单图标？\n主题自身已经引入了部分 iconfont 图标，你可以直接用（全在这里），如果想在这个基础上增加图标，可联系我加入该项目的图标组，加入后即可获取最新的字体链接进行替换（template/module/link.ftl 中第 25 行）。iconfont 使用方式如下： （目前主题菜单只支持字体图标，若要用图片请自行修改代码）\n2.如何设置文章仅评论后可见？\n主题目前支持文章页的 评论后可见功能，只要在后台管理中发布文章时设置-元数据 enable_read_limit 为 true 即可。设置之后\u0026gt;文章页默认只展示一屏高度的内容，剩余内容需要评论后才可见（如果文章内容小于一屏高度，则此功能会被忽略）。\n3.怎样开启防盗链\n很简单，直接在 nginx 里配一下就可以，不过记得添加白名单（如 logo 和 avatar），配置如下：\n1 2 3 4 5 6 7 8 9 10 11 # 资源防盗链（指定目录or指定文件类型） # location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ { location /upload/ { access_log off; # 域名白名单，去掉则阻止所有非本站请求 valid_referers none blocked server_names *.bbchin.com 127.0.0.1 localhost ~\\.google\\. ~\\.baidu\\. ~\\.qq\\.; if ($invalid_referer) { rewrite ^/ https://cdn.jsdelivr.net/gh/qinhua/cdn_assets/img/robber.jpg; } proxy_pass http://127.0.0.1:8090; } 4.怎样配置合适的缓存策略\n合理利用浏览器的缓存同样可以优化页面性能，提高加载速度，我们可以通过 Nginx 对相关资源的响应头进行配置，大致如下：\n1 2 3 4 5 6 7 8 9 location / { gzip_static on; # 静态压缩 add_header Cache-Control public,max-age=60,s-maxage=60; # 配置缓存 proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8090; } 主题修改 修改首页文章数、分类数、标签数顺序： 自行修改 template/module/blogger.ftl 文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;#if settings.overview_type == \u0026#39;A\u0026#39;\u0026gt; \u0026lt;@postTag method=\u0026#34;count\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34; title=\u0026#34;累计文章数 ${count!\u0026#39;0\u0026#39;}\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;num\u0026#34;\u0026gt;${count!\u0026#39;0\u0026#39;}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;文章数\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/@postTag\u0026gt; \u0026lt;@categoryTag method=\u0026#34;count\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34; title=\u0026#34;累计分类数 ${count!\u0026#39;0\u0026#39;}\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;num\u0026#34;\u0026gt;${count!\u0026#39;0\u0026#39;}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;分类数\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/@categoryTag\u0026gt; \u0026lt;@tagTag method=\u0026#34;count\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34; title=\u0026#34;累计标签数 ${count!\u0026#39;0\u0026#39;}\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;num\u0026#34;\u0026gt;${count!\u0026#39;0\u0026#39;}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;标签数\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/@tagTag\u0026gt; ","date":"2022-05-25T21:27:46Z","permalink":"//localhost:1313/archives/halo-theme-joe2.0-%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3%E6%A0%B7%E5%BC%8F%E6%8C%87%E5%8D%97/","title":"Halo-theme-joe2.0 使用文档\u0026\u0026样式指南"},{"content":"用AE做了一个电子相册。\n","date":"2022-04-30T14:27:25Z","permalink":"//localhost:1313/archives/2022%E5%B9%B4%E6%98%A5%E5%AD%A3%E8%BF%90%E5%8A%A8%E4%BC%9A/","title":"2022年春季运动会"},{"content":"1.搜索2022 直播源。\n2.如果不支持txt格式的直播源，使用TeleList转换为m3u格式。\n3.直播源检测：有的时候，部分直播源可能会失效，这个时候最好使用工具检测一下直播源的有效性，及时剔除失效的直播源，以免影响后续电视直播的观看！\n我们要用到的检测工具名为IPTV检查器，导入直播源之后，点击左侧的“检查”开始检测，有效的直播源会标记为在线，失效的直播源标记为离线。最后以状态列出离线列表，然后通过快捷键ctrl+a全选并删除，最后保存有效直播源。\n参考链接：\n1.上千个境内外4K高清直播源，配合播放器，看电视贼爽\n2.2022-2月最新稳定全球频道蓝光直播源，稳定播放\n3.2022年IPTV最新有效直播源，上万频道（每天更新）\n","date":"2022-04-11T21:32:56Z","permalink":"//localhost:1313/archives/%E8%A7%82%E7%9C%8Biptv%E7%9A%84%E6%96%B9%E6%B3%95/","title":"观看IPTV的方法"},{"content":"决定把pr系统地过一遍，看能不能坚持下来。\n1.源窗口，i标记入点，o标记出点，可以将需要的一小段素材拖到视频轨道。\n2.Shift+m：跳转到下一标记点；Ctrl+Shirt+m：跳转到上一标记点。\n3.按住Alt键，选中音频，再按Delete键，可以快速删除音频。\n4.波纹删除可以快速删除两端素材之间的空白，不过会移动标记点，为了使标记点不移动，这时就要右键删除，再鼠标拖动、拼接素材。\n5.音乐鼓点节拍插件BeatEdit\n","date":"2022-03-17T23:06:45Z","permalink":"//localhost:1313/archives/pr%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"pr学习笔记"},{"content":"win10 使用命令查看Windows 10激活状态：\n当然，对于系统管理员来说，最传统的方式就是使用命令行的方式来查看系统激活状态。管理员只需按下 Windows + R 快捷键 — 输入并执行 CMD 打开命令提示符。\n输入并执行如下命令：\n1 slmgr /xpr Office 命令行查看office激活期限：\n1、首先找到office安装目录，我的是C:\\Program Files\\Microsoft Office\\Office16 2、打开终端：win+R 3、输入：cmd 4、输入：cd C:\\Program Files\\Microsoft Office\\Office16 5、按回车 6、输入：cscript ospp.vbs /dstatus\n7、直接输入cscript “C:\\Program Files\\Microsoft Office\\Office16\\ospp.vbs” /dstatus\n8、显示\n可以看到还剩179天到期，到期可以再jh。\n9.如果上面图片末尾未显示jh相关信息，复制图中的SKU ID\n10.然后输入slmgr /xpr xxxxxxxxxxxxxxxxxxxxx(sku id) ，回车。显示：\n参考链接 如何查看Windows 10激活状态的几种方式\n命令行查看office激活期限\noffice Windows永久激活状态查询方法\n","date":"2022-03-13T20:21:47Z","permalink":"//localhost:1313/archives/%E6%9F%A5%E7%9C%8Bwindows%E5%92%8Coffice%E6%BF%80%E6%B4%BB%E7%8A%B6%E6%80%81%E7%9A%84%E6%96%B9%E6%B3%95/","title":"查看Windows和Office激活状态的方法"},{"content":"注册企业微信 1．搜索下载企业，并使用手机号进行企业微信注册\n2．选择成立企业\n3．输入企业名称等信息\n4．完成后，在通讯录内添加成员\n企业微信创建一个应用 在 “企业微信 —— 应用管理” 最底部的 “自建” 应用处，新建一个 “应用”。名称比如就叫消息通知，配置完成后记录下应用页面的 AgentId 和 Secret。注意，查看 Secret 需要安装一个企业微信，查看完可以卸载。\n在 “企业微信 —— 我的企业” 底部，记录下 “企业 ID”。\n至此，微信配置完成，开始配置提醒 API。\n创建 API 云函数 首先参考 Heo 的教程，创建一个腾讯云或 vercel 版本的云函数。\nVercel版本 我之前使用vercel部署过twikoo，因此不需要再创建新的云函数。如果你不是使用vercel，参考这里。\n安装python 下载并安装python，安装时注意勾选Add Python 3.10 to PATH\n安装pipenv 找到你的twikoo github仓库，clone到本地，进入api/，执行以下命令：\n1 pip install pipenv 如果安装时报错：ERROR: Exception: Traceback (most recent call last)，就使用一下命令安装：\n1 pip install pipenv -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 下载requests 继续在api/文件夹下执行以下命令：\n1 pipenv install requests 如果按照报错，请先关闭dl。\n新建python.py 然后在该目录创建一个python.py文件，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 from http.server import BaseHTTPRequestHandler import json import requests from urllib.parse import parse_qs # -*- coding: utf8 -*- class handler(BaseHTTPRequestHandler): def do_GET(self): def getTocken(id, secert, msg, agentId): url = \u0026#34;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=\u0026#34; + \\ id + \u0026#34;\u0026amp;corpsecret=\u0026#34; + secert r = requests.get(url) tocken_json = json.loads(r.text) # print(tocken_json[\u0026#39;access_token\u0026#39;]) sendText(tocken=tocken_json[\u0026#39;access_token\u0026#39;], agentId=agentId, msg=msg) def sendText(tocken, agentId, msg): sendUrl = \u0026#34;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=\u0026#34; + tocken # print(sendUrl) data = json.dumps({ \u0026#34;safe\u0026#34;: 0, \u0026#34;touser\u0026#34;: \u0026#34;@all\u0026#34;, \u0026#34;msgtype\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;agentid\u0026#34;: agentId, \u0026#34;text\u0026#34;: { \u0026#34;content\u0026#34;: str(msg) } }) requests.post(sendUrl, data) try: params = parse_qs(self.path[12:]) apiid = params[\u0026#39;id\u0026#39;][0] apisecert = params[\u0026#39;secert\u0026#39;][0] apiagentId = params[\u0026#39;agentId\u0026#39;][0] apimsg = params[\u0026#39;msg\u0026#39;][0] except: apimsg = self.path else: #try: # 执行主程序 getTocken(id=apiid, secert=apisecert, msg=apimsg, agentId=apiagentId) #except: # status = 1 # apimsg = \u0026#39;主程序运行时出现错误，请检查参数是否填写正确。详情可以参阅：https://blog.zhheo.com/p/1e9f35bc.html\u0026#39; #else: # status = 0 # print(event) # print(\u0026#34;Received event: \u0026#34; + json.dumps(event, indent = 2)) # print(\u0026#34;Received context: \u0026#34; + str(context)) # print(\u0026#34;Hello world\u0026#34;) self.send_response(200) self.send_header(\u0026#39;Content-type\u0026#39;, \u0026#39;text/plain\u0026#39;) self.end_headers() self.wfile.write(apimsg) return push当前的更改之后，当Vercel完成部署后，你可以使用下面这样的方式，拼接一个 URL，浏览器访问，看看手机微信能不能接收到消息。\n1 https://\u0026lt; vercel_app_address\u0026gt;/api/python?id=\u0026lt;ww....\u0026gt;\u0026amp;secert=\u0026lt;secret...\u0026gt;\u0026amp;agentId=\u0026lt;agentId...\u0026gt;\u0026amp;msg=测试一下吧 如果成功的话你的手机会接收到对应的推送（如果你的企业微信注册成功且所填信息正确）。\n在twikoo中配置 在twikoo后台管理WECOM_API_URL中添加你拼接的url即可。注意msg后面不要有参数：\n1 https://\u0026lt;vercel_app_address\u0026gt;/api/python?id=\u0026lt;企业id\u0026gt;\u0026amp;secert=\u0026lt;secret\u0026gt;\u0026amp;agentId=\u0026lt;agentId\u0026gt;\u0026amp;msg= 2022.3.6 Twikoo v1.5.0更新： 消息推送逻辑，从 1.5.0 之前的版本升级后，请在管理面板重新配置评论提醒的消息推送服务，增加了对 Bark、Telegram 等平台的支持\n企业微信 缩写: wecom 企业微信应用消息推送，免费，限制较少。\n用电脑打开 https://work.weixin.qq.com/，注册一个企业 注册成功后，点「管理企业」进入管理界面，选择「应用管理」 → 「自建」 → 「创建应用」 应用名称填入机器人的名称，应用 logo 选择机器人的头像，可见范围选择公司名 创建完成后进入应用详情页，可以得到应用ID( agentid )，应用Secret( secret )，复制 PS：获取应用Secret时，可能会将其推送到企业微信客户端，这时候微信里边是看不到的，需要在企业微信客户端里边才能看到 进入「我的企业」页面，拉到最下边，可以看到企业ID，复制 进入「我的企业」 → 「微信插件」，拉到下边扫描二维码，关注以后即可收到推送的消息 将第 4 步和第 5 步取得的 企业ID#应用Secret#应用ID 拼到一起，中间用 “#” 号分隔，填入 pushoo 的 token 中 示例 token：ww97a01a*****1e5f1#xHapDXmgZtlBgRQQXMb4kfh3y75Ynoubl*****l9ytE#1000005\nPS：如果出现接口请求正常，企业微信接受消息正常，个人微信无法收到消息的情况，请确认如下配置：\n进入「我的企业」 → 「微信插件」，拉到最下方，勾选「允许成员在微信插件中接收和回复聊天消息 」 在企业微信客户端 「我」 → 「设置」 → 「新消息通知」中关闭「仅在企业微信中接受消息」限制条件 在微信中接收企业微信消息 在“企业微信——我的企业——微信插件”页面配置，点击这里查看。\n使用微信扫码，关注你的企业微信，并且在设置中打开允许成员在微信插件中接收和回复聊天消息选项。\n腾讯云版本 可以复用之前 Twikoo 那个云开发环境，直接创建一个新的云函数，名称自定义如 weixin-push，选择 helloworld 空白模板函数，Python3.6 环境， 128MB 就 OK 了。下一步粘贴下面的代码，点击创建：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 # -*- coding: utf8 -*- import requests import json def getTocken(id,secert,msg,agentId): url = \u0026#34;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=\u0026#34; + id + \u0026#34;\u0026amp;corpsecret=\u0026#34; + secert r =requests.get(url) tocken_json = json.loads(r.text) # print(tocken_json[\u0026#39;access_token\u0026#39;]) sendText(tocken=tocken_json[\u0026#39;access_token\u0026#39;],agentId=agentId,msg=msg) def sendText(tocken,agentId,msg): sendUrl = \u0026#34;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=\u0026#34; + tocken # print(sendUrl) data = json.dumps({ \u0026#34;safe\u0026#34;: 0, \u0026#34;touser\u0026#34; : \u0026#34;@all\u0026#34;, \u0026#34;msgtype\u0026#34; : \u0026#34;text\u0026#34;, \u0026#34;agentid\u0026#34; : agentId, \u0026#34;text\u0026#34; : { \u0026#34;content\u0026#34; : msg } }) requests.post(sendUrl,data) def main(event, context): try: apiid=event[\u0026#39;queryStringParameters\u0026#39;][\u0026#39;id\u0026#39;] apisecert=event[\u0026#39;queryStringParameters\u0026#39;][\u0026#39;secert\u0026#39;] apiagentId = event[\u0026#39;queryStringParameters\u0026#39;][\u0026#39;agentId\u0026#39;] apimsg = event[\u0026#39;queryStringParameters\u0026#39;][\u0026#39;msg\u0026#39;] except: apimsg = \u0026#39;有必填参数没有填写，请检查是否填写正确和格式是否错误。详情可以参阅：https://blog.zhheo.com/p/1e9f35bc.html\u0026#39; status = 1 else: try: # 执行主程序 getTocken(id=apiid,secert=apisecert,msg=apimsg,agentId=apiagentId) except: status = 1 apimsg = \u0026#39;主程序运行时出现错误，请检查参数是否填写正确。详情可以参阅：https://blog.zhheo.com/p/1e9f35bc.html\u0026#39; else: status = 0 # print(event) # print(\u0026#34;Received event: \u0026#34; + json.dumps(event, indent = 2)) # print(\u0026#34;Received context: \u0026#34; + str(context)) # print(\u0026#34;Hello world\u0026#34;) status_str = json.dumps({ \u0026#34;status\u0026#34;:status, \u0026#34;msg\u0026#34;:apimsg }) return(status_str) 配置好访问服务（如果第一次创建，参考 Twikoo 教程还需要配置安全域名等）：\n1 2 3 域名：* 触发路径：/weixin-push (自定义) 关联资源：云函数 weixin-push (上文创建的云函数) 至此，云函数创建完成。可以使用下面这样的方式，拼接一个 URL，浏览器访问，看看手机微信能不能接收到消息。\n云函数的访问服务 URL + 触发路径 + ?id = 你的企业微信 ID + secert = 上文记录的 secert + Id = 上文记录的 AgentId + \u0026amp;msg = 随便测试一下吧\n如我下面这样的：\n1 https://blogpkly-13278c-1258453354.ap-shanghai.app.tcloudbase.com/weixin-push?id=ww*******\u0026amp;secert=Ne******\u0026amp;agentId=1000003\u0026amp;msg=随便测试一下吧 浏览器返回以下内容，说明配置完成 (msg 后的内容，是 Unicode 编码后的 “随便测试一下吧” 内容，点击这里可以转换 )。\n1 {\u0026#34;status\u0026#34;: 0, \u0026#34;msg\u0026#34;: \u0026#34;\\u968f\\u4fbf\\u6d4b\\u8bd5\\u4e00\\u4e0b\\u5427\u0026#34;} Twikoo 配置 在 Twikoo v1.4.5 及以上版本中，打开控制面板，在上述企业微信 API 搭建完成后，拼接成下述样式的 URL，填写在即时通知 ——WECOM_API_URL 中即可完成配置。\n1 https://blogpkly-13278c-1258453354.ap-shanghai.app.tcloudbase.com/weixin-push?id=企业微信获取\u0026amp;secert=企业微信获取\u0026amp;agentId=企业微信获取\u0026amp;msg= 微信关注自己的企业微信账号，然后用其他非博主邮箱在网站留言，试试即时通知吧！\n更换 CDN 镜像 如果遇到默认 CDN 加载速度缓慢，可更换其他 CDN 镜像。以下为可供选择的公共 CDN，其中一些 CDN 可能需要数天时间同步最新版本：\nhttps://cdn.staticfile.org/twikoo/1.6.4/twikoo.all.min.js https://lib.baomitu.com/twikoo/1.6.4/twikoo.all.min.js https://cdn.bootcdn.net/ajax/libs/twikoo/1.6.4/twikoo.all.min.js https://cdn.jsdelivr.net/npm/twikoo@1.6.4/dist/twikoo.all.min.js 例如Butterfly主题 ：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 custom_format: option: # main_css: # main: # utils: # translate: # local_search: # algolia_js: # algolia_search_v4: # instantsearch_v4: # pjax: # gitalk: # gitalk_css: # blueimp_md5: # valine: # disqusjs: # disqusjs_css: + twikoo: https://cdn.staticfile.org/twikoo/1.6.4/twikoo.all.min.js 以前记得只需更改后端版本号即可，不知什么时候开始还要更改前端CDN才行。也许主题前端没有更新到最新的版本号。这时只有自定义CDN了，还好\nbutterfly主题很容易就能自定义CDN\n更换表情CDN 仓库地址：zhheo/Sticker-Heo\n使用：\n1 2 https://cdn.jsdelivr.net/npm/sticker-heo@2022.7.5/twikoo.json https://cdn1.tianli0.top/npm/sticker-heo@2022.7.5/twikoo.json Twikoo 导出评论数据 Twikoo前端后台只有导入数据功能，没有导出，要想导出数据，看下面。\n导出 Twikoo 在 Vercel 的数据 1.下载并安装 MongoDB 数据库工具，下载地址：https://www.mongodb.com/try/download/database-tools；\n`\n然后添加环境变量：D:\\Program Files\\mongodb-database-tools-windows-x86_64-100.5.4\\bin到Path\n2.登录 Vercel 管理后台，点开 Twikoo 的环境，点击上方的 Settings，点击左侧的 Environment Variables，在页面下方找到 MONGODB_URI，点击对应的小眼睛图标，会出现数据库连接地址，点击以复制这串地址；\n3.如果地址中包含参数，请先删去参数，参数即 “?” 和 “?” 后面的部分，例如 ?journal=true\u0026amp;w=majority；\n4.打开一个命令行窗口，粘贴以下命令：\n1 mongoexport --uri 这里换成刚才复制的地址 --collection comment --type json --out twikoo-comments.json 5.如果成功，你可以在当前目录下找到导出的 twikoo-comments.json 文件。\n导出 Twikoo 在腾讯云的数据 1.登录 腾讯云；\n2.打开云开发 CloudBase；\n3.选择要导出的环境；\n4.点击左侧的数据库，点击 comment 集合，点击导出按钮；\n5.导出格式选择 JSON（推荐，如果想用 Excel 等软件查看，可以选择 CSV），字段不填；\n6.点击导出按钮，导出的数据会通过浏览器自动下载。\n参考链接 搭建微信通知 API 实现 Twikoo 新消息提醒 利用企业微信实现twikoo新消息提醒(python.py错误) 微信通知Twikoo新消息提醒（Vercel版本）（python.py正确) twikoo即时消息推送 pip安装virtualenv报错：ERROR: Exception: Traceback (most recent call last)\u0026mdash;有效解决方法 pipenv install 包名 报错问题解决 Twikoo 评论数据导出教程 ","date":"2022-02-06T09:27:38Z","permalink":"//localhost:1313/archives/%E5%88%A9%E7%94%A8%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%AE%9E%E7%8E%B0twikoo%E6%96%B0%E6%B6%88%E6%81%AF%E6%8F%90%E9%86%92%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E7%AD%89/","title":"利用企业微信实现twikoo新消息提醒\u0026\u0026数据导出等"},{"content":"开始使用hexo butterfly主题，简单记录一下。主题安装文档网站：{% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,blue larger %}\n在你的 Hexo 根目录里：\n1 npm i hexo-theme-butterfly 升级方法：在 Hexo 根目录下，运行：\n1 npm update hexo-theme-butterfly 如果无法升级，先修改package.json，然后执行以上命令。\n图标无法显示：\n1 npm i hexo-butterfly-extjs Front-matter Post Front-matter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 --- title: # 【必需】文章标题 date: # 【必需】文章创建日期 updated: # 【可选】文章更新日期 tags: # 【可选】文章标籤 categories: # 【可选】文章分类 keywords: # 【可选】文章关键字 description: # 【可选】文章描述 top_img: # 【可选】文章顶部图片 comments: # 【可选】显示文章评论模块(默认 true) cover: # 【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空) toc: # 【可选】显示文章TOC(默认为设置中toc的enable配置) toc_number: # 【可选】显示toc_number(默认为设置中toc的number配置) toc_style_simple: # 【可选】显示 toc 简洁模式 copyright: # 【可选】显示文章版权模块(默认为设置中post_copyright的enable配置) copyright_author: # 【可选】文章版权模块的文章作者 copyright_author_href: # 【可选】文章版权模块的文章作者链接 copyright_url: # 【可选】文章版权模块的文章连结链接 copyright_info: # 【可选】文章版权模块的版权声明文字 mathjax: # 【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false) katex: # 【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false) aplayer: # 【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置 highlight_shrink: # 【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置) aside: # 【可选】显示侧边栏 (默认 true) --- Page Front-matter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 --- title: # 【必需】页面标题 date: # 【必需】页面创建日期 updated: # 【可选】页面更新日期 type: # 【必需】标籤、分类和友情链接三个页面需要配置 comments: # 【可选】显示页面评论模块(默认 true) description: # 【可选】页面描述 keywords: # 【可选】页面关键字 top_img: # 【可选】页面顶部图片 mathjax: # 【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false) katex: # 【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false) aside: # 【可选】显示侧边栏 (默认 true) aplayer: # 【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置 highlight_shrink: 【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置) --- 标签外挂 Note 修改 主题配置文件：\n1 2 3 4 5 6 7 8 9 10 11 12 note: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. style: flat icons: false border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0 {% tabs note %}\n1 2 3 {% note [class] [no-icon] [style] %} Any content (support inline tags too.io). {% endnote %} 名稱 用法 class 【可選】標識，不同的標識有不同的配色\n（ default / primary / success / info / warning / danger ） no-icon 【可選】不顯示 icon style 【可選】可以覆蓋配置中的 style （simple/modern/flat/disabled） no-icon\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 {% note no-icon %} 默认 提示块标籤 {% endnote %} {% note default no-icon %} default 提示块标籤 {% endnote %} {% note primary no-icon %} primary 提示块标籤 {% endnote %} {% note success no-icon %} success 提示块标籤 {% endnote %} {% note info no-icon %} info 提示块标籤 {% endnote %} {% note warning no-icon %} warning 提示块标籤 {% endnote %} {% note danger no-icon %} danger 提示块标籤 {% endnote %} {% note no-icon %} 默认 提示块标籤 {% endnote %}\n{% note default no-icon %} default 提示块标籤 {% endnote %}\n{% note primary no-icon %} primary 提示块标籤 {% endnote %}\n{% note success no-icon %} success 提示块标籤 {% endnote %}\n{% note info no-icon %} info 提示块标籤 {% endnote %}\n{% note warning no-icon %} warning 提示块标籤 {% endnote %}\n{% note danger no-icon %} danger 提示块标籤 {% endnote %}\nflat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 {% note flat %} 默认 提示块标籤 {% endnote %} {% note default flat %} default 提示块标籤 {% endnote %} {% note primary flat %} primary 提示块标籤 {% endnote %} {% note success flat %} success 提示块标籤 {% endnote %} {% note info flat %} info 提示块标籤 {% endnote %} {% note warning flat %} warning 提示块标籤 {% endnote %} {% note danger flat %} danger 提示块标籤 {% endnote %} {% note flat %} 默认 提示块标籤 {% endnote %}\n{% note default flat %} default 提示块标籤 {% endnote %}\n{% note primary flat %} primary 提示块标籤 {% endnote %}\n{% note success flat %} success 提示块标籤 {% endnote %}\n{% note info flat %} info 提示块标籤 {% endnote %}\n{% note warning flat %} warning 提示块标籤 {% endnote %}\n{% note danger flat %} danger 提示块标籤 {% endnote %}\n1 2 3 {% note [color] [icon] [style] %} Any content (support inline tags too.io). {% endnote %} 名稱 用法 color 【可選】顔色 (default / blue / pink / red / purple / orange / green) icon 【可選】可配置自定義 icon (只支持 fontawesome 圖標, 也可以配置 no-icon ) style 【可選】可以覆蓋配置中的 style（simple/modern/flat/disabled） no-icon\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 {% note no-icon %} 你是刷 Visa 还是 UnionPay {% endnote %} {% note blue no-icon %} 2021年快到了.... {% endnote %} {% note pink no-icon %} 小心开车 安全至上 {% endnote %} {% note red no-icon %} 这是三片呢？还是四片？ {% endnote %} {% note orange no-icon %} 你是刷 Visa 还是 UnionPay {% endnote %} {% note purple no-icon %} 剪刀石头布 {% endnote %} {% note green no-icon %} 前端最讨厌的浏览器 {% endnote %} {% note no-icon %} 你是刷 Visa 还是 UnionPay {% endnote %} {% note blue no-icon %} 2021年快到了\u0026hellip;. {% endnote %} {% note pink no-icon %} 小心开车 安全至上 {% endnote %} {% note red no-icon %} 这是三片呢？还是四片？ {% endnote %} {% note orange no-icon %} 你是刷 Visa 还是 UnionPay {% endnote %} {% note purple no-icon %} 剪刀石头布 {% endnote %} {% note green no-icon %} 前端最讨厌的浏览器 {% endnote %}\nflat\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 {% note \u0026#39;fab fa-cc-visa\u0026#39; flat %} 你是刷 Visa 还是 UnionPay {% endnote %} {% note blue \u0026#39;fas fa-bullhorn\u0026#39; flat %} 2021年快到了.... {% endnote %} {% note pink \u0026#39;fas fa-car-crash\u0026#39; flat %} 小心开车 安全至上 {% endnote %} {% note red \u0026#39;fas fa-fan\u0026#39; flat%} 这是三片呢？还是四片？ {% endnote %} {% note orange \u0026#39;fas fa-battery-half\u0026#39; flat %} 你是刷 Visa 还是 UnionPay {% endnote %} {% note purple \u0026#39;far fa-hand-scissors\u0026#39; flat %} 剪刀石头布 {% endnote %} {% note green \u0026#39;fab fa-internet-explorer\u0026#39; flat %} 前端最讨厌的浏览器 {% endnote %} {% note \u0026lsquo;fab fa-cc-visa\u0026rsquo; flat %} 你是刷 Visa 还是 UnionPay {% endnote %} {% note blue \u0026lsquo;fas fa-bullhorn\u0026rsquo; flat %} 2021年快到了\u0026hellip;. {% endnote %} {% note pink \u0026lsquo;fas fa-car-crash\u0026rsquo; flat %} 小心开车 安全至上 {% endnote %} {% note red \u0026lsquo;fas fa-fan\u0026rsquo; flat%} 这是三片呢？还是四片？ {% endnote %} {% note orange \u0026lsquo;fas fa-battery-half\u0026rsquo; flat %} 你是刷 Visa 还是 UnionPay {% endnote %} {% note purple \u0026lsquo;far fa-hand-scissors\u0026rsquo; flat %} 剪刀石头布 {% endnote %} {% note green \u0026lsquo;fab fa-internet-explorer\u0026rsquo; flat %} 前端最讨厌的浏览器 {% endnote %}\n{% endtabs %}\nTabs 使用方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 {% tabs Unique name, [index] %} \u0026lt;!-- tab [Tab caption] [@icon] --\u0026gt; Any content (support inline tags too). \u0026lt;!-- endtab --\u0026gt; {% endtabs %} Unique name : Unique name of tabs block tag without comma. Will be used in #id\u0026#39;s as prefix for each tab with their index numbers. If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes. Only for current url of post/page must be unique! [index] : Index number of active tab. If not specified, first tab (1) will be selected. If index is -1, no tab will be selected. It\u0026#39;s will be something like spoiler. Optional parameter. [Tab caption] : Caption of current tab. If not caption specified, unique name with tab index suffix will be used as caption of tab. If not caption specified, but specified icon, caption will empty. Optional parameter. [@icon] : FontAwesome icon name (full-name, look like \u0026#39;fas fa-font\u0026#39;) Can be specified with or without space; e.g. \u0026#39;Tab caption @icon\u0026#39; similar to \u0026#39;Tab caption@icon\u0026#39;. Optional parameter. {% note primary no-icon %} Demo 1 - 预设选择第一个【默认】 {% endnote %}\n1 2 3 4 5 6 7 8 9 10 11 12 13 {% tabs 方法 %} \u0026lt;!-- tab 方法一 --\u0026gt; **This is Tab 1.** \u0026lt;!-- endtab --\u0026gt; \u0026lt;!-- tab 方法二 --\u0026gt; **This is Tab 2.** \u0026lt;!-- endtab --\u0026gt; \u0026lt;!-- tab 方法三 --\u0026gt; **This is Tab 3.** \u0026lt;!-- endtab --\u0026gt; {% endtabs %} {% tabs 方法 %}\nThis is Tab 1.\nThis is Tab 2.\nThis is Tab 3.\n{% endtabs %}\n{% note primary no-icon %} Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名 {% endnote %}\n1 2 3 4 5 6 7 8 9 10 11 12 13 {% tabs test4 %} \u0026lt;!-- tab 第一个Tab --\u0026gt; **tab名字为第一个Tab** \u0026lt;!-- endtab --\u0026gt; \u0026lt;!-- tab @fab fa-apple-pay --\u0026gt; **只有图标 没有Tab名字** \u0026lt;!-- endtab --\u0026gt; \u0026lt;!-- tab 炸弹@fas fa-bomb --\u0026gt; **名字+icon** \u0026lt;!-- endtab --\u0026gt; {% endtabs %} {% tabs test4 %}\ntab名字为第一个Tab\n只有图标 没有Tab名字\n名字+icon\n{% endtabs %}\nButton 使用方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 {% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %} [url] : 链接 [text] : 按钮文字 [icon] : [可选] 图标 [color] : [可选] 按钮背景顔色(默认style时） 按钮字体和边框顔色(outline时) default/blue/pink/red/purple/orange/green [style] : [可选] 按钮样式 默认实心 outline/留空 [layout] : [可选] 按钮佈局 默认为line block/留空 [position] : [可选] 按钮位置 前提是设置了layout为block 默认为左边 center/right/留空 [size] : [可选] 按钮大小 larger/留空 1 2 3 4 5 6 7 {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,larger %} {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,blue larger %} {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,pink larger %} {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,red larger %} {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,purple larger %} {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,orange larger %} {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,green larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,blue larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,pink larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,red larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,purple larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,orange larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,green larger %}\n1 2 3 {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,block blue larger %} {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,block center pink larger %} {% btn \u0026#39;https://butterfly.js.org/\u0026#39;,Butterfly,far fa-hand-point-right,block right red larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,block blue larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,block center pink larger %} {% btn \u0026lsquo;https://butterfly.js.org/',Butterfly,far fa-hand-point-right,block right red larger %}\nlabel 高亮所需的文字\n1 {% label text color %} text 文字 參數 解釋 color 【可選】背景顏色，默認為 default\ndefault/blue/pink/red/purple/orange/green 1 2 臣亮言：{% label 先帝 %}创业未半，而{% label 中道崩殂 blue %}。今天下三分，{% label 益州疲敝 pink %}，此诚{% label 危急存亡之秋 red %}也！然侍衞之臣，不懈于内；{% label 忠志之士 purple %}，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。 宫中、府中，俱为一体；陟罚臧否，不宜异同。若有{% label 作奸 orange %}、{% label 犯科 green %}，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。 臣亮言：{% label 先帝 %}创业未半，而{% label 中道崩殂 blue %}。今天下三分，{% label 益州疲敝 pink %}，此诚{% label 危急存亡之秋 red %}也！然侍衞之臣，不懈于内；{% label 忠志之士 purple %}，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。 宫中、府中，俱为一体；陟罚臧否，不宜异同。若有{% label 作奸 orange %}、{% label 犯科 green %}，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。\ntimeline 1 2 3 4 5 6 7 8 {% timeline title,color %} \u0026lt;!-- timeline title --\u0026gt; xxxxx \u0026lt;!-- endtimeline --\u0026gt; \u0026lt;!-- timeline title --\u0026gt; xxxxx \u0026lt;!-- endtimeline --\u0026gt; {% endtimeline %} 參數 解釋 title 標題/時間線 color timeline 顏色\ndefault(留空) / blue / pink / red / purple / orange / green 1 2 3 4 5 {% timeline 2022 %} \u0026lt;!-- timeline 01-02 --\u0026gt; 这是测试页面 \u0026lt;!-- endtimeline --\u0026gt; {% endtimeline %} {% timeline 2022 %}\n这是测试页面\n{% endtimeline %}\n1 2 3 4 5 {% timeline 2022,blue %} \u0026lt;!-- timeline 01-02 --\u0026gt; 这是测试页面 \u0026lt;!-- endtimeline --\u0026gt; {% endtimeline %} {% timeline 2022,blue %}\n这是测试页面\n{% endtimeline %}\ntag-hide {% note warning %}\n2.2.0以上提供\n請注意，tag-hide內的標簽外掛content內都不建議有h1 - h6 等標題。因為Toc會把隱藏內容標題也顯示出來，而且當滾動屏幕時，如果隱藏內容沒有顯示出來，會導致Toc的滾動出現異常。\n{% endnote %}\n如果你想把一些文字、內容隱藏起來，並提供按鈕讓用戶點擊顯示。可以使用這個標籤外掛。\n{% tabs tag-hide %}\n2.3.0以上支持\n如果你需要展示的內容太多，可以把它隱藏在收縮框裏，需要時再把它展開。\n( display 不能包含英文逗號，可用\u0026amp;sbquo;)\n1 2 3 {% hideToggle display,bg,color %} content {% endhideToggle %} Demo\n1 2 3 4 5 6 7 8 9 10 {% hideToggle Butterfly安裝方法 %} 在你的博客根目錄裏 git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly 如果想要安裝比較新的dev分支，可以 git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly {% endhideToggle %} {% hideToggle Butterfly安裝方法 %} 在你的博客根目錄裏\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly\n如果想要安裝比較新的dev分支，可以\ngit clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly\n{% endhideToggle %}\ninline 在文本里面添加按鈕隱藏內容，只限文字\n( content不能包含英文逗號，可用\u0026amp;sbquo;)\n1 {% hideInline content,display,bg,color %} content: 文本內容\ndisplay: 按鈕顯示的文字(可選)\nbg: 按鈕的背景顏色(可選)\ncolor: 按鈕文字的顏色(可選)\nDemo\n1 2 3 哪個英文字母最酷？ {% hideInline 因為西裝褲(C裝酷),查看答案,#FF7242,#fff %} 門裏站着一個人? {% hideInline 閃 %} 哪個英文字母最酷？ {% hideInline 因為西裝褲(C裝酷),查看答案,#FF7242,#fff %}\n門裏站着一個人? {% hideInline 閃 %}\nblock獨立的block隱藏內容，可以隱藏很多內容，包括圖片，代碼塊等等\n( display 不能包含英文逗號，可用\u0026amp;sbquo;)\n1 2 3 {% hideBlock display,bg,color %} content {% endhideBlock %} content: 文本內容 display: 按鈕顯示的文字(可選) bg: 按鈕的背景顏色(可選) color: 按鈕文字的顏色(可選) Demo\n1 2 3 4 查看答案 {% hideBlock 查看答案 %} 傻子，怎麼可能有答案 {% endhideBlock %} 查看答案 {% hideBlock 查看答案 %} 傻子，怎麼可能有答案 {% endhideBlock %}\n{% endtabs %}\nflink 可在任何界面插入類似友情鏈接列表效果\n內容格式與友情鏈接界面一樣，支持 yml 格式\n1 2 3 {% flink %} xxxxxx {% endflink %} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 {% flink %} - class_name: 友情鏈接 class_desc: 那些人，那些事 link_list: - name: JerryC link: https://jerryc.me/ avatar: https://jerryc.me/img/avatar.png descr: 今日事,今日畢 - name: Hexo link: https://hexo.io/zh-tw/ avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg descr: 快速、簡單且強大的網誌框架 - class_name: 網站 class_desc: 值得推薦的網站 link_list: - name: Youtube link: https://www.youtube.com/ avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png descr: 視頻網站 - name: Weibo link: https://www.weibo.com/ avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png descr: 中國最大社交分享平臺 - name: Twitter link: https://twitter.com/ avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png descr: 社交分享平臺 {% endflink %} 引入Aplayer播放音乐 PS：未测试\n在博客根目录[Blogroot]下打开终端，运行以下指令安装hexo-tag-aplayer插件：\n1 npm install hexo-tag-aplayer --save 在站点配置文件[Blogroot]\\_config.yml中新增配置项，建议直接加在最底下：\n1 2 3 4 5 # APlayer # https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md aplayer: meting: true asset_inject: false 修改主题配置文件[Blogroot]\\_config.butterfly.yml中关于Aplayer的配置内容\n1 2 3 4 # Inject the css and script (aplayer/meting) aplayerInject: enable: true per_page: true 在主题配置文件[Blogroot]\\_config.butterfly.yml的inject配置项中添加Aplayer的容器。\n1 2 3 4 inject: head: bottom: - \u0026lt;div class=\u0026#34;aplayer no-destroy\u0026#34; data-id=\u0026#34;5183531430\u0026#34; data-server=\u0026#34;netease\u0026#34; data-type=\u0026#34;playlist\u0026#34; data-fixed=\u0026#34;true\u0026#34; data-mini=\u0026#34;true\u0026#34; data-listFolded=\u0026#34;false\u0026#34; data-order=\u0026#34;random\u0026#34; data-preload=\u0026#34;none\u0026#34; data-autoplay=\u0026#34;false\u0026#34; muted\u0026gt;\u0026lt;/div\u0026gt; 在博客根目录[Blogroot]下打开终端，运行以下指令\n1 2 3 hexo clean hexo generate hexo server 关于更换歌单的问题，大部分同学都因为只更改了data-id的值，所以出现歌单加载不出的情况，此处需要注意，data-id、data-server、data-type分别对应了歌单的id，歌单的服务商、歌单的类型（感觉自己说了废话），所以需要确认这三项是一一对应的。\n如图中所示，找到网易云歌单的url，https://music.163.com/#/playlist?id=4907060762,此处的palylist对应的就是data-type的值，id就是data-id的值，而网易云的data-server为netease，这个可以通过Aplayer的插件文档查阅到。只有三个参数对应正确才能正常加载歌单。\nAplayer的网易云歌单接口时不时的会挂掉，所以如果你确定你配置正确，但是歌单还是没有出现。不妨去看看其他人的站点是不是也没有Aplayer标签了来判断是Aplayer本身接口的问题还是自己配置出错的问题。\n配置成功后会发现Aplayer的吸底标签一直占据着左下角的一片空间，对手机端阅读不太友好，可以添加一下CSS样式使其自动缩进隐藏。在 [Blogroot]\\themes\\butterfly\\source\\css\\custom.css中(没有这个文件就按照路径自己新建)添加如下内容：\n1 2 3 4 5 6 7 8 9 .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body { left: -66px !important; /* 默认情况下缩进左侧66px，只留一点箭头部分 */ } .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover { left: 0 !important; /* 鼠标悬停是左侧缩进归零，完全显示按钮 */ } 9.不要忘了到主题配置文件引入自定义样式，修改[Blogroot]_config.butterfly.yml的inject配置项：\n1 2 3 4 5 inject: head: + - \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/custom.css\u0026#34; media=\u0026#34;defer\u0026#34; onload=\u0026#34;this.media=\u0026#39;all\u0026#39;\u0026#34;\u0026gt; bottom: - \u0026lt;div class=\u0026#34;aplayer no-destroy\u0026#34; data-id=\u0026#34;5183531430\u0026#34; data-server=\u0026#34;netease\u0026#34; data-type=\u0026#34;playlist\u0026#34; data-fixed=\u0026#34;true\u0026#34; data-mini=\u0026#34;true\u0026#34; data-listFolded=\u0026#34;false\u0026#34; data-order=\u0026#34;random\u0026#34; data-preload=\u0026#34;none\u0026#34; data-autoplay=\u0026#34;false\u0026#34; muted\u0026gt;\u0026lt;/div\u0026gt; 10.更多自定义样式魔改内容详见站内教程：Custom Beautify\n引入自定义 css 在站点配置文件 blog/_config.blog.yml 中，搜索定位到 inject，插入以下内容：\n1 2 3 4 inject: head: # - \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/xxx.css\u0026#34;\u0026gt; - \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/custom.css\u0026#34;\u0026gt; 这样，后续所有样式的自定义，就可以在 blog/source/css/custom.css 文件中进行，能不动主题源码，就不要改源码，以免后续更新变得复杂。\nH1~H6 小风车样式修改 方法一：\n找到主题配置文件_config.butterfly.yml\n1.把beautify的title-prefix-icon处修改为:\u0026rsquo;\\f863\u0026rsquo;\n（如果没有开启图标功能则需要将enable设置为true）\n1 2 3 beautify: enable: true title-prefix-icon: \u0026#39;\\f863\u0026#39; 2.在inject的head处引入以下文件:\n1 2 3 inject: head: - \u0026#34;\u0026lt;style\u0026gt;#article-container.post-content h1:before, h2:before, h3:before, h4:before, h5:before, h6:before { -webkit-animation: avatar_turn_around 1s linear infinite; -moz-animation: avatar_turn_around 1s linear infinite; -o-animation: avatar_turn_around 1s linear infinite; -ms-animation: avatar_turn_around 1s linear infinite; animation: avatar_turn_around 1s linear infinite; }\u0026lt;/style\u0026gt;\u0026#34; 重新部署，启动，就可以看到效果啦。\n方法二：\n1.主题目录：\n1 2 3 4 5 6 beautify: enable: true field: post # site/post # title-prefix-icon: \u0026#39;\\f0c1\u0026#39; + title-prefix-icon: \u0026#39;\\f863\u0026#39; title-prefix-icon-color: \u0026#39;#F47466\u0026#39; 2.让小风车转起来,在上文的 blog/source/css/custom.css 文件中，加入以下代码即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 /* 文章页H1-H6图标样式效果 */ h1::before, h2::before, h3::before, h4::before, h5::before, h6::before { -webkit-animation: ccc 1.6s linear infinite ; animation: ccc 1.6s linear infinite ; } @-webkit-keyframes ccc { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } to { -webkit-transform: rotate(-1turn); transform: rotate(-1turn) } } @keyframes ccc { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } to { -webkit-transform: rotate(-1turn); transform: rotate(-1turn) } } 3.小风车颜色 css 代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #content-inner.layout h1::before { color: #ef50a8 ; margin-left: -1.55rem; font-size: 1.3rem; margin-top: -0.23rem; } #content-inner.layout h2::before { color: #fb7061 ; margin-left: -1.35rem; font-size: 1.1rem; margin-top: -0.12rem; } #content-inner.layout h3::before { color: #ffbf00 ; margin-left: -1.22rem; font-size: 0.95rem; margin-top: -0.09rem; } #content-inner.layout h4::before { color: #a9e000 ; margin-left: -1.05rem; font-size: 0.8rem; margin-top: -0.09rem; } #content-inner.layout h5::before { color: #57c850 ; margin-left: -0.9rem; font-size: 0.7rem; margin-top: 0.0rem; } #content-inner.layout h6::before { color: #5ec1e0 ; margin-left: -0.9rem; font-size: 0.66rem; margin-top: 0.0rem; } 修改风车图标大小：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #content-inner.layout h1::before { color: #ef50a8 ; margin-left: -31px; font-size: 26px; margin-top: -5px; } #content-inner.layout h2::before { color: #fb7061 ; margin-left: -27px; font-size: 22px; margin-top: -3px; } #content-inner.layout h3::before { color: #ffbf00 ; margin-left: -25px; font-size: 20px; margin-top: -2px; } #content-inner.layout h4::before { color: #a9e000 ; font-size: 16px; margin-top: -2px; } #content-inner.layout h5::before { color: #57c850 ; margin-left: -18px; font-size: 14px; margin-top: 0; } #content-inner.layout h6::before { color: #5ec1e0 ; margin-left: -18px; font-size: 13px; margin-top: 0; } 4.小风车 hover 效果\n1 2 3 4 5 6 7 8 #content-inner.layout h1:hover, #content-inner.layout h2:hover, #content-inner.layout h3:hover, #content-inner.layout h4:hover, #content-inner.layout h5:hover, #content-inner.layout h6:hover { color: #49b1f5 ; } #content-inner.layout h1:hover::before, #content-inner.layout h2:hover::before, #content-inner.layout h3:hover::before, #content-inner.layout h4:hover::before, #content-inner.layout h5:hover::before, #content-inner.layout h6:hover::before { color: #49b1f5 ; -webkit-animation: ccc 3.2s linear infinite ; animation: ccc 3.2s linear infinite ; } 修改标题前图标为闪电 修改标题前图标为闪电：title-prefix-icon:'\\f0e7'，颜色为黄色： title-prefix-icon-color: \u0026quot;#ffb821\u0026quot;\n页面设置图标转速 blog/source/css/custom.css 文件中，加入以下代码：\n1 2 3 4 /* 页面设置icon转动速度调整 */ #rightside_config i.fas.fa-cog.fa-spin { animation: fa-spin 5s linear infinite ; } 页面插入 B 站视频 / Bilibili 直接复制插入你的 md 文章就行，修改里面的 aid 为你的视频 id：\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;div align=center class=\u0026#34;aspect-ratio\u0026#34;\u0026gt; \u0026lt;iframe src=\u0026#34;https://player.bilibili.com/player.html?aid=9926758\u0026amp;\u0026amp;page=1\u0026amp;as_wide=1\u0026amp;high_quality=1\u0026amp;danmaku=0\u0026#34; scrolling=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; high_quality=1 danmaku=1 allowfullscreen=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; 修改 css 样式，记得去 blog/source/css/custom.css 里，添加上述的样式：\n1 2 3 4 5 6 7 8 9 /*哔哩哔哩视频适配*/ .aspect-ratio {position: relative;width: 100%;height: 0;padding-bottom: 75%;margin: 3% auto;text-align: center;} .aspect-ratio iframe { position: absolute; width: 100%; height: 100%; left: 0; top: 0; } 图片下的说明文字居中 在 blog/source/css/custom.css 中添加如下代码：\n1 2 3 .jg-caption{ text-align: center !important; } 隐藏指定页面title 在页面md源码输入：\n1 2 3 4 5 \u0026lt;style\u0026gt; .page-title { display: none; } \u0026lt;/style\u0026gt; 隐藏二级目录 默认子目录是展开的，如果你想要隐藏，在子目录里添加 hide 。\n1 2 3 List||fas fa-list||hide: Music: /music/ || fas fa-music Movie: /movies/ || fas fa-video Tag Plugins Plus 地址：Tag Plugins Plus\n侧边栏添加微博热搜 新建侧边栏 官方文档：https://butterfly.js.org/posts/ea33ab97/，想要了解更多可以查看这篇文章。\n打开_data文件夹，创建一个widget.yml文件，在里面粘贴如下代码:\n1 2 3 4 5 6 7 bottom: - class_name: id_name: weibo name: 微博热搜 icon: fa-brands fa-weibo order: -2 html: \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/weibo.css\u0026#34;\u0026gt;\u0026lt;div id=\u0026#34;weiboContent\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://bu.dusays.com/2022/05/01/626e88f349943.gif\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;script src=\u0026#34;/js/weibo.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 上面图像也可用本地路径：/img/loading.gif ，如果想删除加载动画可删除下面这行：\n\u0026lt;img src=\u0026quot;https://bu.dusays.com/2022/05/01/626e88f349943.gif\u0026quot;\u0026gt;\n自用：(这里填top表示所有地方都显示，buttom表示只在非文章页面显示，如主页等等)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 top: - class_name: latestBB id_name: name: 最新说说 icon: fas fa-bolt order: 2 html: | \u0026lt;div class=\u0026#34;swiper-container swiper-container-aside\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;swiper-wrapper swiper-weapper-aside\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;bb-btn button--animated\u0026#34; href=\u0026#34;/say/\u0026#34; title=\u0026#34;查看全部\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;far fa-hand-point-right fa-fw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 查看更多 \u0026lt;/a\u0026gt; \u0026lt;script\u0026gt; window.kkBBConfig = { limit: 10, blog:\u0026#39;/say/\u0026#39;, author: \u0026#39;这里填个人ID\u0026#39;, api_url: \u0026#39;这里填api_url\u0026#39; } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn1.tianli0.top/npm/iwyang@1.0.7/speak/butterfly-speak-swiper@1.1.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; bottom: - class_name: id_name: weibo name: 微博热搜 icon: fa-brands fa-weibo order: -2 html: \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/weibo.css\u0026#34;\u0026gt;\u0026lt;div id=\u0026#34;weiboContent\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://bu.dusays.com/2022/05/01/626e88f349943.gif\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;script src=\u0026#34;/js/weibo.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 引入weibo.css和weibo.js _config.butterfly.yml里修改：\n1 2 3 4 5 6 7 8 inject: head: # - \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/xxx.css\u0026#34;\u0026gt; - \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/custom.css\u0026#34;\u0026gt; + - \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/weibo.css\u0026#34;\u0026gt; bottom: # - \u0026lt;script src=\u0026#34;xxxx\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; + - \u0026lt;script src=\u0026#34;/js/weibo.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 创建weibo.css文件 在\\source\\css目录下新建weibo.css：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 .weibo-new { background: #ff3852 } .weibo-hot { background: #ff9406 } .weibo-jyzy { background: #ffc000 } .weibo-recommend { background: #00b7ee } .weibo-adrecommend { background: #febd22 } .weibo-friend { background: #8fc21e } .weibo-boom { background: #bd0000 } .weibo-topic { background: #ff6f49 } .weibo-topic-ad { background: #4dadff } .weibo-boil { background: #f86400 } #weibo .item-content { text-align: center; } #weibo-container { width: 100%; height: 140px; font-size: 95%; overflow-y: auto; -ms-overflow-style: none; scrollbar-width: none } .weibo-list-item { display: flex; flex-direction: row; justify-content: space-between; flex-wrap: nowrap } .weibo-title { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin-right: auto } .weibo-num { float: right } .weibo-hotness { display: inline-block; padding: 0 6px; transform: scale(.8) translateX(-3px); color: #fff; border-radius: 8px } #weibo-container a { color: #555; } [data-theme=\u0026#39;dark\u0026#39;] #weibo-container a { color: rgba(255, 255, 255, 0.7); } /* 隐藏滚动条 */ #weibo-container::-webkit-scrollbar{ display: none; } 创建weibo.js文件 在\\source\\js目录下新建weibo.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 try { if (document.getElementById(\u0026#39;weibo\u0026#39;).clientWidth) weibo(); } catch (error) {} function weibo() { let hotness = { \u0026#39;爆\u0026#39;: \u0026#39;weibo-boom\u0026#39;, \u0026#39;热\u0026#39;: \u0026#39;weibo-hot\u0026#39;, \u0026#39;沸\u0026#39;: \u0026#39;weibo-boil\u0026#39;, \u0026#39;新\u0026#39;: \u0026#39;weibo-new\u0026#39;, \u0026#39;荐\u0026#39;: \u0026#39;weibo-recommend\u0026#39;, \u0026#39;音\u0026#39;: \u0026#39;weibo-jyzy\u0026#39;,\t\u0026#39;影\u0026#39;: \u0026#39;weibo-jyzy\u0026#39;, \u0026#39;剧\u0026#39;: \u0026#39;weibo-jyzy\u0026#39;, \u0026#39;综\u0026#39;: \u0026#39;weibo-jyzy\u0026#39; } let html = \u0026#39;\u0026lt;div id=\u0026#34;weibo-container\u0026#34;\u0026gt;\u0026#39; let data = JSON.parse(localStorage.getItem(\u0026#39;weibo\u0026#39;)); let nowTime = Date.now(); let ls; if (data == null || nowTime - data.time \u0026gt; 600000) { // 600000为缓存时间，即10分钟，防止频繁请求，加快本地访问速度。 getData(); return } else { ls = JSON.parse(data.ls) }; for (let item of ls) { html += \u0026#39;\u0026lt;div class=\u0026#34;weibo-list-item\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;weibo-hotness \u0026#39; + hotness[(item.hot || \u0026#39;荐\u0026#39;)] + \u0026#39;\u0026#34;\u0026gt;\u0026#39; + (item.hot || \u0026#39;荐\u0026#39;) + \u0026#39;\u0026lt;/div\u0026gt;\u0026#39; + \u0026#39;\u0026lt;span class=\u0026#34;weibo-title\u0026#34;\u0026gt;\u0026lt;a title=\u0026#34;\u0026#39; + item.title + \u0026#39;\u0026#34;href=\u0026#34;\u0026#39; + item.url + \u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;external nofollow noreferrer\u0026#34;\u0026gt;\u0026#39; + item.title + \u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt;\u0026#39; + \u0026#39;\u0026lt;div class=\u0026#34;weibo-num\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026#39; + item.num + \u0026#39;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026#39; } html += \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; document.getElementById(\u0026#39;weiboContent\u0026#39;).innerHTML = html; } function getData() { fetch(\u0026#39;https://weibo-top-api-two.vercel.app/api\u0026#39;).then(data =\u0026gt; data.json()).then(data =\u0026gt; { data = { time: Date.now(), ls: JSON.stringify(data) } localStorage.setItem(\u0026#39;weibo\u0026#39;, JSON.stringify(data)) }).then(weibo); } 自建 Vercel API 地址：Eurkon/weibo-top-api\n虽然 Vercel 的访问应当没有次数限制，但是不排除存在因访问次数过多而限流等限制。所以还是建议各位自建 API。使用 Vercel 部署，完全免费。且无需服务器。\n最后记得修改weibo.js里的api地址，即：https://weibo-top-api.vercel.app/api改成https://你的域名//api\n自建第三方 API 查看：https://blog.leonus.cn/2022/weibo.html\n友链朋友圈 仓库地址：https://github.com/Rock-Candy-Tea/hexo-circle-of-friends 文档：https://fcircle-doc.js.cool 前端部署 推荐使用朋友圈5.x版本最新前端，基于林木木的方案进行优化，同时添加管理面板，方便进行配置管理。\nhexo下的部署方法，在博客根目录下，创建普通页面：\n1 hexo new page fcircle 可以看到source/fcircle/index.md 文件，打开该文件，粘贴以下内容：\n官方：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 --- title: 朋友圈 date: 2022-10-09 00:38:16 --- \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; let UserConfig = { // 填写你的api地址 private_api_url: \u0026#39;http://192.168.142.88:8000/\u0026#39;, // 点击加载更多时，一次最多加载几篇文章，默认10 page_turning_number: 10, // 头像加载失败时，默认头像地址 error_img: \u0026#39;https://sdn.geekzu.org/avatar/57d8260dfb55501c37dde588e7c3852c\u0026#39;, // 进入页面时第一次的排序规则 sort_rule: \u0026#39;created\u0026#39; } \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://npm.elemecdn.com/imgscdn@1.1.39/fcircle/app.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://npm.elemecdn.com/imgscdn@1.1.39/fcircle/bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 访问域名下的/fcircle即可看到效果。\n如果觉得该cdn比较慢，可以手动将这两个js文件放到你认为更快的cdn上。新版前端在顶部右下角卡片新增管理面板。点击即可进入。第一次部署成功后，输入第一个密码的同时设置密码。请设置一个安全可靠的密码，并防止泄露。\n当保存设置时，由于网络原因，可能需要一段时间响应，尽量避免连续保存。\n除了在管理面板配置之外，朋友圈同样支持修改配置文件进行配置，详见配置项说明。\nhexo设置skip_render hexo设置skip_render, 指定不进行渲染的文件或文件夹\n1.单个文件夹下全部文件：\n1 skip_render: demo/* 2.单个文件夹下指定类型文件：\n1 skip_render: demo/*.html 3.单个文件夹下全部文件以及子目录:\n1 skip_render: demo/** 4.多个文件夹以及各种复杂情况：\n1 2 3 skip_render: - \u0026#39;demo/*.html\u0026#39; - \u0026#39;demo/**\u0026#39; 更新记录 2023.5.7\nCommits on Dec 29, 2023 Commits on Oct 9, 2023 Commits on Jun 6, 2023 Commits on Apr 10, 2023 参考链接 Butterfly 安装文档(一) 快速开始 我的 Blog 美化日记 ——Hexo+Butterfly hexo设置skip_render, 指定不进行渲染的文件或文件夹 引入Aplayer播放音乐 微博热搜api使用与自建 Butterfly 微博热搜侧边栏 Hexo小标题旋转风车设置 ","date":"2022-02-04T09:20:42Z","permalink":"//localhost:1313/archives/hexo-butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/","title":"hexo butterfly主题配置与使用"},{"content":" 使用qq浏览器等软件的扫描文档功能。 word中，右键依次选择设置图片格式—图片—图片校正—调高对比度（100%）和清晰度（50%）。 WPS中，依次点击图片工具—调高对比度。 PS里的操作：\n1.先按快捷键Ctrl+Shift+U去色。\n2.Ctrl+L调出色阶，白色吸管点背景。如果对比不够，继续调整色阶的滑块。\n3.Ctrl+J复制一个图层，点击滤镜—其它—高反差保留，设置为2个像素。\n4.图层混合模式改成线性光（或者柔光）。\n","date":"2022-01-20T09:01:18Z","permalink":"//localhost:1313/archives/%E5%8E%BB%E6%8E%89%E8%AF%95%E5%8D%B7%E5%9B%BE%E7%89%87%E7%81%B0%E8%89%B2%E8%83%8C%E6%99%AF%E7%9A%84%E6%96%B9%E6%B3%95/","title":"去掉试卷图片灰色背景的方法"},{"content":"北师大三年级数学下册优质课，来源于一师一优课，基本上都是部级优课，点击前往bilibili可选集观看。\n1.原来一束鲜花152元。现在一线在鲜花买三束送一束。现在每数比原来便宜多少元？\r买三束送一束就是三束花的钱买到4束。所以用三束花的钱除以4得出现在每束花的价钱，再用原来一束的价钱减去现在一束花的价钱。\n","date":"2022-01-16T06:25:10Z","permalink":"//localhost:1313/archives/%E5%8C%97%E5%B8%88%E5%A4%A7%E4%B8%89%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E4%BC%98%E8%B4%A8%E8%AF%BE/","title":"北师大三年级数学下册优质课"},{"content":"1.确保PPT扩展名为.pptx\n2.将PPT扩展名改为.rar\n3.用压缩软件打开，音乐文件在/ppt/media文件夹下。\n","date":"2021-11-17T11:08:52Z","permalink":"//localhost:1313/archives/%E6%80%8E%E6%A0%B7%E6%8F%90%E5%8F%96ppt%E9%87%8C%E7%9A%84%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/","title":"怎样提取PPT里的背景音乐"},{"content":"用pr做了一个电子相册，参考： 使用 Premiere 把照片变成唯美动画效果。\n","date":"2021-11-12T14:27:25Z","permalink":"//localhost:1313/archives/2021%E5%B9%B4%E7%A7%8B%E5%AD%A3%E8%BF%90%E5%8A%A8%E4%BC%9A/","title":"2021年秋季运动会"},{"content":"这是三年级的第一次公开课，国庆来了第一天第一节课就开始上。本次公开课的课题是《小树有多少棵》，主要内容是探究并整十、整百数乘一位数的口算方法。在上课开始我通过“对口令”的小游戏使学生来快速进入学习状态，让他们对今天所学知识有一个初步的了解。接着就是探究整十、整百数乘一位数的口算方法，主要有以下四步：（1）先独立列出算式（2）尝试用自己喜欢的方法获得计算结果（3）交流计算方法：连加、列举法、表内乘法等（4）总结算法。纵观本次公开课主要存在以下问题：\n缺少板书，虽然多媒体课件什么都有，但是黑板上一定要有板书，其实在上课结束时我就意识到这一点。\n重要的知识点总结、概念都要让学生读几遍。\n数学语言不够精确，在最后总结规律时，应该说“一个乘数，另一个乘数”而不是“一个数，另一个数”\n缺乏对后进生的关注。对于学困生课堂要多加关注。\n","date":"2021-10-10T12:38:29Z","permalink":"//localhost:1313/archives/%E4%B8%89%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8A%E5%86%8C%E5%86%8C%E7%AC%AC%E5%9B%9B%E5%8D%95%E5%85%83%E5%B0%8F%E6%A0%91%E6%9C%89%E5%A4%9A%E5%B0%91%E6%A3%B5%E6%95%99%E5%AD%A6%E5%8F%8D%E6%80%9D/","title":"三年级数学上册册第四单元《小树有多少棵》教学反思"},{"content":"一、 教学目标：\n1、探索并掌握整十、整百数乘一位数的口算方法，并能正确地进行口算。\n2、结合具体情境，在讨论解决实际问题的过程中，培养学生提出问题和解决问题的意识和能力。\n二、教学重点：探索并掌握整十、整百数乘一位数的口算方法，并能正确地进行计算。\n三、教学难点：结合具体情境，体验算法的多样性，并优化出整十、整百数乘一位数的口算方法。\n四、教学课时：1课时\n五、教学手段：\n六、教学过程：\n（一）复习旧知，新知铺垫\n1.“对口令”小游戏：在上课前，我们来玩一个“对口令”小游戏，由我来说乘法口诀前半部分，你们来说后半部分。\n2.可能有的同学已经猜到了，今天我们要学的就与乘法口诀有关。\n（二）创设情境，提出问题\n1.出示书上情境图，提问：说一说你能从中得到那些数学信息。\n2.提问：从这些数学信息中，你能提出哪些数学问题。\n根据这些数学信息可以提出很多数学问题，今天我们就主要研究这两个数学问题：\n（1）3捆一共多少棵？\n（2）园林工人运走了三车树苗，一共运走了多少棵？\n（三）探究整十数乘一位数算法\n1．3捆一共多少棵？\n（1）先独立列出算式；（20×3）\n（2）尝试用自己喜欢的方法获得计算结果；（20×3=60（棵））\n（3）交流计算方法；（连加、列举法、表内乘法等）\n（4）总结算法：整十数乘一位数，先用整十数0前面的数与一位数相乘，再在积的末尾添上一个0。\n（四）探究整百数乘一位数算法\n园林工人运走了三车树苗，一共运走了多少棵？ （1）先独立列出算式；（500×3）\n（2）尝试用自己喜欢的方法获得计算结果；（500×3=1500（棵）\n（3）交流计算方法；（连加、表内乘法等）\n（4）总结算法：整百数乘一位数，先用整百数0前面的数与一位数相乘，再在积的末尾添上两个0。\n2.算一算，你发现了什么？\n（两个数相乘，一个乘数不变，另一个乘数扩大10倍，积也跟着扩大10倍；另一个乘数扩大100倍，积也跟着扩大100倍。）\n（三）扩展应用\n1.整千数乘一位数：2000×4=\n2.整十数乘整十数：30×60=\n（四）巩固应用\n“练一练”的第1-5题。\n（五）回顾整理\n通过这节课的学习，你学到了什么？\n整十、整百数乘一位数，先用整十、整百数0前面的数与一位数相乘，再在积的末尾添上相应个数的0。\n七、板书设计\n20×3=60（棵）\n500×3=1500（棵）\n","date":"2021-10-02T12:42:45Z","permalink":"//localhost:1313/archives/%E4%B8%89%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8A%E5%86%8C%E5%86%8C%E7%AC%AC%E5%9B%9B%E5%8D%95%E5%85%83%E5%B0%8F%E6%A0%91%E6%9C%89%E5%A4%9A%E5%B0%91%E6%A3%B5%E6%95%99%E5%AD%A6%E8%AE%BE%E8%AE%A1/","title":"三年级数学上册册第四单元《小树有多少棵》教学设计"},{"content":"今天才知道怎样才能把A3文档打印到A4纸上，真的是孤陋寡闻。 有必要记录一下。这里可以用Word提供的“复印机”缩放功能来打印，就是说可以通过“缩放”命令，让Word为文档设置格式，使其符合打印机的纸张尺寸。操作步骤如下： 点击“文件→打印”，系统弹出“打印”对话框，“缩放”，在“按纸型缩放”下拉列表框中，选择要使用的纸型，比如选择A4纸型。单击“确定”按钮。 这时，Word将调整文档的页面使其适合所选纸型，在此Word将原本需要打印在A3纸张上的文档，通过自动缩小字号和图形打印在A4幅面的纸上。这类似于复印机的“缩小／放大”功能。\n参考链接：怎样设置才能把A3文档打印到A4纸上\n","date":"2021-08-26T11:34:14Z","permalink":"//localhost:1313/archives/%E6%80%8E%E6%A0%B7%E6%89%8D%E8%83%BD%E6%8A%8Aa3%E6%96%87%E6%A1%A3%E6%89%93%E5%8D%B0%E5%88%B0a4%E7%BA%B8%E4%B8%8A/","title":"怎样才能把A3文档打印到A4纸上"},{"content":"一、解决port 443问题：\n1.切换到全：\n1 2 3 git config --global http.proxy http://127.0.0.1:10809 git config --global https.proxy http://127.0.0.1:10808 2.取消全：\n1 2 3 git config --global --unset http.proxy git config --global --unset https.proxy 3.再次切换到全：\n1 2 3 git config --global http.proxy http://127.0.0.1:10809 git config --global https.proxy http://127.0.0.1:10808 这时会出现 port 22: Connection refused问题。\n二、解决port 22问题\n1.进入.ssh的目录，使用命令touch config创建一个配置文件，并写入你github的配置信息。（xxxxx@xx.com是你github的注册邮箱）\n1 2 3 4 5 6 Host github.com User xxxxx@xx.com Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa Port 443 2.更改配置文件config的权限。\n1 chmod 600 config 3.再尝试查看连接状态\n1 ssh git@github.com 三、Please make sure you have the correct access rights and the repository exist\n如果即使已经添加本地公钥到github，还提示以上错误，并且执行ssh -T git@github.com提示22端口关闭，解决方法见上。\n参考链接：\n1.解决 Failed to connect to github.com port 443\n2.解决ssh: connect to host github.com port 22\n","date":"2021-08-18T03:56:29Z","permalink":"//localhost:1313/archives/%E8%A7%A3%E5%86%B3github-port-443%E4%BB%A5%E5%8F%8Aport-22%E9%97%AE%E9%A2%98/","title":"解决Github Port 443以及Port 22问题"},{"content":"{% note warning flat %} 2022.8.1 由于腾讯云开发要开始收费了，故将哔哔点啥改成Speak。点击直达：{% btn \u0026lsquo;/archives/6c31209c/#部署Speak\u0026rsquo;,部署 Speak,far fa-hand-point-right,blue larger %} {% endnote %}\n{% note warning flat %} 2022.8.28 Vercel崩了，要绑定个二级域名才能用。或者使用服务器部署版。 {% endnote %}\n服务部署 1.首先保证成功激活腾讯云开发.\n2.点击一键部署至云开发\n推荐创建上海环境。如选择广州环境，需要在 twikoo.init() 时额外指定环境 region: “ap-guangzhou”\n3.进入环境-登录授权，启用“匿名登录”\n4.进入环境-安全配置，将博客网址添加到“WEB安全域名”\n5.进入环境-HTTP访问服务，复制链接备用。\n进入云函数，修改自定义serverkey bber 并保存备用。\n6.进入云函数，修改自定义serverkey bber 并保存备用。\n7.扫码进入公众号，输入命名绑定。\n1 2 3 /bber 你刚刚设置的key,https://你的云函数HTTP访问地址/bber 比如: /bber mykey,https://balabala.ap-shanghai.app.tcloudbase.com/bber 8. 手动添加一条哔哔 必须要有\n进入腾讯云数据库-\u0026gt;talks-\u0026gt;文档列表-\u0026gt;添加文档\n1 2 3 字段: content 类型: string 值: 随便 点击确定\n验证微信发送\n9.微信发送一条文字，返回哔哔成功，talks文档列表里多出来一条，即为服务部署成功。\n前端部署 1.打开Hugo的unsafe\n1 2 3 4 5 6 7 8 9 10 markup: tableOfContents: endLevel: 4 ordered: true startLevel: 2 highlight: noClasses: false goldmark: renderer: unsafe: true 2.新建一个markdown文件（此法不通，jsdelivr用不了，需要更换地址，见下文）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;div id=\u0026#39;speak\u0026#39;\u0026gt;\u0026lt;/speak\u0026gt; \u0026lt;!-- 使用markdown渲染 --\u0026gt; \u0026lt;!-- 使用markdown渲染 --\u0026gt; \u0026lt;!-- \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/ispeak-bber/ispeak-bber-md.min.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;!-- 不使用markdown渲染 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/ispeak-bber/ispeak-bber.min.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 解析微信表情（参考：https://github.com/buddys/qq-wechat-emotion-parser） --\u0026gt; \u0026lt;!-- \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/buddys/qq-wechat-emotion-parser@master/dist/qq-wechat-emotion-parser.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;script\u0026gt; ispeakBber .init({ el: \u0026#39;#speak\u0026#39;, // 容器选择器 name: \u0026#39;bore\u0026#39;, // 显示的昵称 envId: \u0026#39;腾讯云开发环境id\u0026#39;, // 环境id region: \u0026#39;ap-shanghai\u0026#39;, // 腾讯云地址，默认为上海 limit: 10, // 每次加载的条数，默认为5 avatar: \u0026#39;https://cdn.jsdelivr.net/gh/iwyang/pic/avatar.jpg\u0026#39;, fromColor:\u0026#39;rgb(245, 150, 170)\u0026#39;, // 下方标签背景颜色 默认 rgb(245, 150, 170) loadingImg: \u0026#39;https://7.dusays.com/2021/03/04/d2d5e983e2961.gif\u0026#39;, // 自定义loading的图片，示例值为默认值 dbName:\u0026#39;talks\u0026#39; // 数据的名称，默认talks，避免有人的命名不是这个，所以加入此配置字段。 }) .then(function() { // 哔哔加载完成后的回调函数，你可以写你自己的功能 console.log(\u0026#39;哔哔 加载完成\u0026#39;) }) \u0026lt;/script\u0026gt; 2022.5.18 jsdelivr用不了，需要修改地址（本地相对路径）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;style\u0026gt; .page-title { display: none; } \u0026lt;/style\u0026gt; \u0026lt;!-- 自言自语 --\u0026gt; \u0026lt;div id=\u0026#39;speak\u0026#39;\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/img/js/ispeak-bber.min.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; ispeakBber .init({ el: \u0026#39;#speak\u0026#39;, // 容器选择器 name: \u0026#39;Bore 🦄\u0026#39;, // 显示的昵称 envId: \u0026#39;hello-cloudbase-0gc8y1np937491cb\u0026#39;, // 环境id region: \u0026#39;ap-shanghai\u0026#39;, // 腾讯云地址，默认为上海 limit: 10, // 每次加载的条数，默认为5 avatar: \u0026#39;/img/avatar.jpg\u0026#39;, // 头像地址 fromColor:\u0026#39;rgb(245, 150, 170)\u0026#39;, // 下方标签背景颜色 默认 rgb(245, 150, 170) loadingImg: \u0026#39;/img/loading.gif\u0026#39;, // 自定义loading的图片，示例值为默认值 dbName:\u0026#39;talks\u0026#39; // 数据的名称，默认talks，避免有人的命名不是这个，所以加入此配置字段。 }) .then(function() { // 哔哔加载完成后的回调函数，你可以写你自己的功能 console.log(\u0026#39;哔哔 加载完成\u0026#39;) }) \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 3.bber 说说美化(调整了说说出现图片时，顶部空白过大问题；更换一种 timeago 方法，解决 “两周前”、“三周前” 等部分情况下显示实际日期的 bug；修复头像尺寸异常的 bug等)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;!-- 自言自语 --\u0026gt; \u0026lt;div id=\u0026#39;speak\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/js/timeago.min.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/gh/kuole-o/bber-ispeak@main/dist/ispeak-bber.min.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; ispeakBber .init({ el: \u0026#39;#speak\u0026#39;, // 容器选择器 name: \u0026#39;夜的第八章 🦄\u0026#39;, // 显示的昵称 envId: \u0026#39;blogpkly-13278c\u0026#39;, // 环境id region: \u0026#39;ap-shanghai\u0026#39;, // 腾讯云地址，默认为上海 limit: 7, // 每次加载的条数，默认为5 avatar: \u0026#39;https://cdn.guole.fun/img/gl.jpg\u0026#39;, // 头像地址 fromColor:\u0026#39;rgb(245, 150, 170)\u0026#39;, // 下方标签背景颜色 默认 rgb(245, 150, 170) loadingImg: \u0026#39;https://7.dusays.com/2021/03/04/d2d5e983e2961.gif\u0026#39;, // 自定义loading的图片，示例值为默认值 dbName:\u0026#39;talks\u0026#39; // 数据的名称，默认talks，避免有人的命名不是这个，所以加入此配置字段。 }) .then(function() { // 哔哔加载完成后的回调函数，你可以写你自己的功能 console.log(\u0026#39;哔哔 加载完成\u0026#39;) }) \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 部署BBer-weixin公众号 点击部署到云开发将 BBer-weixin 微信公众号后端，一键部署到云开发。\n对接的微信公众号简要流程：\n1.点击 bber-weixin 云函数，右上角**【编辑】，开启【固定IP】，留存公网固定IP**。\n我将from 微信公众号改成了💎 WeChat\n2.进入环境-HTTP访问服务，获取触发路径链接并留存，如以下格式：\n1 https://bb-f5c0f-222222.ap-shanghai.app.tcloudbase.com/bber-weixin 3.打开 微信公众平台，进入开发-基本配置，获取AppID和AppSecret留存，修改IP白名单为上一步的公网固定IP。继续服务器配置：\n消息加密方式选择兼容模式\n一个URL，即第2步留存的触发链接；\n一个Token，预设为 weixin\n!!!先不点，不点，不点，不点提交！！！\n4.回 bber-weixin 云函数，填入微信公众号appid、微信公众号appsecret 保存。\n1 2 3 4 const token = \u0026#39;weixin\u0026#39; // 微信公众号的服务器验证用的令牌 token //填入自己的微信公众号appid和appsecret var wxappid = \u0026#39;微信公众号appid\u0026#39;, wxappsecret = \u0026#39;微信公众号appsecret\u0026#39;, 5.回 微信公众平台，提交，验证成功！\n6.回 bber-weixin 云函数，注释第44行代码，保存。\n1 2 3 4 5 if(tmpStr == signature){ //请求来源鉴权 //成功后注释下行代码 //return event.queryStringParameters.echostr //成功后注释本行代码 //成功后注释上行代码 7.手动配置或更新代码： https://github.com/lmm214/bber-weixin/tree/main/bber-weixin\n公众号发布说说 接上面，部署好自己的公众号就可以用公众号发布了。这里注意利用公众号发图片。\n1.先在公众号发一张图片\n2.接着输入/a \u0026lt;br\u0026gt;文字说明\n(输入\u0026lt;br\u0026gt;是为了使图片和文字不处于同一行)\n注意：用公众号发图片会一连发几张，不知道是什么原因，以后就用浏览器插件发图片，注意比例 16:9，长度568px\nChrome + Edge 发布说说 安装本地插件 点此下载我提取并修改的浏览器插件包\nChrome 安装本地插件：\n访问 Chrome——更多工具——扩展程序——左上角“加载已解压的扩展程序”，选择我提供的附件，解压缩后的文件夹 1.0.0_0_Chrome，然后回到 Chrome，点开右上角扩展程序来固定插件。\n注意：插件文件移动或丢失后，浏览器扩展失效，因为不是云端的，所以要保存在可靠路径。\n应用商店安装插件 下载地址：iSpeak-bber时光机\n本地插件from默认为🌈 Chrome\nAndroid 捷径发布说说 从 Github 下载安装这款 “HTTP 快捷方式” apk，安装后继续下文操作。\n下载地址：HTTP-Shortcuts\n打开 HTTP 快捷方式 App，选择新建快捷方式，自定义名称、描述，在 “基本设置” 中，设置方法为 “POST” 或 “GET”，URL 为\n1 https://你后台显示的.ap-shanghai.app.tcloudbase.com/bber?key= 至于 key、from，我们设置为常量，text 则设置为变量 content，每次发布的时候填写说说内容。\n点击 URL 右侧的 {}，选择添加变量。常量 key 为你云函数里的 key，如果没有特别设置就是 bber。from 我们设置一个好玩的如📱 Android 11。添加一个变量 content。（个人觉得from直接设置为Android就行，不然免得以后安卓升级版本，还要跟着修改。）\n接着回到 URL 页面，补充完刚才添加的常量和变量，如以下格式：\n1 https://你后台显示的.ap-shanghai.app.tcloudbase.com/bber?key={key}\u0026amp;from={from}\u0026amp;text={content} 右上角，保存这个快捷方式，然后长按发送到桌面，搞定！\n修改ispeak-bber样式 隐藏页面标题 将以下代码放在文章正文最上方。\nhugo-stack主题：\n1 2 3 4 5 \u0026lt;style\u0026gt; .article-header { display: none; } \u0026lt;/style\u0026gt; hexo-butterfly主题：\n1 2 3 4 5 \u0026lt;style\u0026gt; .page-title { display: none; } \u0026lt;/style\u0026gt; 修改顶部文字 自己胡乱改的，居然起了作用。不管了先用再说。\n1.首先下载：ispeak-bber-md.min.js\n2.用Notepad++打开，搜索My BiBi改成我的说说。\n3.按F12，打开浏览器控制台，定位标题。可以发现color: #49b1f5前面就是标题字体大小，搜索color: #49b1f5，将前面的字体改成22px：font-size: 22px\n4.接着改图标大小，一样方法定位图标，可以发现color: black后面就是图标大小，搜索color: black，将后面图标大小改成22px：font-size: 22px\n修复说说出现图片时，顶部空白过大问题 搜索white-space作如下修改\n1 2 - {\\n padding: 10px 0;\\n white-space: pre-wrap;\\n} + {\\n padding: 0.8rem 0;\\n} 注意：利用微信公众号发图片后追加文字说明，前面要加个换行符，要不然图片和文字处在同一行。\n注意：用公众号发图片会一连发几张，不知道是什么原因，以后就用浏览器插件发图片，注意比例 16:9，长度568px\n解决公众号连续发多张图片 云函数代码问题，改成下面这样即可（还未测试）：\n1 2 3 4 5 6 7 8 104行 let res = await cloudRequest(cloudHttpUrl,cloudKey,createTime,content) 124行 let res = await cloudRequest(cloudHttpUrl,cloudKey,createTime,content) 160行 function cloudRequest(cloudHttpUrl,cloudKey,createTime,content){ 中，删掉 “createTime,”，接着\n1 2 162行 var param1 = {\u0026#39;key\u0026#39;: cloudKey,\u0026#39;time\u0026#39;: createTime,\u0026#39;text\u0026#39;: content,\u0026#39;from\u0026#39;:\u0026#39;微信公众号\u0026#39;} 删掉 “’time’: createTime,” 就解决了。\n取消显示\u0026rsquo;一周前\u0026rsquo;,\u0026lsquo;一小时前\u0026rsquo; 去掉“周前”，”月前“这些时间点：\n找到ispeak-bber-md.min.js or ispeak-bber.min.js 2.复制下面这段代码，查找，然后删掉它们 (未测试)\n1 if(l\u0026gt;=1\u0026amp;\u0026amp;l\u0026lt;=3)n=\u0026#34; \u0026#34;+parseInt(l)+\u0026#34; 月前\u0026#34;;else if(f\u0026gt;=1\u0026amp;\u0026amp;f\u0026lt;=3)n=\u0026#34; \u0026#34;+parseInt(f)+\u0026#34; 周前\u0026#34;;else if(c\u0026gt;=1\u0026amp;\u0026amp;c\u0026lt;=6)n=\u0026#34; \u0026#34;+parseInt(c)+\u0026#34; 天前\u0026#34;;else if(u\u0026gt;=1\u0026amp;\u0026amp;u\u0026lt;=23)n=\u0026#34; \u0026#34;+parseInt(u)+\u0026#34; 小时前\u0026#34;;else if(a\u0026gt;=1\u0026amp;\u0026amp;a\u0026lt;=59)n=\u0026#34; \u0026#34;+parseInt(a)+\u0026#34; 分钟前\u0026#34;;else if(s\u0026gt;=0\u0026amp;\u0026amp;s\u0026lt;=r)n=\u0026#34;刚刚\u0026#34;;else butterfly 主题添加首页轮播 添加首页轮播借助了 butterfly 主题自定义组件的功能实现，通过在自定义组件处加载 JavaScript 生成首页的轮播展示。\n创建 widget.yml 在Hexo博客目录中的source/_data（如果没有 _data 文件夹，请自行创建），创建一个文件 widget.yml，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 top: - class_name: latestBB id_name: name: 最新说说 icon: fas fa-bolt order: 2 html: | \u0026lt;div class=\u0026#34;swiper-container swiper-container-aside\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;swiper-wrapper swiper-weapper-aside\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;bb-btn button--animated\u0026#34; href=\u0026#34;/say/\u0026#34; title=\u0026#34;查看全部\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;far fa-hand-point-right fa-fw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 查看更多 \u0026lt;/a\u0026gt; \u0026lt;script\u0026gt; window.kkBBConfig = { limit: 10, blog:\u0026#39;/say/\u0026#39;, api_url: \u0026#39;https://xxx/json/bber.json\u0026#39;//你的json url } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/butterfly-bber-swiper/dist/index.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2022.5.18 jsdelivr用不了，需要修改地址（本地相对路径）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 top: - class_name: latestBB id_name: name: 最新说说 icon: fas fa-bolt order: 2 html: | \u0026lt;div class=\u0026#34;swiper-container swiper-container-aside\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;swiper-wrapper swiper-weapper-aside\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;bb-btn button--animated\u0026#34; href=\u0026#34;/say/\u0026#34; title=\u0026#34;查看全部\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;far fa-hand-point-right fa-fw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 查看更多 \u0026lt;/a\u0026gt; \u0026lt;script\u0026gt; window.kkBBConfig = { limit: 10, blog:\u0026#39;/say/\u0026#39;, api_url: \u0026#39;https://xxx/json/bber.json\u0026#39;//你的json url } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/img/js/butterfly-bber-swiper.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 去掉侧边栏最新说说 在 blog/source/css/custom.css 文件中，加入以下代码即可。\n1 2 3 4 /* 去掉侧边栏最新吐槽 */ .latestBB { display: none; } 解决移动端二级菜单缩进问题 设置完首页轮播后，移动端二级菜单会出现缩进问题，浏览器F12发现问题：\n解决方法：\nbutterfly-bber-swiper.min.js(轮播js文件)，搜索bbTimeList删除前面的padding: 0;\\n；直接搜索padding: 0;\\n将其删除，注意后面就是bbTimeList，搜索bbTimeList会出现多个结果，故搜索后者较好。\n部署Speak 2022.8.1 由于腾讯云开发要开始收费了，故将哔哔点啥改成Speak。官方文档：\n小康Speak\nkkAPI-Doc\nkkapi-open\nkkadmin-open\niSpeak\n首先要参考上面官方文档搭建好API、后台管理等内容。然后再弄前端。Vercel搭建见官方文档，下面主要记录服务器部署。\nDocker 安装 MongoDB 1.先安装docker，参考：Debian 10 安装 Docker \u0026amp; Docker Compose\n2.取最新版的 MongoDB 镜像\n1 docker pull mongo:latest 3.查看本地镜像，使用以下命令来查看是否已安装了 mongo：\n1 docker images 4.运行容器\n1 2 3 4 5 6 docker run -d --name mongodb \\ -p 27017:27017 \\ -v /my/own/datadir:/data/db \\ -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \\ -e MONGO_INITDB_ROOT_PASSWORD=secret \\ mongo 之后可以使用工具测试一下连接。如navicat\n5.使容器开机启动\n1 docker update --restart=always mongodb kkapi 部署 1.首先克隆项目源码\n1 git clone https://ghproxy.com/https://github.com/kkfive/kkapi-open.git 2.接下来j进入项目目录，安装项目需要安装的工具 yarn 和 pm2，分别是 :\n1 2 3 4 cd kkapi-open apt install npm -y npm i yarn -g npm i pm2 -g 3.升级node版本，仓库给的构建版本是16+的，node版本过低，下一步会出错，最后一步项目无法启动。(上面安装npm时默认会安装低版本node，所以要更新node版本)\n1 2 3 4 node --version curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash - sudo apt install nodejs -y node --version 上面操作会安装最新版的node，安装nodeV16：curl -sL https://deb.nodesource.com/setup_16.x | sudo bash -\n4.然后安装项目所需依赖 yarn install\n5.之后再执行 yarn build 编译项目。这里我的小鸡顶不住编译所以自己在本地编译传上去了。\n6.在项目文件夹创建环境变量文件，格式如\n1 vi local.env 1 2 3 4 5 6 PORT=3000 DATABASE_URL=mongodb://127.0.0.1:27017/kkpaiopen?authSource=admin DATABASE_USER=mongoadmin DATABASE_PASSWORD=secret # 加密密钥 测试 SECRETKEY=xxxxxxxxxxxxxxx 7.使用 pm2 使用守护线程启动项目 pm2 start pm2.json\n我启动项目遇到了 [PM2][WARN] Expect “restart_delay” to be a typeof [object Number], but now is [object String] 错误，这个错误原因是作者的 pm2.json 中的 restart_delay 值是字符串类型 60s 改成数值 60 就可以了。\n8.测试项目是否成功启动 可以使用 lsof -i:端口 查看端口是否被监听判断项目是否成功启动。没成功的原因大概率是因为数据库连接地址、数据库账号密码不正确。\n9.创建初始化用户 curl http://127.0.0.1:3000/api/user/init?userName=bore 创建的默认用户名和密码是 bore 和 123456，这个用户名密码用来登陆可视化的管理后台，并且用户似乎只能拥有一个。\n10.更新项目\n进入项目并执行一下命令：\n1 2 3 git pull yarn build pm2 restart pm2.json 11.备份\n/my/own/datadir 这一段就是数据库的文件，把这个打包搞走就行，然后换到新地方以后，部署mongodb数据库还要对应上。\n首先完整搭建好（要初始化账号，能访问后台，这时后台会显示什么都没有），然后删除my文件夹，将备份的数据库文件夹上传到相应目录，重启容器即可登录后台，查看到原来的数据了。\n定时备份数据库，参考：halo 定时备份的方法\n开机启动kkapi 1.编辑脚本\n1 vi s.sh 1 2 3 #!/bin/bash cd /root/kkapi-open /usr/local/bin/pm2 start pm2.json 2.赋予脚本执行权限\n1 chmod +x /root/s.sh 运行的时候就输入下面的代码即可：./s.sh\n3.设定开机自动运行脚本\n1 crontab -e 1 @reboot /root/s.sh 配置域名访问 参考：\n配置域名访问\n申请 SSL 证书\nSSL证书自动续期\n注意修改反代端口号，如果SSL443端口不能用，将listen 443改成listen 1314\nkkapiadmin（可视化管理后台） 见官方文档：kkapi后台配置\n之后登录就是用前面初始化的用户名密码，进入后台以后可以修改密码。登陆后台以后需要设置：\nISpeak 标签。因为发布说说是需要选择标签的，标签中的背景颜色值是十六进制的颜色代码 添加用户token。需要注意！！！，添加的token的标题只能是 speak 不能是其他的，否则发布说说时会提示token不存在，发布时验证的就是字段为 speak 的token的值。 前端 参考：博客前端方案，新建一个Markdown文件：\nv4.4.0以前 官方：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \u0026lt;div id=\u0026#34;tip\u0026#34; style=\u0026#34;text-align:center;\u0026#34;\u0026gt;ipseak加载中\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;ispeak\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/styles/atom-one-dark.min.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/ispeak@4.2.0/style.css\u0026#34; /\u0026gt; \u0026lt;style\u0026gt; #article-container .D-avatar { margin: 0 10px 0 0; } .D-footer { display: none; } \u0026lt;/style\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/marked/2.0.0/marked.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/discuss/dist/Discuss.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/ispeak@4.2.0/ispeak.umd.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var head = document.getElementsByTagName(\u0026#39;head\u0026#39;)[0] var meta = document.createElement(\u0026#39;meta\u0026#39;) meta.name = \u0026#39;referrer\u0026#39; meta.content = \u0026#39;no-referrer\u0026#39; head.appendChild(meta) if (ispeak) { ispeak .init({ el: \u0026#39;#ispeak\u0026#39;, api: \u0026#39;https://kkapi-dev.vercel.app/\u0026#39;, author: \u0026#39;61fe93508fd621d39a155725\u0026#39;, pageSize: 10, loading_img: \u0026#39;https://bu.dusays.com/2022/05/01/626e88f349943.gif\u0026#39;, initCommentName: \u0026#39;Discuss\u0026#39;, initCommentOptions: { serverURLs: \u0026#39;https://kkdiscuss.vercel.app/\u0026#39; } }) .then(function () { console.log(\u0026#39;ispeak 加载完成\u0026#39;) document.getElementById(\u0026#39;tip\u0026#39;).style.display = \u0026#39;none\u0026#39; }) } else { document.getElementById(\u0026#39;tip\u0026#39;).innerHTML = \u0026#39;ipseak依赖加载失败！\u0026#39; } \u0026lt;/script\u0026gt; 自用：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;div class=\u0026#34;js-pjax\u0026#34; id=\u0026#34;tip\u0026#34; style=\u0026#34;text-align:center;\u0026#34;\u0026gt;ipseak加载中\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;js-pjax\u0026#34; id=\u0026#34;ispeak\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/styles/atom-one-dark.min.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn1.tianli0.top/npm/ispeak@4.3.3/style.css\u0026#34; /\u0026gt; \u0026lt;style\u0026gt; #article-container .D-avatar { margin: 0 10px 0 0; } .D-footer { display: none; } \u0026lt;/style\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/marked/2.0.0/marked.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn1.tianli0.top/npm/ispeak@4.3.3/ispeak.umd.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var head = document.getElementsByTagName(\u0026#39;head\u0026#39;)[0] var meta = document.createElement(\u0026#39;meta\u0026#39;) meta.name = \u0026#39;referrer\u0026#39; meta.content = \u0026#39;no-referrer\u0026#39; head.appendChild(meta) if (ispeak) { ispeak .init({ el: \u0026#39;#ispeak\u0026#39;, api: \u0026#39;https://kkapi-open-six.vercel.app/\u0026#39;, author: \u0026#39;这里填个人ID\u0026#39;, pageSize: 10, loading_img: \u0026#39;https://bu.dusays.com/2022/05/01/626e88f349943.gif\u0026#39;, speakPage: \u0026#39;/say\u0026#39;, githubClientId: \u0026#39;这里填githubClientId\u0026#39;, hideComment: true, }) .then(function () { console.log(\u0026#39;ispeak 加载完成\u0026#39;) document.getElementById(\u0026#39;tip\u0026#39;).style.display = \u0026#39;none\u0026#39; }) } else { document.getElementById(\u0026#39;tip\u0026#39;).innerHTML = \u0026#39;ipseak依赖加载失败！\u0026#39; } \u0026lt;/script\u0026gt; 如若CDN用不了，上面的CSS、JS、图像等可以用本地路径，如：/img/loading.gif /img/js/speak/style.css，不用使用：../img/loading.gif，使用上面的相对路径即可。 hugo loveit主题要把 KaTeX 在这个页面单独关闭，因为和说说冲突了。math: false v4.4.0以后 官方： （以Artalk评论为例）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;div id=\u0026#34;tip\u0026#34; style=\u0026#34;text-align:center;\u0026#34;\u0026gt;ipseak加载中\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;ispeak\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/styles/atom-one-dark.min.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/ispeak@4.4.0/style.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/marked/2.0.0/marked.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/ispeak@4.4.0/ispeak.umd.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- CSS --\u0026gt; \u0026lt;link href=\u0026#34;https://unpkg.com/artalk@2.3.4/dist/Artalk.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;!-- JS --\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/artalk@2.3.4/dist/Artalk.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var head = document.getElementsByTagName(\u0026#39;head\u0026#39;)[0] var meta = document.createElement(\u0026#39;meta\u0026#39;) meta.name = \u0026#39;referrer\u0026#39; meta.content = \u0026#39;no-referrer\u0026#39; head.appendChild(meta) if (ispeak) { ispeak .init({ el: \u0026#39;#ispeak\u0026#39;, api: \u0026#39;https://kkapi-dev.vercel.app/\u0026#39;, author: \u0026#39;61fe93508fd621d39a155725\u0026#39;, pageSize: 10, loading_img: \u0026#39;https://bu.dusays.com/2021/03/04/d2d5e983e2961.gif\u0026#39;, comment: function (speak) { // 4.4.0 之后在此回调函数中初始化评论 const { _id, title, content } = speak const contentSub = content.substring(0, 30) new Artalk({ el: \u0026#39;.ispeak-comment\u0026#39;, // 默认情况下 ipseak 生成class为 ispeak-comment 的div pageKey: \u0026#39;/speak/info.html?q=\u0026#39; + _id, // 手动传入当前speak的唯一id pageTitle: title || contentSub, // 手动传入当前speak的标题(由于content可能过长，因此截取前30个字符) server: \u0026#39;https://api.antmoe.com/artalk/\u0026#39;, site: \u0026#39;speak\u0026#39; // 你的站点名 }) } }) .then(function () { console.log(\u0026#39;ispeak 加载完成\u0026#39;) document.getElementById(\u0026#39;tip\u0026#39;).style.display = \u0026#39;none\u0026#39; }) } else { document.getElementById(\u0026#39;tip\u0026#39;).innerHTML = \u0026#39;ipseak依赖加载失败！\u0026#39; } \u0026lt;/script\u0026gt; 官方设置评论：\ninfo.md页面内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 --- title: Speak date: 2022-08-21 14:11:00 update: 2022-08-21 14:11:00 top_img: https://tva1.sinaimg.cn/large/005B3XPgly1ghkxqgvmy0j30zk0irn2q.jpg aside: false comments: false description: 欢迎来到小康的Speak页面，快来看看小康分享了什么speak！ --- \u0026lt;!-- CSS --\u0026gt; \u0026lt;link href=\u0026#34;https://unpkg.com/artalk@2.3.4/dist/Artalk.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/styles/atom-one-dark.min.css\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#39;content\u0026#39;\u0026gt; \u0026lt;img src=\u0026#39;https://bu.dusays.com/2022/05/01/626e88f349943.gif\u0026#39;\u0026gt; \u0026lt;/div\u0026gt; {% btn \u0026#39;https://www.antmoe.com/speak/\u0026#39;,查看全部,far fa-hand-point-right,block center blue larger %} \u0026lt;hr /\u0026gt; \u0026lt;div class=\u0026#39;ispeak-comment\u0026#39;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- JS --\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/artalk@2.3.4/dist/Artalk.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/marked@4.0.18/marked.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const searchParams = new URLSearchParams(window.location.search); const speakId = searchParams.get(\u0026#39;q\u0026#39;); const path = window.location.pathname; const apiURL = \u0026#39;https://kkapi.vercel.app/api/ispeak\u0026#39;; const markedRender = (body, loading_img=\u0026#39;https://bu.dusays.com/2022/05/01/626e88f349943.gif\u0026#39;) =\u0026gt; { const renderer = { image(href, title, text) { return `\u0026lt;a href=\u0026#34;${href}\u0026#34; target=\u0026#34;_blank\u0026#34; data-fancybox=\u0026#34;group\u0026#34; class=\u0026#34;fancybox\u0026#34;\u0026gt; \u0026lt;img speak-src=\u0026#34;${href}\u0026#34; src=${loading_img} alt=\u0026#39;${text}\u0026#39;\u0026gt; \u0026lt;/a\u0026gt;` } } marked.setOptions({ renderer: new marked.Renderer(), highlight: function (code) { if (hljs) { return hljs.highlightAuto(code).value } else { return code } }, pedantic: false, gfm: true, tables: true, breaks: true, sanitize: false, smartLists: true, smartypants: false, xhtml: false }) marked.use({ renderer }) return marked.parse(body) } fetch(`${apiURL}/get/${speakId}`) .then(response =\u0026gt; response.json()) .then(res =\u0026gt; { const data = res.data; if(data){ const {title,content} = data; const contentSub = content.substring(0, 30); document.querySelector(\u0026#39;.content\u0026#39;).innerHTML = markedRender(content); if(title){ document.title = title; } new Artalk({ el: \u0026#39;.ispeak-comment\u0026#39;, pageKey: path + \u0026#39;?q=\u0026#39; + speakId, pageTitle: title || contentSub, server: \u0026#39;https://api.antmoe.com/artalk/\u0026#39;, site: \u0026#39;speak\u0026#39;, // 你的站点名 useBackendConf: true, }) } }); \u0026lt;/script\u0026gt; 自用：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;div class=\u0026#34;js-pjax\u0026#34; id=\u0026#34;tip\u0026#34; style=\u0026#34;text-align:center;\u0026#34;\u0026gt;ipseak加载中\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;js-pjax\u0026#34; id=\u0026#34;ispeak\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/styles/atom-one-dark.min.css\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn1.tianli0.top/npm/ispeak@4.4.0/style.css\u0026#34; /\u0026gt; \u0026lt;style\u0026gt; #article-container .D-avatar { margin: 0 10px 0 0; } .D-footer { display: none; } \u0026lt;/style\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/highlight.js/10.6.0/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/marked/2.0.0/marked.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn1.tianli0.top/npm/ispeak@4.4.0/ispeak.umd.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var head = document.getElementsByTagName(\u0026#39;head\u0026#39;)[0] var meta = document.createElement(\u0026#39;meta\u0026#39;) meta.name = \u0026#39;referrer\u0026#39; meta.content = \u0026#39;no-referrer\u0026#39; head.appendChild(meta) if (ispeak) { ispeak .init({ el: \u0026#39;#ispeak\u0026#39;, api: \u0026#39;https://kkapi-open-six.vercel.app/\u0026#39;, author: \u0026#39;你的个人ID\u0026#39;, pageSize: 10, loading_img: \u0026#39;https://bu.dusays.com/2022/05/01/626e88f349943.gif\u0026#39;, speakPage: \u0026#39;/say\u0026#39;, githubClientId: \u0026#39;你的githubClientId\u0026#39;, hideComment: true, }) .then(function () { console.log(\u0026#39;ispeak 加载完成\u0026#39;) document.getElementById(\u0026#39;tip\u0026#39;).style.display = \u0026#39;none\u0026#39; }) } else { document.getElementById(\u0026#39;tip\u0026#39;).innerHTML = \u0026#39;ipseak依赖加载失败！\u0026#39; } \u0026lt;/script\u0026gt; 注意：\n从v4.4.0的上一个版本v4.3.3就可以添加hideComment: true,隐藏评论 ~~Artalk还未搭建好，故没有加入相关字段。~~评论搞不定，算了。感觉说说没必要弄评论。只能用V4.3.3了，或者新版本关闭评论。 首页轮播 参考上面，在Hexo博客目录中的source/_data（如果没有 _data 文件夹，请自行创建），创建一个文件 widget.yml，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 top: - class_name: latestBB id_name: name: Ispeak icon: fas fa-bolt order: 2 html: | \u0026lt;div class=\u0026#34;swiper-container swiper-container-aside\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;swiper-wrapper swiper-weapper-aside\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;bb-btn button--animated\u0026#34; href=\u0026#34;/say/\u0026#34; title=\u0026#34;查看全部\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;far fa-hand-point-right fa-fw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 查看更多 \u0026lt;/a\u0026gt; \u0026lt;script\u0026gt; window.kkBBConfig = { limit: 10, blog:\u0026#39;/say/\u0026#39;, api_url: \u0026#39;你的api地址（末尾不要/）\u0026#39;, author: \u0026#39;你的个人ID\u0026#39; } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn1.tianli0.top/npm/iwyang@1.0.8/speak/butterfly-speak-swiper@1.1.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 如若轮播jjsCDN用不了，上面轮播js可改成本地：/img/js/speak/butterfly-speak-swiper@1.1.0.min.js\n上面是自己瞎改的，不过能用。最后可以看上面解决移动端二级菜单缩进问题，解决缩进问题。下面是官方解答：怎样使ispeak实现首页轮播\n我个人的方法是通过挂载在侧边栏，然后侧边栏引用js动态插入顶部轮播位置。\n参考代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 bottom: - class_name: latestBB id_name: name: Ispeak icon: fas fa-bolt order: 2 html: | \u0026lt;div class=\u0026#34;swiper-container swiper-container-aside\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;swiper-wrapper swiper-weapper-aside\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;bb-btn button--animated\u0026#34; href=\u0026#34;/speak/\u0026#34; title=\u0026#34;查看全部\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;far fa-hand-point-right fa-fw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 查看更多 \u0026lt;/a\u0026gt; \u0026lt;script\u0026gt; window.kkBBConfig = { limit: 9, blog:\u0026#39;/speak\u0026#39;, api_url: \u0026#39;api地址\u0026#39;, author: \u0026#39;你的用户token\u0026#39; } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn1.tianli0.top/npm/butterfly-speak-swiper@1.1.0/dist/index.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 去掉侧边栏最新说说 在 blog/source/css/custom.css 文件中，加入以下代码即可。\n1 2 3 4 /* 去掉侧边栏最新吐槽 */ .latestBB { display: none; } 发送speak方式 参考：发送方式\n安卓手机上快捷方式发送 此部分转自：https://blog.leonus.cn/2022/talkInAndroid.html\n获取api的url 这个很好弄，只需要在你部署的API地址后面加上/api/ispeak/addByToken即可 如：https://xxx.vercel.app/api/ispeak/addByToken（不是后台的地址，而是api的地址，也就是你部署的时候第一个部署的那个）\n获取标签id 用谷歌浏览器简单些，如果开发者工具是英语，可点击右上角小齿轮切换成中文。\n1.先登录到Ispeak管理后台，并切换到Ispeak标签管理。\n2.然后按F12打开开发者工具，依次点击Network(网络)—Fetch/XHR—刷新网页—找到getByPage...(总共就两个，鼠标选择下面一个。)— 选中响应然后点击左下角的一个{}进行格式化（美观输出），我们分别复制id(name上面的id，不是user厘米俺的id，别弄混了)发送到手机即可(记清楚对应的标签，别到时候弄混了) 详细请看下图：\n获取token网页端发送 在后台的设置里，找到 设置 \u0026gt; 个人设置 \u0026gt; Tokens \u0026gt; 添加token 标题填写speak，值随便填。将填写的值发送到手机。\n下载软件 下载HTTP Shortcuts，可以直接使用谷歌搜索下载(推荐) 也可以通过Github下载：https://github.com/Waboodoo/HTTP-Shortcuts/releases 不确定手机什么内核的可以下载app-universal-release.apk\n添加变量 1.点击右上角三个点 \u0026gt; 变量，点击加号，选择输入文本，名称填content，标题可以填：说说内容，下面的对话框可填可不填，这都不是必须的。\n输入选项选中多行,高级设置选中JSON编码，然后点右上角对号进行保存。\n2.再点击加号，选择选项，名称填tag，对话框标题可填：标签，然后添加选项。标签填写你的标签的名字，值填写你的标签对应的ID，然后点确定。 如果有多个标签可以继续添加，高级设置选中JSON编码，都添加完之后点右上角对号进行保存。\n3.再点击加号，选择选项，名称填type，对话框标题可填：可视范围，然后添加以下3个选项。标签填写你的标签的名字，值填写0、1、2。\n1 2 3 1.标签：公开 值：0 2.标签：登录可见 值：1 3.标签：仅自己 值：2 填完后记得高级设置选中JSON编码，都添加完之后点右上角对号进行保存。\n添加快捷方式 返回主页面，点击加号，选择最上面的新建快捷方式，名称随便，描述随便。\n1.点击基本设置，方法选择POST，URL填写上面获取的API的URL，然后返回\n2.点击请求头，点击加号，头部填写Content-Type，值填写application/json，确定然后返回\n3.再点击响应体/响应参数，选择自定义类型，Content-Type填写application/json，请求体填写：(最好不要直接点复制按钮复制代码，直接拖动选择所有行代码，这样张贴就会保留空格)\n1 2 3 4 5 6 7 { \u0026#34;token\u0026#34;: \u0026#34;你的token值\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;{tag}\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;{content}\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;{type}\u0026#34;, \u0026#34;showComment\u0026#34;: \u0026#34;1\u0026#34; } {% note warning flat %} 注意：上面的{tag}和{content}以及{type}需要先删除，然后点击旁边的{}插入变量（插入的变量颜色是蓝色）。不能直接填写！！！ tag和content还有type顺序决定你发布时弹窗的先后，tag在上就是先选择标签再输入内容，content在上就是先输入内容再选择标签。 {% endnote %}\n全部填写完之后保存即可，点击快捷方式就可以实现发送说说了。 长按快捷方式可以将此快捷方式添加到桌面，想发说说时直接点击即可，方便至极。\n网页端发送 进入ispeak-biubiu页面，首先配置基础配置。\nAPI地址：URL后面要加/api Token：token的名称必须为speak 自己部署ispeak-biubiu 仓库地址：speak-biubiu，（直接部署到Vercel不会，所以采用了一种笨方法）\n1.首先fork一份备份，然后下载一份源码到本地，进入项目目录，执行以下命令（过程会很慢）：\n1 2 3 npm install npm run build npm run preview 2.然后将dist 这个文件夹里面的网页上传到GitHub，最后再部署到Vercel。\nispeak-biubiu为Vite项目，更多使用说明查看：https://cn.vitejs.dev/\n默认情况下，执行npm run build构建会输出到 dist 文件夹中。你可以部署这个 dist 文件夹到任何你喜欢的平台。\nPS：可以直接fork此仓库：iwyang/say，然后部署到Vercel\n后台发送 进入后台新增即可。更多发送方式查看：发送方式\nspeak\u0026amp;\u0026amp;twikoo\u0026amp;\u0026amp;Verce域名绑定 Vercel崩了，要绑定个二级域名才能用\nspeak首页轮播api地址：\\source\\_data\\widget.yml，改为可以访问的api url\nspeak页面api地址：\\source\\say\\index.md，改为可以访问的api url\n安卓快捷方式speak api地址，改为可以访问的api url\nspeak后台管理github秘钥：VITE_GLOB_API_URL改为可以访问的api url\nspeak后台、speak url发布 访问url，改为可以访问的url（还未更改）\ntwikoo envId地址：_config.butterfly.yml，改为可以访问的url\n友链朋友圈api地址：\\source\\fcircle\\index.md，改为可以访问的api url\n参考链接 「哔哔点啥」微信公众号 2.0\n手把手教你配置哔哔点啥\nAndroid “捷径”・木木 bber 踩坑记录 + 电脑 or 手机 4 种方式直发说说\n给 bber 换个皮肤\nbber说说首页轮播\nbber的style导致\u0026rsquo;child menu items\u0026rsquo;缩进问题\nHexo博客哔哔更换记录\n短文 | CC的部落格\n申请免费的 MongoDB 数据库 | Discuss 开源免费评论系统\n在安卓手机上快捷发送说说(哔哔)\nKKapi+ISpeak说说页面部署\n","date":"2021-08-17T05:45:30Z","permalink":"//localhost:1313/archives/hexo%E9%85%8D%E7%BD%AE%E5%93%94%E5%93%94%E7%82%B9%E5%95%A5speak/","title":"hexo配置哔哔点啥\u0026\u0026Speak"},{"content":"首先确保gitee账户已绑定邮箱，并且要关注gitee公众号，并绑定了自己的账号。\n安装GIt 本地需要安装 Git ，安装过程略。安装完git后还要配置环境变量： 右键我的电脑 –\u0026gt; 属性，然后点击高级系统设置 –\u0026gt; 环境变量 –\u0026gt; 选择用户变量或系统变量中的Path,点击编辑；找到Git安装目录,添加以下地址:\n1 2 3 D:\\Program Files\\Git\\bin D:\\Program Files\\Git\\mingw64\\libexec\\git-core D:\\Program Files\\Git\\mingw64\\bin 生成SSH 公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\n1 2 git config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; 1 2 3 4 cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 这样就在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n配置SSH 公钥 在 GitHub 项目的「Settings -\u0026gt; Secrets」路径下配置好命名为 GITEE_RSA_PRIVATE_KEY 和 GITEE_PASSWORD 的两个密钥。其中：GITEE_RSA_PRIVATE_KEY 存放 id_rsa 私钥；GITEE_PASSWORD 存放 Gitee 帐号的密码 在 GitHub 的个人设置页面「Settings -\u0026gt; SSH and GPG keys」 配置 SSH 公钥（即：id_rsa.pub），命名随意 在 Gitee 的个人设置页面「安全设置 -\u0026gt; SSH 公钥」 配置 SSH 公钥（即：id_rsa.pub），命名随意 配置GitHub Actions 新建文件.github/workflows/Sync to Gitee.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 name: Sync to Gitee on: push: branches: develop jobs: build: runs-on: ubuntu-latest steps: - name: Sync to Gitee uses: wearerequired/git-mirror-action@master env: # 注意在 Settings-\u0026gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }} with: # 注意替换为你的 GitHub 源仓库地址 source-repo: git@github.com:iwyang/iwyang.github.io.git # 注意替换为你的 Gitee 目标仓库地址 destination-repo: git@gitee.com:iwyang/iwyang.git - name: Build Gitee Pages uses: yanglbme/gitee-pages-action@main with: # 注意替换为你的 Gitee 用户名 gitee-username: iwyang # 注意在 Settings-\u0026gt;Secrets 配置 GITEE_PASSWORD gitee-password: ${{ secrets.GITEE_PASSWORD }} # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错 gitee-repo: iwyang/iwyang # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在） branch: master 参考链接 使用 github actions 将 github 项目自动同步到 gitee 并自动部署 Gitee Pages\n","date":"2021-08-17T04:06:13Z","permalink":"//localhost:1313/archives/%E5%88%A9%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE%E5%88%B0gitee%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2gitee-pages/","title":"利用github Actions自动同步项目到gitee并自动部署Gitee Pages"},{"content":"部署hugo到服务器，网上一般方法是利用git hook。这里记录一种新的方法：利用FTP Deploy GitHub Actions自动部署hugo到Centos8服务器。今后只要提交源码到github仓库，剩下的事就交给GitHub Actions了。\n本地操作 参考：hugo部署到coding\u0026amp;gitee\u0026amp;备份源码-本地操作\n服务器操作 安装 Nginx 准备工作：如果服务器端口不是22，先要更改SSH端口：\n1 2 vi /etc/ssh/sshd_config port 22 然后重启生效。\n首先，在服务器上安装nginx。\n1 2 yum update -y yum install nginx -y 如果是centos 7，先要安装安装epel：yum install epel-release，才能安装nginx。\n启动 Nginx Nginx 安装完成后需要手动启动，启动Nginx并设置开机自启：\n1 2 systemctl start nginx systemctl enable nginx 关闭防火墙：\n1 2 systemctl stop firewalld.service systemctl disable firewalld.service 配置完成后，访问使用浏览器服务器 ip ，如果能看到以下界面，表示运行成功。\n创建新的网站目录 为了图方便，可以直接将网站目录改为FTP家目录。\n为了方便期间，我们在 /var/www/ 目录下为每个站点创建一个文件夹。\n1 2 3 sudo mkdir -p /var/www/blog sudo chown -R $USER:$USER /var/www/blog sudo chmod -R 755 /var/www 解决Nginx出现403 forbidden 如果后面利用FTP上传网页后，出现403 Forbidden，解决方法：\n假设网站根目录在/var/www/blog/，则执行：\n1 chmod -R 777 /var/www 配置 nginx 1 vi /etc/nginx/conf.d/blog.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 server { listen 80 ; listen [::]:80; root /var/www/blog; server_name bore.vip www.bore.vip; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/blog; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/blog; access_log off; expires 10m; } location / { root /var/www/blog; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 重启 Nginx 服务器，使服务器设定生效：\n1 sudo systemctl restart nginx 配置ssl证书 更多查看：Nginx 配置 ssl 证书\n这里记下怎样添加 Let’s Encrypt 免费证书。（貌似只有上传了文件到网站目录，才能申请证书成功。）如果想启用阿里证书，可查看：启用阿里免费证书\n安装Certbot 1 2 yum install epel-release -y yum install certbot -y 然后执行：\n1 certbot certonly --webroot -w /var/www/blog -d bore.vip -m 455343442@qq.com --agree-tos 配置Nginx 1 vi /etc/nginx/conf.d/blog.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 server { listen 80; server_name bore.vip www.bore.vip; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/blog; server_name bore.vip www.bore.vip; ssl on; ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/blog; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/blog; access_log off; expires 10m; } location / { root /var/www/blog; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 重启Nginx生效：\n1 systemctl restart nginx 证书自动更新 由于这个证书的时效只有 90 天，我们需要设置自动更新的功能，帮我们自动更新证书的时效。首先先在命令行模拟证书更新：\n1 certbot renew --dry-run 模拟更新成功的效果如下(略)\n在无法确认你的 nginx 配置是否正确时，一定要运行模拟更新命令，确保certbot和服务器通讯正常。使用 crontab -e 的命令来启用自动任务，命令行：\n1 crontab -e 添加配置：（每隔两个月凌晨2:30自动执行证书更新操作）后保存退出。\n1 30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\n1 openssl x509 -noout -dates -in /etc/letsencrypt/live/bore.vip/cert.pem 安装vsftpd Debian查看：Debian安装vsftpd，Centos参考下面的。\n1 sudo yum install vsftpd -y 安装软件包后，启动vsftpd，并使其能够在引导时自动启动：\n1 2 sudo systemctl start vsftpd sudo systemctl enable vsftpd 配置vsftpd 1 vi /etc/vsftpd/vsftpd.conf 在userlist_enable=YES下面，加上：\n1 2 userlist_file=/etc/vsftpd/user_list userlist_deny=NO 创建FTP用户 创建一个新用户，名为admin:\n1 2 sudo adduser admin sudo passwd admin 将用户添加到允许的FTP用户列表中：\n1 echo \u0026#34;admin\u0026#34; | sudo tee -a /etc/vsftpd/user_list 设置正确的权限（使ftp用户可以上传网站文件到相应目录）：\n1 2 sudo chmod 755 /var/www/blog sudo chown -R admin: /var/www/blog 关闭防火墙 1 2 systemctl stop firewalld.service systemctl disable firewalld.service 重启vsftpd服务 保存文件并重新启动vsftpd服务，以使更改生效：\n1 sudo systemctl restart vsftpd 更多有关ftp部分可查看：centos8搭建ftp服务器\n允许root登录FTP 将root添加到允许的FTP用户列表中： 1 echo \u0026#34;root\u0026#34; | sudo tee -a /etc/vsftpd/user_list 修改/etc/vsftpd/user_list和/etc/vsftpd/ftpusers两个设置文件脚本，将root账户前加上#号变为注释（使 root账户从禁止登录的用户列表中排除）。\n1 vi /etc/vsftpd/user_list 1 vi /etc/vsftpd/ftpusers 重启vsftpd服务 1 sudo systemctl restart vsftpd Github操作 配置FTP_MIRROR_PASSWORD 点击博客仓库的Settings-\u0026gt;Secrets-\u0026gt;Add a new secret，Name填写FTP_MIRROR_PASSWORD，Value填写用户密码。\n配置 Github actions 在博客根目录新建.github/workflows/gh_pages.yml文件。代码（不添加缓存）如下：最好使用下面添加了缓存的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 name: GitHub Page Deploy on: push: branches: - develop jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout master uses: actions/checkout@v2.3.4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2.5.0 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build Hugo run: hugo --minify - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v3.8.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public # cname: - name: Deploy Hugo to Server uses: SamKirkland/FTP-Deploy-Action@4.2.0 with: server: 104.224.191.88 username: admin password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/blog/ 添加缓存：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 name: GitHub Page Deploy on: push: branches: - develop jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout master uses: actions/checkout@v2.3.4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2.5.0 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Cache resources # 缓存 resource 文件加快生成速度 uses: actions/cache@v2 with: path: resources # 检查照片文件变化 key: ${{ runner.os }}-hugocache-${{ hashFiles(\u0026#39;content/**/*\u0026#39;) }} restore-keys: ${{ runner.os }}-hugocache- - name: Build Hugo run: hugo --minify --gc - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v3.8.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public # cname: - name: Deploy Hugo to Server uses: SamKirkland/FTP-Deploy-Action@4.3.0 with: server: 104.224.191.88 username: root password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /usr/share/nginx/html/ 第三方：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 name: GitHub Page on: push: branches: - master # master 更新触发 jobs: deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 with: submodules: true # clone submodules fetch-depth: 0 # 克隆所有历史信息 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.87.0\u0026#34; # Hugo 版本 extended: true # hugo插件版 Stack主题 必须启用 - name: Cache resources # 缓存 resource 文件加快生成速度 uses: actions/cache@v2 with: path: resources # 检查照片文件变化 key: ${{ runner.os }}-hugocache-${{ hashFiles(\u0026#39;content/**/*\u0026#39;) }} restore-keys: ${{ runner.os }}-hugocache- - name: Build # 生成网页 删除无用 resource 文件 削减空行 run: hugo --minify --gc - name: Deploy # 部署到 GitHub Page uses: peaceiris/actions-gh-pages@v3 with: # 如果在同一个仓库下使用请使用 github_token 并注释 deploy_key # github_token: ${{ secrets.GITHUB_TOKEN }} deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # 如果在同一个仓库请注释 external_repository: # 你的 GitHub page 仓库 example/example.github.io publish_dir: ./public user_name: \u0026#34;github-actions[bot]\u0026#34; user_email: \u0026#34;github-actions[bot]@users.noreply.github.com\u0026#34; full_commit_message: Deploy from ${{ github.repository }}@${{ github.sha }} 🚀 提交源码 初始化git，新建并切换到develop分支，将源码提交到develop分支。稍等片刻，github action会自动部署blog到master分支和服务器。\n1 2 3 4 5 6 git init git checkout -b develop git remote add origin git@github.com:iwyang/iwyang.github.io.git git add . git commit -m \u0026#34;备份源码\u0026#34; git push --force origin develop 最终部署脚本：\n1 2 3 4 5 6 7 8 9 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; # backup git config --global core.autocrlf false git add . git commit -m \u0026#34;site backup\u0026#34; git push origin develop --force 克隆源码到本地 1 git clone -b develop git@github.com:iwyang/iwyang.github.io.git blog --recursive 因为使用Submodule管理主题，所以最后要加上 --recursive，因为使用 git clone 命令默认不会拉取项目中的子模块，你会发现主题文件是空的。（另外一种方法：git submodule init \u0026amp;\u0026amp; git submodule update）\n同步更新源文件 1 git pull origin develop 同步主题文件 1 git submodule update --remote 运行此命令后， Git 将会自动进入子模块然后抓取并更新，更新后重新提交一遍，子模块新的跟踪信息便也会记录到仓库中。这样就保证仓库主题是最新的。\ngithub、gitee、服务器三线部署hexo 将hexo三线部署（由于部署hexo较慢，如果单独为gitee建立一个workflows，gitee会先部署完成，这样无法同步；hugo可以单独为gitee建立一个workflows，因为hugo部署到服务器会先于部署到gitee）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 name: Hexo Deploy # 只监听 source 分支的改动 on: push: branches: - develop # 自定义环境变量 env: POST_ASSET_IMAGE_CDN: true jobs: build-and-deploy: runs-on: ubuntu-latest steps: # 获取博客源码和主题 - name: Checkout uses: actions/checkout@v2.3.4 - name: Checkout theme repo uses: actions/checkout@v2.3.4 with: repository: jerryc127/hexo-theme-butterfly ref: master path: themes/butterfly # 这里用的是 Node.js 14.x - name: Set up Node.js uses: actions/setup-node@v2 with: node-version: \u0026#39;14\u0026#39; # 设置 yarn 缓存，npm 的话可以看 actions/cache@v2 的文档示例 - name: Get yarn cache directory path id: yarn-cache-dir-path run: echo \u0026#34;::set-output name=dir::$(yarn cache dir)\u0026#34; - name: Use yarn cache uses: actions/cache@v2.1.6 id: yarn-cache with: path: ${{ steps.yarn-cache-dir-path.outputs.dir }} key: ${{ runner.os }}-yarn-${{ hashFiles(\u0026#39;**/yarn.lock\u0026#39;) }} restore-keys: | ${{ runner.os }}-yarn- # 安装依赖 - name: Install dependencies run: | yarn install --prefer-offline --frozen-lockfile # 从之前设置的 secret 获取部署私钥 - name: Set up environment env: DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} run: | sudo timedatectl set-timezone \u0026#34;Asia/Shanghai\u0026#34; mkdir -p ~/.ssh echo \u0026#34;$DEPLOY_KEY\u0026#34; \u0026gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hosts # 生成并部署 - name: Deploy run: | npx hexo deploy --generate - name: Deploy Hexo to Server uses: SamKirkland/FTP-Deploy-Action@4.1.0 with: server: 104.224.191.88 username: admin password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/blog/ - name: Sync to Gitee uses: wearerequired/git-mirror-action@master env: # 注意在 Settings-\u0026gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }} with: # 注意替换为你的 GitHub 源仓库地址 source-repo: git@github.com:iwyang/iwyang.github.io.git # 注意替换为你的 Gitee 目标仓库地址 destination-repo: git@gitee.com:iwyang/iwyang.git - name: Build Gitee Pages uses: yanglbme/gitee-pages-action@main with: # 注意替换为你的 Gitee 用户名 gitee-username: iwyang # 注意在 Settings-\u0026gt;Secrets 配置 GITEE_PASSWORD gitee-password: ${{ secrets.GITEE_PASSWORD }} # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错 gitee-repo: iwyang/iwyang # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在） branch: master github、gitee、服务器三线部署hugo 由于部署到github和服务器先于gitee，所有可以建立两个workflows。\n根目录新建.github/workflows/deploy.yml（用于部署到github和服务器） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 name: GitHub Page Deploy on: push: branches: - develop jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout master uses: actions/checkout@v2.3.4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2.5.0 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build Hugo run: hugo --minify - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v3.8.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public # cname: - name: Deploy Hugo to Server uses: SamKirkland/FTP-Deploy-Action@4.1.0 with: server: 104.224.191.88 username: admin password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/blog/ 根目录新建.github/workflows/Sync to Gitee.yml（用于部署到gitee） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 name: Sync to Gitee on: push: branches: develop jobs: build: runs-on: ubuntu-latest steps: - name: Sync to Gitee uses: wearerequired/git-mirror-action@master env: # 注意在 Settings-\u0026gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }} with: # 注意替换为你的 GitHub 源仓库地址 source-repo: git@github.com:iwyang/iwyang.github.io.git # 注意替换为你的 Gitee 目标仓库地址 destination-repo: git@gitee.com:iwyang/iwyang.git - name: Build Gitee Pages uses: yanglbme/gitee-pages-action@main with: # 注意替换为你的 Gitee 用户名 gitee-username: iwyang # 注意在 Settings-\u0026gt;Secrets 配置 GITEE_PASSWORD gitee-password: ${{ secrets.GITEE_PASSWORD }} # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错 gitee-repo: iwyang/iwyang # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在） branch: master 解决问题 1.Error: FTPError: 550 Remove directory operation failed\n1 2 3 4 5 6 7 8 9 10 rm -rf /var/www/blog sudo mkdir -p /var/www/blog sudo chown -R $USER:$USER /var/www/blog sudo chmod -R 755 /var/www sudo chmod 755 /var/www/blog sudo chown -R admin: /var/www/blog sudo systemctl restart vsftpd 参考链接 1.从 0 开始搭建 hexo 博客\n2.为博客添加 Let’s Encrypt 免费证书\n3.SamKirkland/FTP-Deploy-Action\n4.vsftpd参数设置，并允许root账户登录ftp\n5.Stack主题 + GitHub Action\n","date":"2021-08-15T08:39:34Z","permalink":"//localhost:1313/archives/github-actions%E5%88%A9%E7%94%A8ftp%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hugo-hexo%E5%88%B0centos-8/","title":"GitHub Actions利用FTP自动部署hugo-hexo到Centos 8"},{"content":"最近一两天又在折腾主题，这回是Hugo-PaperMod主题，虽然还没打算换，但还是记录一下吧。\n基本操作 查看文档：PaperMod - Features\nconfig.yml配置 注意：如果把baseURL设置成\u0026quot;/\u0026quot;，页面顶部导航失效，如果要用顶部导航，就设置为baseURL: \u0026quot;https://bore.vip\u0026quot;\nbaseURL: \u0026#34;/\u0026#34; title: Bore\u0026#39;s Notes paginate: 10 theme: PaperMod defaultContentLanguage: zh permalinks: posts: /archives/:slug/ enableInlineShortcodes: true enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false enableEmoji: true # googleAnalytics: UA-123-45 minify: disableXML: true minifyOutput: false menu: main: - identifier: home name: 首页 url: / weight: 10 - identifier: archives name: 归档 url: /archives/ weight: 20 - identifier: categories name: 分类 url: /categories/ weight: 30 - identifier: tags name: 标签 url: /tags/ weight: 40 - identifier: about name: 关于 url: /about/ weight: 50 - identifier: search name: 搜索 url: /search/ weight: 60 outputs: home: - HTML - RSS - JSON params: env: production # to enable google analytics, opengraph, twitter-cards and schema. description: \u0026#34;本站主要用来收集整理资料、记录笔记，方便自己查询使用。\u0026#34; author: # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors defaultTheme: auto disableThemeToggle: false DateFormat: \u0026#34;2006-01-02\u0026#34; ShowShareButtons: false ShowReadingTime: false disableSpecial1stPost: true displayFullLangName: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true ShowToc: true comments: true images: [\u0026#34;papermod-cover.png\u0026#34;] mainSections: - posts profileMode: enabled: false title: PaperMod imageUrl: \u0026#34;#\u0026#34; imageTitle: my image # imageWidth: 120 # imageHeight: 120 buttons: - name: Archives url: archives - name: Tags url: tags # homeInfoParams: # Title: \u0026#34;PaperMod\u0026#34; # Content: \u0026gt; # Welcome to demo of hugo\u0026#39;s theme PaperMod. # - **PaperMod** is a simple but fast and responsive theme with useful feature-set that enhances UX. # - Do give a 🌟 on Github ! # - PaperMod is based on theme [Paper](https://github.com/nanxiaobei/hugo-paper). socialIcons: - name: github url: \u0026#34;https://github.com/adityatelange/hugo-PaperMod\u0026#34; - name: KoFi url: \u0026#34;https://ko-fi.com/adityatelange\u0026#34; - name: RsS url: \u0026#34;index.xml\u0026#34; editPost: URL: \u0026#34;https://github.com/iwyang/iwyang.github.io/tree/develop/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; # edit text appendFilePath: true # to append file path to Edit link # label: # text: \u0026#34;Home\u0026#34; # icon: icon.png # iconHeight: 35 # analytics: # google: # SiteVerificationTag: \u0026#34;XYZabc\u0026#34; assets: favicon: \u0026#34;/images/favicon.png\u0026#34; favicon16x16: \u0026#34;/images/favicon.png\u0026#34; favicon32x32: \u0026#34;/images/favicon.png\u0026#34; apple_touch_icon: \u0026#34;/images/favicon.png\u0026#34; safari_pinned_tab: \u0026#34;/images/favicon.png\u0026#34; cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] taxonomies: category: categories tag: tags series: series markup: goldmark: renderer: unsafe: true # highlight: # # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # # noClasses: false # style: monokai privacy: vimeo: disabled: false simple: true twitter: disabled: false enableDNT: true simple: true instagram: disabled: false simple: true youtube: disabled: false privacyEnhanced: true services: instagram: disableInlineCSS: true twitter: disableInlineCSS: true archetypes默认模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 --- title: \u0026#34;My 1st post\u0026#34; date: 2020-09-15T11:30:03+00:00 # weight: 1 # aliases: [\u0026#34;/first\u0026#34;] tags: [\u0026#34;first\u0026#34;] author: \u0026#34;Me\u0026#34; # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors showToc: true TocOpen: false draft: false hidemeta: false comments: false description: \u0026#34;Desc Text.\u0026#34; canonicalURL: \u0026#34;https://canonical.url/to/page\u0026#34; disableHLJS: true # to disable highlightjs disableShare: false disableHLJS: false hideSummary: false searchHidden: true ShowReadingTime: true ShowBreadCrumbs: true ShowPostNavLinks: true cover: image: \u0026#34;\u0026lt;image path/url\u0026gt;\u0026#34; # image path/url alt: \u0026#34;\u0026lt;alt text\u0026gt;\u0026#34; # alt text caption: \u0026#34;\u0026lt;text\u0026gt;\u0026#34; # display caption under cover relative: false # when using page bundles set this to true hidden: true # only hide on current single page editPost: URL: \u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; # edit text appendFilePath: true # to append file path to Edit link --- 自定义：\n1 2 3 4 5 6 7 8 9 10 title: \u0026#34;{{ replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;\u0026#34; description: \u0026#34;\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} draft: false showToc: true weight: false categories: [\u0026#34;\u0026#34;] tags: [\u0026#34;\u0026#34;] 加入Waline评论系统 根目录新建layouts\\partials\\comments.html：\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Waline({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;https://your-domain.vercel.app\u0026#39;, copyright: true, login: \u0026#39;enable\u0026#39;, placeholder: \u0026#39;欢迎评论\u0026#39;, dark: \u0026#39;.dark\u0026#39;, requiredMeta: [\u0026#39;nick\u0026#39;, \u0026#39;mail\u0026#39;], }); \u0026lt;/script\u0026gt; 网上别人配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 \u0026lt;!-- Waline --\u0026gt; {{- if .Site.Params.waline.enable -}} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@waline/client@{{ .Site.Params.waline.version }}/dist/Waline.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;pagination__title-h\u0026#34; \u0026gt;\u0026lt;span class=\u0026#34;vcount\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;精彩评论\u0026lt;/span \u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var locale = { admin: \u0026#34;Ṽerified\u0026#34;, // 博主标识 busy: \u0026#34;操作频繁，请稍候再试...\u0026#34;, cancel: \u0026#34;取消\u0026#34;, cancelReply: \u0026#34;取消回复\u0026#34;, comments: \u0026#34;评论\u0026#34;, confirm: \u0026#34;确认\u0026#34;, continue: \u0026#34;继续\u0026#34;, days: \u0026#34;天前\u0026#34;, emoji: \u0026#34;表情\u0026#34;, expand: \u0026#34;查看更多...\u0026#34;, hours: \u0026#34;小时前\u0026#34;, link: \u0026#34;网址\u0026#34;, login: \u0026#34;登录\u0026#34;, logout: \u0026#34;退出\u0026#34;, mail: \u0026#34;邮箱\u0026#34;, mailFail: \u0026#34;请填写正确的邮件地址\u0026#34;, minutes: \u0026#34;分钟前\u0026#34;, more: \u0026#34;加载更多...\u0026#34;, nick: \u0026#34;昵称\u0026#34;, nickFail: \u0026#34;昵称不能少于 3 个字符\u0026#34;, now: \u0026#34;刚刚\u0026#34;, placeholder: \u0026#34;·支持 匿名评论\\n·支持 Markdown\\n·支持 Twimoji\\n·支持 代码块语法高亮\\n·不收集 UserAgent\u0026#34;, // 评论框提示语 preview: \u0026#34;预览\u0026#34;, reply: \u0026#34;回复\u0026#34;, seconds: \u0026#34;秒前\u0026#34;, sofa: \u0026#34;来发评论吧～\u0026#34;, submit: \u0026#34;提交\u0026#34;, uploadDone: \u0026#34;传输完成！\u0026#34;, uploading: \u0026#34;正在传输...\u0026#34;, word: \u0026#34;字\u0026#34;, wordHint: \u0026#34;评论字数应在 $0 到 $1 字之间！\\n当前字数：$2\u0026#34;, \u0026#34;code-98\u0026#34;: \u0026#34;Waline 初始化失败，请检查 av-min.js 版本\u0026#34;, \u0026#34;code-99\u0026#34;: \u0026#34;Waline 初始化失败，请检查 init 中的`el`元素.\u0026#34;, \u0026#34;code-100\u0026#34;: \u0026#34;Waline 初始化失败，请检查你的 AppId 和 AppKey.\u0026#34;, \u0026#34;code-140\u0026#34;: \u0026#34;今日 API 调用总次数已超过开发版限制.\u0026#34;, \u0026#34;code-401\u0026#34;: \u0026#34;未经授权的操作，请检查你的 AppId 和 AppKey.\u0026#34;, \u0026#34;code-403\u0026#34;: \u0026#34;访问被 API 域名白名单拒绝，请检查你的安全域名设置.\u0026#34;, }; new Waline({ el: \u0026#34;#waline\u0026#34;, // 初始化 Waline 挂载器 avatarCDN: \u0026#34;https://sdn.geekzu.org/avatar/\u0026#34;, // 设置 Gravatar 头像 CDN 地址 copyright: true, // Waline 版权信息 dark: \u0026#34;auto\u0026#34;, // 适配暗黑模式 highlight: true, // 代码高亮 locale, // 自定义语言 i18n，请在上面 locale 中修改内容 requiredMeta: [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;], // 必填项 serverURL: \u0026#34;https://tcb.eallion.com/waline\u0026#34;, // Waline 的服务端地址，末尾勿加 “/” visitor: true, // 开启访问量统计 wordLimit: 0, // 评论字数限制，0 为无限制 }); \u0026lt;/script\u0026gt; {{- end }} \u0026lt;!-- Twikoo --\u0026gt; {{- if .Site.Params.twikoo.enable -}} \u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;pagination__title-h\u0026#34;\u0026gt;精彩评论\u0026lt;/span\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/twikoo@{{ .Site.Params.twikoo.version }}/dist/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- \u0026lt;script\u0026gt;window.TWIKOO_MAGIC_PATH=\u0026#34;共用评论区的名称\u0026#34;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#34;eallion-8gkunp4re49bae66\u0026#34;, el: \u0026#34;#tcomment\u0026#34;, path: \u0026#39;window.TWIKOO_MAGIC_PATH||window.location.pathname\u0026#39;, onCommentLoaded: function () { $(\u0026#34;.tk-content img:not(.tk-avatar-img)\u0026#34;).each(function () { var _b = $(\u0026#34;\u0026lt;a\u0026gt;\u0026lt;/a\u0026gt;\u0026#34;).attr(\u0026#34;href\u0026#34;, this.src); $(this).wrap(_b); }) $(\u0026#34;.tk-content a[rel!=link]:has(img)\u0026#34;).slimbox(); } }); \u0026lt;/script\u0026gt; {{- end }} \u0026lt;!-- DisqusJS --\u0026gt; {{- if .Site.Params.disqus.enable -}} \u0026lt;div id=\u0026#34;disqus_thread\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{- if .Site.Params.disqus.proxy -}} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/disqusjs@{{ .Site.Params.disqus.version }}/dist/disqus.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var dsqjs = new DisqusJS({ shortname: \u0026#34;eallion\u0026#34;, siteName: \u0026#34;{{ .Site.Params.title }}\u0026#34;, identifier: \u0026#39;{{ if .Params.identifier }}{{ trim .Params.identifier \u0026#34;/\u0026#34; }}{{ else }}{{ trim .RelPermalink \u0026#34;/\u0026#34; }}{{ end }}\u0026#39;, url: \u0026#39;{{ if .Params.identifier }}\u0026#34;{{ trim .Site.BaseURL \u0026#34;/\u0026#34; }}{{ .Params.identifier }}\u0026#34;{{ else }}{{ .Permalink }}{{ end }}\u0026#39;, title: \u0026#34;{{ .Title }}\u0026#34;, api: \u0026#34;https://disqus.skk.moe/disqus/\u0026#34;, apikey: \u0026#34;fF9m3DwDSmNQ2g5DIpuWElDaQTx1ofpMSSW8JeKaB2loVBExeInmMbaEGeLs7lOL\u0026#34;, admin: \u0026#34;eallion\u0026#34;, adminLabel: \u0026#34;\u0026#34;, nocomment: \u0026#34;\u0026#34;, }); \u0026lt;/script\u0026gt; {{- else -}} {{- $script := printf ` \u0026lt;script defer src=\u0026#34;https://%s.disqus.com/embed.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ` .Site.Params.comment.disqus.shortname -}} {{- end -}} \u0026lt;noscript\u0026gt; Please enable JavaScript to view the \u0026lt;a href=\u0026#34;https://disqus.com/?ref_noscript\u0026#34;\u0026gt;comments powered by Disqus.\u0026lt;/a\u0026gt; \u0026lt;/noscript\u0026gt; {{- end -}} \u0026lt;!-- Utterances --\u0026gt; {{- if .Site.Params.utterances.enable -}} \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;eallion/blog\u0026#34; issueterm=\u0026#34;url\u0026#34; label=\u0026#34;Comments\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async \u0026gt;\u0026lt;/script\u0026gt; {{- end -}} 更改分类、标签显示中文 content目录下新建categories\\_index.md: 1 2 3 --- title: \u0026#34;分类\u0026#34; --- content目录下新建tags\\_index.md: 1 2 3 --- title: \u0026#34;标签\u0026#34; --- posts目录下新建posts\\_index.md: 1 2 3 --- title: \u0026#34;文章\u0026#34; --- 参考链接 1.hugo-PaperMod 2.ĀKURAI\u0026rsquo;s 3.akuraito/blog ","date":"2021-08-09T00:54:56Z","permalink":"//localhost:1313/archives/hugo-papermod%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/","title":"Hugo Papermod主题配置与使用"},{"content":"PS竖屏图片转横屏方法有多种，这里记录一下：\n方法一： 1.调整图片画布大小。\n2.选中图片空白区域， 单击右键选择填充-内容识别，勾选颜色识别，确定。\n3.利用仿制图章工具作最后的调整。\n方法二： 1.套索工具选择主体，单击右键选择存储选取，取消选区。\n2.编辑-内容识别缩放，保护选择刚才存储的选区，然后点亮人形图标。\n方法三： 裁剪时勾选内容识别。\n","date":"2021-08-08T03:42:17Z","permalink":"//localhost:1313/archives/ps%E7%AB%96%E5%B1%8F%E5%9B%BE%E7%89%87%E8%BD%AC%E6%A8%AA%E5%B1%8F/","title":"PS竖屏图片转横屏"},{"content":"更换登记照底色的方法网上有多种，这里先记录一种，以PS2020为例。\n1.左侧工具栏选择选择工具，然后顶部工具栏先点击选择主体，然后选择选择并遮住，接着右侧属性工具栏勾选净化颜色，确定。\n2.新建一图层，调整背景色，按Ctrl+Delete填充颜色，最后将图片移至最上层。\n3.要更改背景色颜色，只需选择颜色图层，选择合适的颜色填充即可。\n其他方法：\n1、用魔棒工具快速把蓝底框选出来，Ctrl+Shift+I 反选，把人像抠出。\n2、在图层下新建图层，填充白色，这时候你会看到人像的四周还有蓝边，不用担心，我们下一步就来调整。\n3、这里执行，选择——选择并遮住，把净化颜色勾上，用画笔擦拭边缘，擦拭完按确认。\n参考:\n1.ps2020超快速更换证件照背景颜色的\n2.PS如何给证件照换底色？\n","date":"2021-08-06T01:38:02Z","permalink":"//localhost:1313/archives/ps2020%E6%9B%B4%E6%8D%A2%E7%85%A7%E7%89%87%E5%BA%95%E8%89%B2/","title":"Ps2020更换照片底色"},{"content":"创建 upptime 源 进入 upptime – GitHub ，点击 Use this template。 Create a new repository from upptime，注意勾选Include all branches。 进入源设置，下拉到 GitHub Pages 选项，确认 Source 已经设置为 gh-pages 分支。 设置 PAT 新建 Personal access token。 进入 GitHub 账户 Setttings – Developer settings – Personal access token，点击 Generate new token 新建 token，权限勾选 repo 和 workflow 完成后复制 token 进入源的设置页面，选择 Secrets，新建 Secret。 将名称设置为 GH_PAT 并填入 token，保存 配置并运行 upptime 配置 upptime 打开源根目录下的 .upptimerc.yml，编辑以下内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # Change these first owner: iwyang # Your GitHub organization or username, where this repository lives(更改用户名) repo: check # The name of this repository（更改仓库名） sites: - name: Bore\u0026#39;s Notes url: https://bore.vip - name: ConstOwn url: https://blog.juanertu.com - name: 01小丁的个人博客 url: https://tding.top - name: Xu\u0026#39;s Blog url: https://hasaik.com - name: 02知行志 url: https://baozi.fun - name: Takagi url: https://lixingyong.com - name: 03千与千寻 url: https://www.chihiro.org.cn - name: Bill Yang\u0026#39;s Blog url: https://blog.bill.moe - name: Sanarous\u0026#39;s Blog url: https://bestzuo.cn - name: JACK小桔子的小屋 url: https://jackxjz.top - name: 04若只如初见 url: https://joyli.net.cn - name: 05大大的小蜗牛 url: https://eallion.com status-website: # Add your custom domain name, or remove the `cname` line if you don\u0026#39;t have a domain # Uncomment the `baseUrl` line if you don\u0026#39;t have a custom domain and add your repo name there # cname: demo.upptime.js.org （如果没有自己的域名，则注释掉cname，取消注释baseUrl） baseUrl: /check logoUrl: https://raw.githubusercontent.com/upptime/upptime.js.org/master/static/img/icon.svg name: Upptime introTitle: \u0026#34;**Upptime** is the open-source uptime monitor and status page, powered entirely by GitHub.\u0026#34; introMessage: This is a sample status page which uses **real-time** data from our [GitHub repository](https://github.com/upptime/upptime). No server required — just GitHub Actions, Issues, and Pages. [**Get your own for free**](https://github.com/upptime/upptime) navbar: - title: Status href: /check # （修改Status的url为repo的名称） - title: GitHub href: https://github.com/$OWNER/$REPO # Upptime also supports notifications, assigning issues, and more # See https://upptime.js.org/docs/configuration 编辑后 GItHub Actions 会自动更新 upptime 配置信息 如果 upptime 没有成功运行，可以手动执行 GitHub Actions 中的 Setup 工作流。 效果 https://iwyang.github.io/check\nhttps://github.com/iwyang/check\n参考链接 upptime – 利用 Github Actions 查看网站运行状态\nupptime – GitHub\nGetting started\n","date":"2021-08-02T00:05:13Z","permalink":"//localhost:1313/archives/upptime-%E5%88%A9%E7%94%A8github-actions%E6%A3%80%E6%B5%8B%E7%BD%91%E7%AB%99%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81/","title":"upptime-利用Github-Actions检测网站运行状态"},{"content":"第一单元 混合运算 1.什么是脱式计算？脱式计算的格式？\n像5+6×5这样既有加法又有乘法两种运算的算式就是综合算式。在综合算式中为了准确表示先算什么，再算什么，要用到脱式计算。脱式计算的格式：等号写在数字前面，不算的部分注意一定要落下来。\n第二单元 观察物体 1.观察的位置是相对，观察的画面就是相反的。\n第三单元 加与减 1.连续减出两个数等于减出这两个数的和。\n第五单元 周长 1.把一个长方形平均分成两个形状相同、大小相等的小长方形，小长方形的周长是原来长方形周长的一半．（×）\n解析：如图：长方形平均分成两个小长方形后，周长比原来增加了两条原长方形的长或者是宽，所以小长方形的周长等于原来的长方形的周长的一半与一条长（或宽）的和，原题说法错误． 第七单元 年月日 判断某一年是平年还是闰年\n1.看年份后两位数能不能被4整除，能被4整除就是闰年，不能就是平年。\n2.整百年份看年份前两位数能否被4整除。\n","date":"2021-07-29T10:26:19Z","permalink":"//localhost:1313/archives/%E4%B8%89%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8A%E5%86%8C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/","title":"三年级数学上册知识点总结"},{"content":"又换主题了，这回使用的是hugo-theme-stack，无意发现这款主题，正合我意，够简单，最重要的是支持本地搜索，再不用弄哪个Alogia了。\n下载主题\u0026amp;更新主题 下载主题 1 2 git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 更新主题 1 git submodule update --remote 查看主题版本号 1 2 3 4 git show 查看当前版本 ---------------------------------------------------------------- git tag　列出所有版本号 git checkout　+某版本号　(你当前文件夹下的源码会变成这个版本号的源码) config.yaml配置文件baseurl: / languageCode: zh-CN theme: hugo-theme-stack paginate: 10 title: Bore\u0026#39;s Notes # Change it to your Disqus shortname before using # disqusShortname: # GA Tracking ID googleAnalytics: # Theme i18n support # Available values: en, fr, id, ja, ko, pt-br, zh-cn, zh-tw, es, de, nl, it, th, el, uk DefaultContentLanguage: zh-cn # Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko] # This will make .Summary and .WordCount behave correctly for CJK languages. hasCJKLanguage: true permalinks: post: /archives/:slug/ page: /:slug/ # whether to use emoji code enableEmoji: true params: mainSections: - post featuredImageField: image rssFullContent: true favicon: /img/favicon.png footer: since: 2020 customText: dateFormat: published: 2006-01-02 lastUpdated: 2006-01-02 sidebar: emoji: 🍥 subtitle: 博观而约取，厚积而薄发 avatar: enabled: false local: true src: img/avatar.jpg article: math: false toc: true readingTime: false license: enabled: false default: Licensed under CC BY-NC-SA 4.0 edit: enabled: true comments: enabled: true provider: waline disqusjs: shortname: apiUrl: apiKey: admin: adminLabel: utterances: repo: issueTerm: title label: utterances theme: dark-orange remark42: host: site: locale: vssue: platform: owner: repo: clientId: clientSecret: autoCreateIssue: false # Waline client configuration see: https://waline.js.org/en/reference/client.html waline: serverURL: https://your-domain.vercel.app lang: zh-CN visitor: false avatar: mp emoji: - https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo requiredMeta: - nick - mail placeholder: 欢迎评论 locale: admin: 博主 twikoo: envId: https://twikoo-lake.vercel.app region: path: lang: giscus: repo: repoID: category: categoryID: mapping: lightTheme: darkTheme: reactionsEnabled: 1 emitMetadata: 0 gitalk: owner: admin: repo: clientID: clientSecret: cusdis: host: id: widgets: enabled: - search - categories - tag-cloud - archives archives: limit: 10000 tagCloud: limit: 10000 categoriesCloud: limit: 10000 opengraph: twitter: # Your Twitter username site: # Available values: summary, summary_large_image card: summary_large_image defaultImage: opengraph: enabled: false local: false src: colorScheme: # Display toggle toggle: true # Available values: auto, light, dark default: auto imageProcessing: cover: enabled: true content: enabled: true ### Custom menu ### See https://docs.stack.jimmycai.com/configuration/custom-menu.html ### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter menu: main: - identifier: home name: 首页 url: / weight: -100 pre: home params: ### For demonstration purpose, the home link will be open in a new tab newTab: false icon: home # social: # - identifier: github # name: GitHub # url: https://github.com/iwyang # params: # icon: brand-github # - identifier: twitter # name: Twitter # url: https://twitter.com # params: # icon: brand-twitter related: includeNewer: true threshold: 60 toLower: false indices: - name: tags weight: 100 - name: categories weight: 200 markup: goldmark: renderer: ## Set to true if you have HTML content inside Markdown unsafe: true tableOfContents: endLevel: 4 ordered: true startLevel: 2 highlight: noClasses: false archetypes默认模板 1 2 3 4 5 6 7 8 9 10 11 title: \u0026#34;{{ replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: \u0026#34;\u0026#34; description: \u0026#34;\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} draft: false toc: true weight: false image: \u0026#34;\u0026#34; categories: [\u0026#34;\u0026#34;] tags: [\u0026#34;\u0026#34;] 显示右侧工具栏分类目录 参考 https://github.com/CaiJimmy/hugo-theme-stack/issues/169\n最新版主题已默认开启分类目录工具栏\nCreate categories.html in layouts/partials/widget 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;section class=\u0026#34;widget tagCloud\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;widget-icon\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;categories\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;h2 class=\u0026#34;widget-title section-title\u0026#34;\u0026gt;{{ T \u0026#34;widget.categoriesCloud.title\u0026#34; }}\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;tagCloud-tags\u0026#34;\u0026gt; {{ range first .Site.Params.widgets.categoriesCloud.limit .Site.Taxonomies.categories.ByCount }} \u0026lt;a href=\u0026#34;{{ .Page.RelPermalink }}\u0026#34; class=\u0026#34;font_size_{{ .Count }}\u0026#34;\u0026gt; {{ .Page.Title }} \u0026lt;/a\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; 修改 config.yaml 1 2 3 4 5 6 widgets: enabled: - categories categoriesCloud: limit: 20 网站根目录新建\\i18n\\zh-CN.yaml 1 2 3 4 widget: categoriesCloud: title: other: 分类 Download categories.svg paste to assets/icons, from here 注意：可以按需删除图标。\n文章底部添加在 GitHub 上编辑此页 拷贝主题目录/layouts/partials/article/components/footer.html到网站根目录，修改为： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;footer class=\u0026#34;article-footer\u0026#34;\u0026gt; {{ partial \u0026#34;article/components/tags\u0026#34; . }} {{ if and (.Site.Params.article.license.enabled) (not (eq .Params.license false)) }} \u0026lt;section class=\u0026#34;article-copyright\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;copyright\u0026#34; }} \u0026lt;span\u0026gt;{{ default .Site.Params.article.license.default .Params.license | markdownify }}\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{ end }} {{ if and (.Site.Params.article.edit.enabled) (not (eq .Params.edit false)) }} \u0026lt;section class=\u0026#34;article-edit\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;external-link\u0026#34; }} \u0026lt;span\u0026gt;\u0026lt;a style=\u0026#34;color: inherit;\u0026#34; href=\u0026#34;https://github.com/iwyang/iwyang.github.io/edit/develop/content/{{ replace .File.Path \u0026#34;\\\\\u0026#34; \u0026#34;/\u0026#34; }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;在 GitHub 上编辑此页\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{ end }} {{- if ne .Lastmod .Date -}} \u0026lt;section class=\u0026#34;article-lastmod\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;span\u0026gt; {{ T \u0026#34;article.lastUpdatedOn\u0026#34; }} {{ .Lastmod.Format ( or .Site.Params.dateFormat.lastUpdated \u0026#34;Jan 02, 2006 15:04 MST\u0026#34; ) }} \u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{- end -}} \u0026lt;/footer\u0026gt; 编辑config.yaml： 1 2 3 4 5 6 7 8 9 article: math: false toc: true readingTime: true license: enabled: false default: Licensed under CC BY-NC-SA 4.0 edit: enabled: true 以后只要在Frontmatter添加edit: false来关闭。\n拷贝external-link.svg图标到网站根目录/assets/icons下。图标地址：点击直达 自动更新文章最后修改时间 1.在config.yaml里写:\n1 2 3 4 5 frontmatter: lastmod: [\u0026#34;:git\u0026#34;, \u0026#34;lastmod\u0026#34;, \u0026#34;:fileModTime\u0026#34;, \u0026#34;:defalut\u0026#34;] enableGitInfo: true gitRepo: \u0026#34;https://github.com/iwyang/hugo\u0026#34; :git：git 文件提交修改时间 :fileModTime：文件修改时间 lastmod：文章里 lastmod 字段 :defalut：默认时间 config.toml里写：\n[frontmatter] lastmod = [\u0026quot;:git\u0026quot;, \u0026ldquo;lastmod\u0026rdquo;, \u0026ldquo;:fileModTime\u0026rdquo;, \u0026ldquo;:defalut\u0026rdquo;]\nenableGitInfo = true\ngitRepo = \u0026ldquo;https://github.com/iwyang/hugo\"\n2..github/workflows/xx.yml：\nyml 文件中添加 2 行设置当前环境时区\n1 2 3 4 5 6 name: Hugo build and deploy on: push: env: TZ: Asia/Shanghai # 设置当前环境时区 3.gihutb action 里 yaml 上配置\n建构前新增以下配置，主要是 quotePath，默认情况下，文件名包含中文时，git 会使用引号吧文件名括起来，这会导致 action 中无法读取:GitInfo 变量，所以要设置 Disable quotePath\n1 2 3 4 5 6 - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false 使用 checkout 的话 fetch-depth 需要设为 0，depth 默认是为 1，默认只拉取分支最近一次 commit，可能会导致一些文章的 GitInfo 变量无法获取，设为 0 代表拉去所有分支所有提交。\n1 2 uses: actions/checkout@v2 fetch-depth: 0 #设为0 以下是我最终的 yml 配置文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 name: GitHub Page Deploy on: push: branches: - develop env: TZ: Asia/Shanghai # 设置当前环境时区 jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout master uses: actions/checkout@v2.3.4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false - name: Setup Hugo uses: peaceiris/actions-hugo@v2.5.0 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Cache resources # 缓存 resource 文件加快生成速度 uses: actions/cache@v2 with: path: resources # 检查照片文件变化 key: ${{ runner.os }}-hugocache-${{ hashFiles(\u0026#39;content/**/*\u0026#39;) }} restore-keys: ${{ runner.os }}-hugocache- - name: Build Hugo run: hugo -v --gc --minify - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v3.8.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public # cname: - name: Deploy Hugo to Server uses: SamKirkland/FTP-Deploy-Action@4.3.0 with: server: 104.224.191.88 username: admin password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/speak/ 别人：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 name: Hugo build and deploy on: push: env: TZ: Asia/Shanghai # 设置当前环境时区 jobs: Actions-Hugo-Deploy: runs-on: ubuntu-latest steps: - name: Check out repository code uses: actions/checkout@v2 with: submodules: recursive # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: latest extended: true - name: Build Hugo static files run: hugo -v --gc --minify - name: Deploy to Github Pages uses: peaceiris/actions-gh-pages@v3 with: DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} external_repository: Charlie-king/Charlie-king.github.io publish_branch: main publish_dir: ./public - name: NPM install run: npm install - name: Update Algolia index env: ALGOLIA_APP_ID: B6R922P6DD ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }} ALGOLIA_INDEX_NAME: \u0026#39;dev_hugo\u0026#39; ALGOLIA_INDEX_FILE: \u0026#39;./public/index.json\u0026#39; run: npm run algolia 删除文章底部更新于 1 2 3 4 5 \u0026lt;style\u0026gt; .article-footer { display: none; } \u0026lt;/style\u0026gt; 删除相关文章、分类图片，修改相关文章数目 删除相关文章图片 根目录assets/scss/partials/layout/article.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 .related-contents { overflow-x: auto; padding-bottom: 15px; \u0026amp; \u0026gt; .flex { float: left; } article { margin-right: 15px; flex-shrink: 0; overflow: hidden; width: 250px; height: 80px; //改为80 box-shadow: var(--shadow-l2); //加个卡片阴影 .article-title { font-size: 1.4rem; //改为1.4 margin: auto; justify-content: center; //居中 } 删除分类图片 根目录assets/scss/partials/layout/list.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 .subsection-list { margin-bottom: var(--section-separation); overflow-x: auto; .article-list--tile { display: flex; padding-bottom: 15px; article { width: 200px; //改爲200px height: 50px; //改爲50px margin-right: 5px; //改爲5px flex-shrink: 0; box-shadow: var(--shadow-l2); //改个卡片阴影 .article-title { margin: 0; font-size: 1.5rem; //改爲1.5rem，調整字體尺寸 } .article-details { padding: 20px; justify-content: center; //添加justify-content設定，保持字體居中 } } } } 修改相关文章数目 根目录layouts/partials/article/components/related-contents.html\n1 {{ $related := (where (.Site.RegularPages.Related .) \u0026#34;Params.hidden\u0026#34; \u0026#34;!=\u0026#34; true) | first 3 }} //修改数字即可 数字设为0，即关闭相关文章。\n加入字数统计、站点总字数统计 加入字数统计 1.直接用阅读时间改的，图标路径为根目录assets\\icons\n根目录layouts\\partials\\article\\components\\details.html\n1 2 3 4 5 6 7 8 9 {{ if .Site.Params.article.readingTime }} \u0026lt;div\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;pencil\u0026#34; }} \u0026lt;time class=\u0026#34;article-words\u0026#34;\u0026gt; {{ .WordCount }} 字 \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/footer\u0026gt; 2.然后在config.yaml中加入一行，以正确显示中文字符数量\n1 hasCJKLanguage: true 3.config.yaml中确保readingTime: true\n站点总字数统计 1.根目录layouts\\partials\\footer\\footer.html里写上总字数参数\n1 2 3 4 {{$scratch := newScratch}} {{ range (where .Site.Pages \u0026#34;Kind\u0026#34; \u0026#34;page\u0026#34; )}} {{$scratch.Add \u0026#34;total\u0026#34; .WordCount}} {{ end }} 2.根目录layouts\\partials\\footer\\footer.html\n1 2 3 4 5 6 7 \u0026lt;section class=\u0026#34;copyright\u0026#34;\u0026gt; \u0026amp;copy; {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format \u0026#34;2006\u0026#34;))) }} {{ .Site.Params.footer.since }} - {{ end }} {{ now.Format \u0026#34;2006\u0026#34; }} Bore\u0026#39;s Blog\u0026lt;br\u0026gt;共 {{ div ($scratch.Get \u0026#34;total\u0026#34;) 1000.0 | lang.FormatNumber 2 }}k 字 · 共 {{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }}篇文章\u0026lt;/br\u0026gt;\u0026lt;span\u0026gt;\u0026lt;p\u0026gt; \u0026lt;/section\u0026gt; PS：如果加入站点总字数统计，Github Action部署到服务器就会变慢。\n添加友情链接 shortcodes 网站根目录新建文件layouts\\page\\links.html：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 {{ define \u0026#34;body-class\u0026#34; }}article-page keep-sidebar{{ end }} {{ define \u0026#34;main\u0026#34; }} {{ partial \u0026#34;article/article.html\u0026#34; . }} \u0026lt;div class=\u0026#34;article-list--compact links\u0026#34;\u0026gt; {{ $siteResources := resources }} {{ range $i, $link := $.Site.Data.links }} \u0026lt;article\u0026gt; \u0026lt;a href=\u0026#34;{{ $link.website }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;article-title\u0026#34;\u0026gt; {{- $link.title -}} \u0026lt;/h2\u0026gt; \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; {{ with $link.description }} {{ . }} {{ else }} {{ $link.website }} {{ end }} \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; {{ if $link.image }} {{ $image := $siteResources.Get (delimit (slice \u0026#34;link-img/\u0026#34; $link.image) \u0026#34;\u0026#34;) | resources.Fingerprint \u0026#34;md5\u0026#34; }} {{ $imageResized := $image.Resize \u0026#34;120x120\u0026#34; }} \u0026lt;div class=\u0026#34;article-image\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ $imageResized.RelPermalink }}\u0026#34; width=\u0026#34;{{ $imageResized.Width }}\u0026#34; height=\u0026#34;{{ $imageResized.Height }}\u0026#34; loading=\u0026#34;lazy\u0026#34; data-key=\u0026#34;links-{{ $link.website }}\u0026#34; data-hash=\u0026#34;{{ $image.Data.Integrity }}\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ if or (not (isset .Params \u0026#34;comments\u0026#34;)) (eq .Params.comments \u0026#34;true\u0026#34;)}} {{ partial \u0026#34;comments/include\u0026#34; . }} {{ end }} {{ partialCached \u0026#34;footer/footer\u0026#34; . }} {{ partialCached \u0026#34;article/components/photoswipe\u0026#34; . }} {{ end }} 网站根目录新建文件\\layouts\\shortcodes\\link.html：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 {{$URL := .Get 0}} {{ with .Site.GetPage $URL }} \u0026lt;div class=\u0026#34;post-preview\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-preview--meta\u0026#34; style=\u0026#34;width:100%;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-preview--middle\u0026#34;\u0026gt; \u0026lt;h4 class=\u0026#34;post-preview--title\u0026#34;\u0026gt; \u0026lt;a target=\u0026#34;_blank\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/h4\u0026gt; \u0026lt;time class=\u0026#34;post-preview--date\u0026#34;\u0026gt;{{ .Date.Format ( default \u0026#34;2006-01-02\u0026#34;) }}\u0026lt;/time\u0026gt; {{ if .Params.tags }} \u0026lt;small\u0026gt;{{ range .Params.tags }}#{{ . }}\u0026amp;nbsp;{{ end }}\u0026lt;/small\u0026gt; {{ end }} \u0026lt;section style=\u0026#34;max-height:105px;overflow:hidden;\u0026#34; class=\u0026#34;post-preview--excerpt\u0026#34;\u0026gt; {{ .Summary | plainify}} \u0026lt;/section\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 网站图像放在网站根目录\\assets\\link-img\\文件夹下。 网站根目录新建文件\\data\\links.json： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 [ { \u0026#34;title\u0026#34;: \u0026#34;Upptime\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://iwyang.github.io/check\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;upptime.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;利用Github Actions查看网站运行状态。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;ConstOwn\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://blog.juanertu.com\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;constown.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;能与你一起成长，我荣幸之至。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;小丁的个人博客\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://tding.top\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;ding.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;世间所有的相遇，都是久别重逢。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;Xu\u0026#39;s Blog\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://hasaik.com\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;xu.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;简单不先于复杂，而是在复杂之后。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;知行志\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://baozi.fun\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;zhi.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Halo Theme Xue作者。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;Takagi\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://lixingyong.com\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;takagi.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Takagi是啥呀？？当然是最喜欢的Takagi了吖ヾ(≧∇≦*)ゝ\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;千与千寻\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://www.chihiro.org.cn\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;qian.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;所以，看不到光，算是不幸吗？需要光才是真正的不幸吧。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;Bill Yang\u0026#39;s Blog\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://blog.bill.moe\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;bill.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;这辈子都不可能更新的 。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;Sanarous\u0026#39;s Blog\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://bestzuo.cn\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;sanarous.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Dream it possible, make it possible\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;JACK小桔子的小屋\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://jackxjz.top/\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;jack.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;一个分享科技/日常的网站。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;若只如初见\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://joyli.net.cn/\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;ruo.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;世间所有的相遇，都是久别重逢。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;大大的小蜗牛\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://eallion.com/\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;eallion.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;机会总是垂青于有准备的人。\u0026#34; } ] 5.调整布局，设置友情链接为双栏：\n修改根目录/assets/scss/custom.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //友情链接双栏 @media (min-width: 1024px) { .article-list--compact.links { display: grid; grid-template-columns: 1fr 1fr; background: none; box-shadow: none; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; border-radius: 10px; \u0026amp;:nth-child(odd) { margin-right: 8px; } } } } 添加音乐短代码 1.网站根目录新建文件layouts\\shortcodes\\music.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 {{- $scratch := .Page.Scratch.Get \u0026#34;scratch\u0026#34; -}} \u0026lt;!-- require APlayer --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;.dark-theme .aplayer{background:#212121}.dark-theme .aplayer.aplayer-withlist .aplayer-info{border-bottom-color:#5c5c5c}.dark-theme .aplayer.aplayer-fixed .aplayer-list{border-color:#5c5c5c}.dark-theme .aplayer .aplayer-body{background-color:#212121}.dark-theme .aplayer .aplayer-info{border-top-color:#212121}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-title{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-author{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time{color:#eee}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#eee}.dark-theme .aplayer .aplayer-list{background-color:#212121}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb{background-color:#999}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#bbb}.dark-theme .aplayer .aplayer-list li{color:#fff;border-top-color:#666}.dark-theme .aplayer .aplayer-list li:hover{background:#4e4e4e}.dark-theme .aplayer .aplayer-list li.aplayer-list-light{background:#6c6c6c}.dark-theme .aplayer .aplayer-list li .aplayer-list-index{color:#ddd}.dark-theme .aplayer .aplayer-list li .aplayer-list-author{color:#ddd}.dark-theme .aplayer .aplayer-lrc{text-shadow:-1px -1px 0 #666}.dark-theme .aplayer .aplayer-lrc:before{background:-moz-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:-webkit-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:linear-gradient(to bottom, #212121 0%, rgba(33,33,33,0) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr=\u0026#39;#212121\u0026#39;, endColorstr=\u0026#39;#00212121\u0026#39;,GradientType=0 )}.dark-theme .aplayer .aplayer-lrc:after{background:-moz-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:-webkit-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:linear-gradient(to bottom, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr=\u0026#39;#00212121\u0026#39;, endColorstr=\u0026#39;#cc212121\u0026#39;,GradientType=0 )}.dark-theme .aplayer .aplayer-lrc p{color:#fff}.dark-theme .aplayer .aplayer-miniswitcher{background:#484848}.dark-theme .aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#eee}\u0026lt;/style\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- require MetingJS --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- if .IsNamedParams -}} {{- if .Get \u0026#34;url\u0026#34; -}} \u0026lt;meting-js url=\u0026#34;{{ .Get `url` }}\u0026#34; name=\u0026#34;{{ .Get `name` }}\u0026#34; artist=\u0026#34;{{ .Get `artist` }}\u0026#34; cover=\u0026#34;{{ .Get `cover` }}\u0026#34; theme=\u0026#34;{{ .Get `theme` | default `#2980b9` }}\u0026#34; {{- with .Get \u0026#34;fixed\u0026#34; }} fixed=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mini\u0026#34; }} mini=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;autoplay\u0026#34; }} autoplay=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;volume\u0026#34; }} volume=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mutex\u0026#34; }} mutex=\u0026#34;{{ . }}\u0026#34;{{ end -}} \u0026gt;\u0026lt;/meting-js\u0026gt; {{- else if .Get \u0026#34;auto\u0026#34; -}} \u0026lt;meting-js auto=\u0026#34;{{ .Get `auto` }}\u0026#34; theme=\u0026#34;{{ .Get `theme` | default `#2980b9` }}\u0026#34; {{- with .Get \u0026#34;fixed\u0026#34; }} fixed=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mini\u0026#34; }} mini=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;autoplay\u0026#34; }} autoplay=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;loop\u0026#34; }} loop=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;order\u0026#34; }} order=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;volume\u0026#34; }} volume=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mutex\u0026#34; }} mutex=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;list-folded\u0026#34; }} list-folded=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;list-max-height\u0026#34; }} list-max-height=\u0026#34;{{ . }}\u0026#34;{{ end -}} \u0026gt;\u0026lt;/meting-js\u0026gt; {{- else -}} \u0026lt;meting-js server=\u0026#34;{{ .Get `server` }}\u0026#34; type=\u0026#34;{{ .Get `type` }}\u0026#34; id=\u0026#34;{{ .Get `id` }}\u0026#34; theme=\u0026#34;{{ .Get `theme` | default `#2980b9` }}\u0026#34; {{- with .Get \u0026#34;fixed\u0026#34; }} fixed=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mini\u0026#34; }} mini=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;autoplay\u0026#34; }} autoplay=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;loop\u0026#34; }} loop=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;order\u0026#34; }} order=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;volume\u0026#34; }} volume=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mutex\u0026#34; }} mutex=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;list-folded\u0026#34; }} list-folded=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;list-max-height\u0026#34; }} list-max-height=\u0026#34;{{ . }}\u0026#34;{{ end -}} \u0026gt;\u0026lt;/meting-js\u0026gt; {{- end -}} {{- else if strings.HasSuffix (.Get 0) \u0026#34;http\u0026#34; -}} \u0026lt;meting-js auto=\u0026#34;{{ .Get 0 }}\u0026#34; theme=\u0026#34;#2980b9\u0026#34;\u0026gt;\u0026lt;/meting-js\u0026gt; {{- else -}} \u0026lt;meting-js server=\u0026#34;{{ .Get 0 }}\u0026#34; type=\u0026#34;{{ .Get 1 }}\u0026#34; id=\u0026#34;{{ .Get 2 }}\u0026#34; theme=\u0026#34;#2980b9\u0026#34;\u0026gt;\u0026lt;/meting-js\u0026gt; {{- end -}} {{- $scratch.Set \u0026#34;music\u0026#34; true -}} 2.添加歌曲列表（注意：去掉注释/* */）\n1 {{/* \u0026lt; music auto=\u0026#34;https://music.163.com/#/playlist?id=60198\u0026#34;\u0026gt; */}} 3.添加单曲（注意：去掉注释/* */）\n1 2 3 {{/* \u0026lt; music server=\u0026#34;netease\u0026#34; type=\u0026#34;song\u0026#34; id=\u0026#34;1868553\u0026#34; \u0026gt; */}} 或者 {{/* \u0026lt; music netease song 1868553 \u0026gt; */}} 4.其它参数\nmusic shortcode 有一些可以应用于以上三种方式的其它命名参数:\nautoplay [可选]\n是否自动播放音乐, 默认值是 false.\n更改分类、标签、页面显示中文 content目录下新建categories\\_index.md: 1 2 3 --- title: \u0026#34;分类\u0026#34; --- content目录下新建tags\\_index.md: 1 2 3 --- title: \u0026#34;标签\u0026#34; --- 根目录\\i18n\\zh-CN.yaml输入： 1 2 3 4 list: page: one: \u0026#34;{{ .Count }} 页面\u0026#34; other: \u0026#34;{{ .Count }} 页面\u0026#34; 最终根目录\\i18n\\zh-CN.yaml\n1 2 3 4 5 6 7 8 9 list: page: one: \u0026#34;{{ .Count }} 页面\u0026#34; other: \u0026#34;{{ .Count }} 页面\u0026#34; widget: categoriesCloud: title: other: 分类 附：使用Git Submodule管理Hugo主题 如果克隆库的时候要初始化子模块，请加上 --recursive 参数，如： 1 git clone -b develop git@github.com:iwyang/iwyang.github.io.git blog --recursive 如果已经克隆了主库但没初始化子模块，则用： 1 git submodule update --init --recursive 如果已经克隆并初始化子模块，而需要从子模块的源更新这个子模块，则： 1 git submodule update --recursive --remote 更新之后主库的 git 差异中会显示新的 SHA 码，把这个差异选中提交即可。\n其他命令：在主仓库更新所有子模块：git submodule foreach git pull origin master 附：hugo注释 1 {{/* comment */}} 参考链接 Hugo 主题 Stack文档\nAdding the widget tag-cloud for \u0026ldquo;categories\u0026rdquo;, on the right content region on Homepage\nvinceying/Vince-blog-https://i.vince.pub/\nhugo音乐短代码\n主题文档 - 扩展 Shortcodes-music\nHugo模板的基本语法-注释\nHugo | 第三篇 Stack 主题装修记录，堂堂再临！\n自动添加博客页面更新日期\nHugo | 看中 Stack 主题的归档功能，搬家并做修改\nhugo github action|vecel 部署后文章更新时间异常修复\n","date":"2021-07-24T01:15:26Z","permalink":"//localhost:1313/archives/hugo-stack%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/","title":"Hugo Stack主题配置与使用"},{"content":"北师大三年级数学上册优质课，来源于一师一优课，基本上都是部级优课，点击前往bilibili可选集观看。\n","date":"2021-07-09T12:57:25Z","permalink":"//localhost:1313/archives/%E5%8C%97%E5%B8%88%E5%A4%A7%E4%B8%89%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8A%E5%86%8C%E4%BC%98%E8%B4%A8%E8%AF%BE/","title":"北师大三年级数学上册优质课"},{"content":"1.按住Alt键不放， 单击快捷工具栏里的工具， 可快速切换同一个菜单栏上的子工具。（如把横排文字切换成竖排）\n2.图层属性快捷键：中心点（A）、位移（P）、缩放（S）、旋转（R）、不透明度（T）、查看所有关键帧（U）、查看上一关键帧、下一关键帧（J/K）、\n3.快捷键（B、N）控制预览长度（控制出点入点）\n4.切割素材：Ctrl+Shift+D，裁剪素材：Alt+[/]，逐帧调节时间线：PgUp/PgDn\n5.按住Shift+大键盘数字键，标记帧。此后可以按数字键来切换帧。\n","date":"2021-06-06T02:02:25Z","permalink":"//localhost:1313/archives/ae%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"AE学习笔记"},{"content":"用pr做了一个电子相册，参考： 使用 Premiere 把照片变成唯美动画效果。\n","date":"2021-06-02T14:27:25Z","permalink":"//localhost:1313/archives/%E7%94%A8pr%E5%88%B6%E4%BD%9C2021%E5%B9%B4%E6%98%A5%E5%AD%A3%E8%BF%90%E5%8A%A8%E4%BC%9A%E7%94%B5%E5%AD%90%E7%9B%B8%E5%86%8C/","title":"用pr制作《2021年春季运动会》电子相册"},{"content":"一、 教学目标：\n1．借助数线和计数器进一步探索并掌握三位数连续退位减法的计算方法，经历与他人交流计算方法的过程，理解多位数减法的计算道理，并能正确计算。\n2．让学生在解决问题的过程中，能独立地进行简单的、有条理的思考，体验数学与日常生活的密切联系，增强应用数学的意识。\n二、教学重点：掌握三位数减三位数连续退位减法的计算方法，初步形成一定的计算能力。\n三、教学难点：经历探索三位数减三位数退位减法计算方法的过程，提高学生在自主探究过程中，解决实际问题的能力。\n四、教学课时：1课时\n五、教学手段：\n六、教学过程：\n（一）创设情境，导入新课\n1.猜谜：大脑袋，长尾巴，儿时无腿水中游。\n后腿伸，前腿到，游来游去找妈妈。 （答案：小蝌蚪）\n2.你们听过“小蝌蚪找妈妈”的故事吗？那么你们猜一猜是不是所有的小蝌蚪都会变成青蛙？事实上在100只小蝌蚪中，只有20只能变成青蛙。所以希望大家今后遇到小蝌蚪，要爱护它。那么今天我们这节课就一起来学习有关小蝌蚪的成长中的数学知识。\n（二）自主探究，学习新知\n1.出示书上表格，提问：说一说你能从中得到那些数学信息。\n2.提问：从这些数学信息中，你能提出哪些数学问题。\n根据这些数学信息可以提出很多数学问题，今天我们就主要研究这两个数学问题：\n（1）东池塘有多少只蝌蚪没有变成青蛙？\n（2）西池塘有多少只蝌蚪没有变成青蛙？\n3．东池塘有多少只蝌蚪没有变成青蛙？\n（1）先独立列出算式；（412-89）\n（2）尝试用自己喜欢的方法获得计算结果；（412-89=323（只））\n（3）交流计算方法；（数线、拨计数器、竖式等）\n4.西池塘有多少只蝌蚪没有变成青蛙？\n（1）先独立列出算式；（514-126）\n（2）尝试用自己喜欢的方法获得计算结果；（514-126=388（只）\n（3）交流计算方法；（数线、拨计数器、竖式等）\n5.他们做得对吗？和同伴说一说。（左边的题是数位没有对齐，右边题是忘了退位）\n6..小结：竖式计算三位数连续退位减法时，要注意什么？（要注意相同数位对齐，从个位算起，哪一位不够减，要向前一位借1当10，计算前一位时不要忘记先减去被借走的1。）\n（三）巩固应用\n独立完成“练一练”的第1、2题。\n（四）回顾整理\n通过这节课的学习，你学到了什么？\n七、板书设计\n412-89=323（只） 514-126=298（只）\n","date":"2021-04-23T14:49:25Z","permalink":"//localhost:1313/archives/%E4%BA%8C%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E7%AC%AC%E4%BA%94%E5%8D%95%E5%85%83%E5%B0%8F%E8%9D%8C%E8%9A%AA%E7%9A%84%E6%88%90%E9%95%BF%E6%95%99%E5%AD%A6%E8%AE%BE%E8%AE%A1/","title":"二年级数学下册第五单元《小蝌蚪的成长》教学设计"},{"content":"这是本学期我第二次上公开课，本次公开课的课题是《小蝌蚪的成长》，这是一节计算教学课。首先我用猜谜语的方式来导入新课，吸引了学生的注意力，进而引导学生以后遇到小蝌蚪要保护它，树立了学生的环保意识。在探究三位数减三位数连续退位减法的计算方法时，我充分鼓励学生大胆表达自己的计算方法。在拨计数器这一块，为了解决传统计数器不能“借一当十”问题，我利用希沃白板的“克隆与拖拽”功能来形象地给学生演示了“借一当十”的过程及原理，帮助学生更好地理解算法。纵观本节公开课，我觉得存在以下问题：\n在总结算法的过程中，应该多鼓励学生自己说，而不是自己一味去说。\n课堂活动组织不好，其实我一直想给他们分几个小组，从而在课堂上多开展分小组活动，但这个一直没有实施起来。\n时间没有把握好，在前面有些地方所花的时间过多，导致后面缺乏练习，这个以后要改进。\n","date":"2021-04-23T12:40:43Z","permalink":"//localhost:1313/archives/%E4%BA%8C%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E7%AC%AC%E4%BA%94%E5%8D%95%E5%85%83%E5%B0%8F%E8%9D%8C%E8%9A%AA%E7%9A%84%E6%88%90%E9%95%BF%E6%95%99%E5%AD%A6%E5%8F%8D%E6%80%9D/","title":"二年级数学下册第五单元《小蝌蚪的成长》教学反思"},{"content":"本次公开课课题是《铅笔有多长》，上课开始我带领学生复习了我们已经学习过的长度单位，以及如何用尺子测量物体的长度，使学生能够快速地进入学习状态。之后我设计了三个活动：认识分米；认识毫米；米、分米、厘米、毫米之间的关系来展开今天的新课学习。在课上我充分利用希沃电子白板，通过希沃视频展台让学生上来亲自演示测量铅笔的过程，增强了学生的动手操作能力。此外由于缺乏米尺等教具，我充分利用多媒体视频，向学生形象直观展示了米尺有关的知识以及如何用尺子测量硬币和银行卡的过程。纵观本次公开课主要存在以下问题：\n练一练第2题，有学生测量结果是1厘米1毫米，而有学生测量结果是1厘米2毫米。我没有具体说明产生误差的原因。\n课堂组织能力有些欠缺，有个别学生测量测量就玩起尺子了，我没有及时进行干预加以引导。\n缺乏对后进生的关注，个别学生测量出现问题，没有能够及时加以指导。\n","date":"2021-03-31T11:07:16Z","permalink":"//localhost:1313/archives/%E4%BA%8C%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E7%AC%AC%E5%9B%9B%E5%8D%95%E5%85%83%E9%93%85%E7%AC%94%E6%9C%89%E5%A4%9A%E9%95%BF%E6%95%99%E5%AD%A6%E5%8F%8D%E6%80%9D/","title":"二年级数学下册第四单元《铅笔有多长》教学反思"},{"content":"一、 教学目标：\n1、通过测量铅笔的长度的活动知道1分米、1毫米有多长，发展学生空间观念和动手操作能力。\n2、通过“估一估”、“量一量”等活动，发展学生的估测能力。\n3、掌握米、分米、厘米和毫米之间的关系，能进行简单的单位换算。\n二、教学重点：认识1分米和1毫米有多长，掌握米、分米、厘米和毫米之间的关系，能进行简单的单位换算。\n三、教学难点：会用分米、毫米表示物体的长度\n四、教学课时：1课时\n五、教学手段：\n六、教学过程：\n（一）复习旧知\n1.我们已经学习了哪两个长度单位？\n2.怎样用尺子测量物体的长度吗？\n3.在括号里填上合适的单位\n（二）探究新知\n活动一：认识分米\n1、认识分米\n师：请同学们先估计一下，这支铅笔有多长？\n生：4cm、9cm、12cm \u0026hellip;\u0026hellip;\n师：那么这支笔到底有多长呢？我们怎样才能知道呢？\n生：用尺子量\n师：测量时，需要注意什么呢？\n生：不能把尺子斜着量；\n铅笔的一端和0刻度对齐，看另一端和刻度几对齐，就读作几厘米。\n师：真聪明，你手中绿色纸条的长度就是这支铅笔的长度，那同学们就赶快拿出尺量一量吧！\n生：10cm\n师：刚才我们量这支铅笔是10厘米，10厘米也可以用一个新的长度单位来表示，那就是1分米（板书），也就要说1分米=10厘米，分米用字母dm表示，也就是1dm=10cm（齐读）\n2、找出生活中1分米的物品\n一拃长约1分米；插座宽度约1分米；字典宽度约1分米\n活动二：认识毫米\n1、认识毫米\n师：估计这支铅笔的长度？（4cm、5cm、6cm）你手中红色纸条的长度正好是这支铅笔的长度，请同学们量一量它有多长？\n（生动手量）汇报：比6cm多2个小格。\n师：用厘米做单位量物体的长度有时不是整厘米数，因而得不到准确的结果，就需要一个比厘米还要小的单位“毫米”那么1毫米有多长，它与厘米之间有什么关系？\n2、厘米与毫米之间的关系\n（1）尺子上1厘米有10个小格\n（2）尺子上1个小格就是1毫米，毫米用字母mm表示。\n（3）1厘米=10毫米 1cm=10mm\n3、生活中哪些物体的厚度大约是1毫米？\n硬币、银行卡\n活动三：米、分米、厘米、毫米之间的关系\n1、在尺子上找出1mm、1cm、1dm，填一填，想一想。\n师：在尺子上找一找多少毫米是1厘米？多少厘米是1分米？多少分米是1米？\n2、想一想、填一填。\n师：让学生独立完成，再说是怎样想的？\n（三）练习巩固\n（四）课堂小结\n今天我们学习了两个新的长度单位，分别是—分米和毫米，希望在日常生活中能灵活应用它们。\n七、板书设计\n铅笔有多长\n1分米=10厘米\n1dm=10cm\n1厘米=10毫米\n1cm=1mm\n","date":"2021-03-30T03:03:25Z","permalink":"//localhost:1313/archives/%E4%BA%8C%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E7%AC%AC%E5%9B%9B%E5%8D%95%E5%85%83%E9%93%85%E7%AC%94%E6%9C%89%E5%A4%9A%E9%95%BF%E6%95%99%E5%AD%A6%E8%AE%BE%E8%AE%A1/","title":"二年级数学下册第四单元《铅笔有多长》教学设计"},{"content":"第一单元除法 除法竖式四步：一商、二乘、三减、四比。\n第二单元方向与位置 1.早晨上学，迎着太阳走，你的前面是东，后面是西，左边是北，右边是南。\n2.我们看到的红旗是迎风飘扬的，如果刮北风，红旗会向（南）面飘扬。\n解析：北风是从背面吹来的风，国旗应该是向风的反方向飘扬。\n3.旗杆的影子在西面，那么太阳在（东）面。\n解析：影子的方向总是和太阳的方向相反。\n4.树叶茂密的一面是南面,稀疏的一面是北面\n第三单元 生活中的大数 1.一箱苹果不到40个，5个5个地数还多3个，6个6个地数还多3个，这箱苹果有第三个？\n解析：\n方法1，5个5个数：8，13，18，23，28，33，38\n6个6个数：9，15，21，27，33，39\n方法2，先不考虑多的3个，刚好数完。即是5的倍数又是6的倍数 6×5=30，多3个：30+3=33（个）\n方法3，最小公倍数\n第六单元 认识图形 借助三角板画直角\n（1）先画一个点作为顶点。\n（2）再从顶点出发画一条直直的线。\n（3）使三角板上的直角顶点与这个点重合，一条直角边与这条直直的线重合，再从这个点出发沿三角板上的另一条直角边画一条直直的线。\n（4）最后标出直角符号。\n第七单元 时、分、秒 1.求经过多长时间\n方法一：借助钟面数格子\n方法二：画线段图分段计算\n方法三：结束时刻—开始时刻（竖式：如果“分钟”不够减，就要向“时”借，借1小时变成60分钟再减。）\n参考链接 易错题，5个为一组还余3个，6个为一组也余3个，共有几个苹果\n","date":"2021-03-27T13:12:25Z","permalink":"//localhost:1313/archives/%E4%BA%8C%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/","title":"二年级数学下册知识点总结"},{"content":"希沃白板5 播放PPT时，如果PPT大小与屏幕不兼容，长按“设置”键可快速调整使其适应屏幕大小。 翻页按钮位于左右下角，点击数字预览。 桌面两侧悬浮按钮（快速调出白板、笔、半屏等） 手背、手心快速调出板擦。 选择几何图形后，双击屏幕可快速画出图形。出现红点是正方形（正方体）。 蒙层的使用（刮刮乐） 要实现以上效果，切记首先要画两个矩形，然后双击输入文字，将需要设置蒙层这一形状置于顶层。千万不要先输入两个文本框，这样无法形成遮挡效果。\n二维码分享课件。\n导入PPT按钮在“云课件”最低端，如果扩展名是.ppt仅以背景形式导入，所以.ppt格式要转化为.pptx再导入。\n超链接可以快速调出授课工具、网盘存储常用的文件，超链接网页地址可以设为本地目录，超链接切换到公众号文章。\n如果背景图片使文字显示不清，可添加一个白色圆角矩形的形状，将其置于底层，然后调整其透明度。\n圆柱高矮的变化： 先画一个圆柱，再画一个能与圆柱底重合的椭圆，填充为白色，边框为黑色。再画一个填充和边框都是白色的长方形，接着将椭圆调整到合适位置后置顶层，最后将椭圆和长方形组合。\n课堂活动（超级分类）隐藏文字：（1）文字透明度设置为100%（2）字号调为1\n色差的应用：将文字颜色设置成背景相同的颜色，可起到“隐藏文字”的效果；拉到另外一色块即可呈现。（注意图层之间的顺序，色块应该置于底层）\n希沃白板5的圆规可以自动生成半径，授课时只要拖拽出圆规，就可以给学生演示圆有无数条半径。\n给思维导图节点添加注释后，展开注释可以拖动。\n画角：先用几何工具线段画一条线，然后在属性工具栏点击辅助线，从线段的一个端点出发，画出另外一条线，最后鼠标移到角的顶点可标记角的度数。(在授课端可以选择角，然后调整角的度数。)\n硬件相关 视频展台对比讲评。（要先拍照） 希沃智能笔：现将笔头USB接头插入白板USB接口，然后依次点击“希沃管家—智能笔—智能笔配对” 重装系统： 方法一（利用出厂备份的系统还原）：切换到安装系统—设备信息—连续点击Android版本，直到出现N图片—出现N图片后点击侧边的返回按钮—然后连续点击内核版本—然后在左上角可以看到一个电视复位，点击电视复位确认就可以了。（问“希沃”公众号）\n方法二（PE）：开机连续按F7（遥控器上），出现菜单后选择U盘就可以了。\n希沃课堂助手 如果使用PPT授课，使用希沃课堂助手更加方便。\n希沃授课助手 使用授课助手时，必须使平板和手机连接同一个局域网，如果教室没有wifi，则利用白板创建一个热点，手机再连接此wifi热点。 (希沃白板5 APP已经可以完全取代授课助手了。)\n数学画板 备课端，依次打开学科工具—数学画板—我的画板—自行创作，可自己制作画板。（只有在备课端才可以制作画板，授课端是不行的） 怎样标记角：选择绘图|标注工具，将绘图|标注工具移至角的顶点，鼠标后面会出现一个角的符号，按住鼠标左键可拖动角。右侧可改变标记的样式。（除了标记角，绘图|标注工具还可以标注线）\n怎样测量角：接上一步先要标记角，然后选择角的符号，鼠标右键选择测量—标注角。\n文本|命名工具可以插入文本，选择此工具直接点击点或者线段即可给点或者线段命名。\n智能画笔工具：根据已知图形对象，智能绘制与已知图形相关图形功能（如交点，相等线段，平行，垂直等， 圆的切点、切线）\n","date":"2021-03-22T15:54:25Z","permalink":"//localhost:1313/archives/%E5%B8%8C%E6%B2%83%E7%94%B5%E5%AD%90%E7%99%BD%E6%9D%BF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"希沃电子白板学习笔记"},{"content":" 1.下载抖音视频 方法：前往 dy114短视频解析下载在线小工具，输入你的小视频分享链接地址，下载视频\nps：该小工具支持解析下载目前主流的抖音、快手、微博、微视、皮皮虾、皮皮搞笑、火山小视频、最右、西瓜视频、今日头条、秒拍小视频，而且是无水印下载原版高清视频哦。值得大家收藏。\n2.下载视频音频提取工具 方法：电脑上下载按照QQ音影软件，软件地址：https://player.qq.com/\n3.提取视频中的背景音乐与歌曲 方法：用安装好的软件打开你下载好的抖音等短视频，点击右下角的“音影工具箱”，选择“转码压缩”，格式选择为“音频”，设置好提取的音频保存地址，即可提取获取视频的歌曲、背景音和独白。\n操作截图提示如下：\n（1）点击右下角的“音影工具箱”\n（2）选择“转码压缩”\n（3）设置格式，提取视频中的歌曲、背景音影、对白等音频。\n参考链接：快手抖音视频中的背景音乐怎么提取下载\n","date":"2021-01-16T14:28:25Z","permalink":"//localhost:1313/archives/%E5%BF%AB%E6%89%8B%E6%8A%96%E9%9F%B3%E8%A7%86%E9%A2%91%E4%B8%AD%E7%9A%84%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E6%80%8E%E4%B9%88%E6%8F%90%E5%8F%96%E4%B8%8B%E8%BD%BD/","title":"快手抖音视频中的背景音乐怎么提取下载"},{"content":"人民币计算 10元-2元6角=7元4角\n解析：将10元里拿出1元当作10角，也就是将10元看成9元10角。然后就元减元，角减角。\n5元6角+3元7角=9元3角\n解析：满10角要进1元，直接写成竖式比较简单。\n6元2角-2元6角=3元6角\n解析：写成竖式比较简单。\n画线段 问题：画线段，端点是用小圆点还是小竖线？\n答：其实，画线段用小圆点和小竖线都可以。\n难题 （1）一根铁丝绕瓶子一圈多12厘米，绕瓶子两圈多4厘米，这根铁丝有多长？\n解析：绕一圈多12cm，绕两圈多4cm。 则一圈长度为12-4=8cm 铁丝长度为8+12=20cm 或8x2+4=20cm\n（2）有一堆积木，比60多，比70少，如果这堆积木分给一些小朋友，每人分得的块数和小朋友的人数一样多。想一想，小朋友有多少人？积木有多少块？\n解析：这道数学题先给出了一个数字范围，积木的数量在60与70之间，具体的数字呢，不知道，不 过，要注意后面一句话:如果把这堆积木分给一些小朋友，每人分得的块数和小朋友的人数一 样多。\n由这句条件，可以分析得出，有几个人，每个人就有相同的几块，假设现在要求积木的总数， 就可以把这个相同的数进行相加，而求几个相同的加数是几，可以运用乘法来计算，那么，有 哪个数和自己相乘，得出的积在60与70之间呢?\n聪明的小学生马上就会在脑海当中进行回顾和搜索，开始联想，七七四十九，八八六十四，九 九八十一，在这其中，只有八八六十四符合条件，得数在60与70之间!\n","date":"2020-11-06T15:04:25Z","permalink":"//localhost:1313/archives/%E4%BA%8C%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8A%E5%86%8C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/","title":"二年级数学上册知识点总结"},{"content":"北师大二年级数学下册优质课，来源于一师一优课，基本上都是部级优课，点击前往bilibili可选集观看。\n","date":"2020-09-06T07:25:25Z","permalink":"//localhost:1313/archives/%E5%8C%97%E5%B8%88%E5%A4%A7%E4%BA%8C%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E4%BC%98%E8%B4%A8%E8%AF%BE/","title":"北师大二年级数学下册优质课"},{"content":"创建重命名动作 首先打开任意一张图片，然后创建一个新的动作，接着就是记录动作：可以先调整图片的尺寸（如把1080P图片改成720P），然后依次点击文件—存储为将图片保存在文件夹里。完成后点击停止记录动作。\n批量重命名图片 依次点击文件—自动—批处理，打开批处理窗口。接着按以下操作：\n选择刚才的动作。 选择源文件夹。（图片文件夹） 选择批处理后图片存放位置。（选择上面图片存放文件夹即可） 勾选覆盖动作中的\u0026quot;存储为\u0026quot;命令。 选择重命名格式。 点击确定，开始执行批处理动作。 批量压缩图片 在上一步保存图片时其实可以适当调整图片大小，如果对图片大小还是不满意的话。可接上一步批量压缩图片。先打开一张图片，然后记录动作：依次点击文件—导出—存储为Web所有格式（旧版），然后调整大小后保存，完成后点击停止记录动作。接着批量压缩图片可以参考上面的操作。\n总结 之所以不把两个动作合在一起，直接在导出图片时选择—存储为Web所有格式（旧版），是因为如果这样的话，最后图片不能重命名了，不知问题出在哪里，所以干脆就分两步进行了，如果不是对图片大小有过于苛刻的要求的话，只进行第一步就行了。\n​\n","date":"2020-08-11T01:59:25Z","permalink":"//localhost:1313/archives/ps%E6%89%B9%E9%87%8F%E5%8E%8B%E7%BC%A9%E9%87%8D%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87/","title":"PS批量压缩\u0026重命名图片"},{"content":"更改时区 如果你不知道服务器当前时间，可以使用下面的命令，查看当前时间：\n1 date -R 修改当前时区为上海：\n1 sudo timedatectl set-timezone Asia/Shanghai 再次不带任何选项参数调用 timedatectl 命令，打印系统当前设置的时区即可：\n1 timedatectl 查看定时任务 1 crontab -l 编辑定时任务 1 crontab -e 第一个*是分钟\n第二个*是小时\n第三个*是日期\n第四个*是月份\n第五个*是星期(0-6)\n例如：每个星期一凌晨3点自动重启\n1 0 3 * * 1 /sbin/reboot 使用实例 每天，每月，每年 定时启动:\n1 2 3 4 5 6 7 8 9 10 11 每五分钟执行 */5 * * * * 每小时执行 0 * * * * 每天执行 0 0 * * * 每周执行 0 0 * * 0 每月执行 0 0 1 * * 每年执行 0 0 1 1 * crontab时间举例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 # 每天早上6点 0 6 * * * echo \u0026#34;Good morning.\u0026#34; \u0026gt;\u0026gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。 # 每两个小时 0 */2 * * * echo \u0026#34;Have a break now.\u0026#34; \u0026gt;\u0026gt; /tmp/test.txt # 晚上11点到早上8点之间每两个小时和早上八点 0 23-7/2，8 * * * echo \u0026#34;Have a good dream\u0026#34; \u0026gt;\u0026gt; /tmp/test.txt # 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 0 11 4 * 1-3 command line # 1月1日早上4点 0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ # 每小时（第一分钟）执行/etc/cron.hourly内的脚本 01 * * * * root run-parts /etc/cron.hourly # 每天（凌晨4：02）执行/etc/cron.daily内的脚本 02 4 * * * root run-parts /etc/cron.daily # 每星期（周日凌晨4：22）执行/etc/cron.weekly内的脚本 22 4 * * 0 root run-parts /etc/cron.weekly # 每月（1号凌晨4：42）去执行/etc/cron.monthly内的脚本 42 4 1 * * root run-parts /etc/cron.monthly # 注意: \u0026#34;run-parts\u0026#34;这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 # 每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 5，15，25，35，45，55 16，17，18 * * * command # 每周一，三，五的下午3：00系统进入维护状态，重新启动系统。 00 15 * *1，3，5 shutdown -r +5 # 每小时的10分，40分执行用户目录下的innd/bbslin这个指令： 10，40 * * * * innd/bbslink # 每小时的1分执行用户目录下的bin/account这个指令： 1 * * * * bin/account # 每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： 203 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st） # 每1分钟执行一次myCommand * * * * * myCommand # 每小时的第3和第15分钟执行 3,15 * * * * myCommand # 在上午8点到11点的第3和第15分钟执行 3,15 8-11 * * * myCommand # 每隔两天的上午8点到11点的第3和第15分钟执行 3,15 8-11 */2 * * myCommand # 每周一上午8点到11点的第3和第15分钟执行 3,15 8-11 * * 1 myCommand # 每晚的21:30重启smb 30 21 * * * /etc/init.d/smb restart # 每月1、10、22日的4 : 45重启smb 45 4 1,10,22 * * /etc/init.d/smb restart # 每周六、周日的1 : 10重启smb 10 1 * * 6,0 /etc/init.d/smb restart # 每天18 : 00至23 : 00之间每隔30分钟重启smb 0,30 18-23 * * * /etc/init.d/smb restart # 每星期六的晚上11 : 00 pm重启smb 0 23 * * 6 /etc/init.d/smb restart # 每一小时重启smb * */1 * * * /etc/init.d/smb restart # 晚上11点到早上7点之间，每隔一小时重启smb 0 23-7 * * * /etc/init.d/smb restart 开机自动运行脚本 1 @reboot /root/s.sh 更多查看：开机启动 kkapi\nChatGPT设置定时任务 PS：ChatGPT有时给出的答案可能是错误的，需要验证：crontab guru\n1.提问：每隔2天运行一次\n回答：要设置一个每隔2天运行一次的cron作业，你可以使用以下cron表达式：\n1 0 0 */2 * * 解析这个cron表达式的含义如下：\n第一个字段（0）表示cron作业运行的分钟数（在这种情况下，设置为0，表示整点）。 第二个字段（0）表示cron作业运行的小时数（在这种情况下，设置为0，表示午夜）。 第三个字段（*/2）表示月份中的日期。*/2 表示每隔2天运行一次。 第四个字段（*）表示月份，设置为*，表示任意月份。 第五个字段（*）表示星期几，也设置为*，表示任意星期几。 使用这个cron表达式，你的作业将在每隔2天的午夜运行一次。根据你的具体需求，可以调整时间（前两个字段）来适应你的要求。\n2.每隔48小时运行一次\n要设置一个每隔48小时运行一次的cron作业，你可以使用以下cron表达式：\n1 0 */48 * * * 这个cron表达式的含义如下：\n第一个字段（0）表示cron作业运行的分钟数（在这种情况下，设置为0）。 第二个字段（*/48）表示小时数。*/48 表示每隔48小时运行一次。 第三个字段（*）表示月份中的日期，设置为*，表示任意日期。 第四个字段（*）表示月份，设置为*，表示任意月份。 第五个字段（*）表示星期几，设置为*，表示任意星期几。 使用这个cron表达式，你的作业将在每隔48小时运行一次。请注意，这个表达式不是严格意义上的每隔48小时，而是以作业开始时间为基准，再加上48小时的间隔运行。因此，如果作业在一个特定时间点启动，它将在启动后的48小时再次运行。\n3.输入* */48 * * *\n* */48 * * * 是一个有效的cron表达式，它表示每隔48小时运行一次。\n让我们对这个cron表达式进行解析：\n第一个字段（*）表示cron作业运行的分钟数，这里设置为*表示每分钟都匹配。 第二个字段（*/48）表示cron作业运行的小时数，*/48 表示每隔48小时运行一次。 第三个字段（*）表示月份中的日期，设置为*表示任意日期。 第四个字段（*）表示月份，设置为*表示任意月份。 第五个字段（*）表示星期几，设置为*表示任意星期几。 使用这个cron表达式，你的作业将在每隔48小时运行一次。无论何时启动作业，它都会在每个完整的48小时周期后再次运行。请注意，这个表达式不是严格意义上的每隔48小时，而是以作业启动时间为基准，再加上48小时的间隔运行。\n参考链接 0.crontab guru 1.Linux之crontab定时任务 2.crontab 定时任务 3.crontab 每天，每月，每年 定时启动 4.Linux系统如何设置开机自动运行脚本 ","date":"2020-08-10T10:52:25Z","permalink":"//localhost:1313/archives/linux%E5%88%A9%E7%94%A8crontab%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","title":"linux利用crontab设置定时任务"},{"content":"在网上查询了一下halo定时备份有三种方案：邮箱和Dropbox，以及github。\n备份到QQ邮箱 安装邮件发送依赖组件 Centos 7 1 yum install sendmail mailx -y Centos 8 1 2 3 yum -y install postfix sendmail-cf mailx service postfix start sudo systemctl enable postfix Debian 安装 mailtuils: 1 sudo apt install mailutils -y 安装postfix后缀: 1 sudo apt install postfix 在安装过程即将结束时，您将看到一个类似于下图中的窗口的窗口。默认选项是Internet Site。这是本教程的推荐选项，请按TAB，然后按ENTER。 之后，您将获得另一个窗口，就像下一个图像中的窗口一样。该系统邮件名称应该是一样的，你分配给服务器，当你在创造它的名字。如果它显示子域subdomain.example.com，请将其更改为ust example.com。完成后，按TAB，然后ENTER。\n修改附件发送大小限制 看下现在邮件的大小限制：\n1 sudo postconf message_size_limit message_size_limit = 20480000\r差不多是10M，放大20倍，应该差不多了。\n1 sudo postconf -e \u0026#34;message_size_limit = 204800000\u0026#34; 获得\u0026amp;编辑备份脚本 1 wget https://raw.githubusercontent.com/iwyang/scripts/master/halo_email_backup.sh 创建备份文件夹 如果选择将文件备份到临时目录的话，这步可跳过，直接修改脚本即可。我直接跳过了这一步。\r1 mkdir -p /home/back 修改脚本 脚本原来模样：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/bin/bash # 进入到备份文件夹 cd /home/back #压缩网站数据 tar zcvf web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz 网站目录 # 导出数据库到备份文件夹内 mysqldump -uroot -p数据库密码 数据库名称 \u0026gt; web_data_$(date +\u0026#34;%Y%m%d\u0026#34;).sql # 以附件形式发送数据库到指定邮箱 echo \u0026#34;Blog date\u0026#34;|mail -s \u0026#34;Backup$(date +%Y-%m-%d)\u0026#34; -a web_data_$(date +\u0026#34;%Y%m%d\u0026#34;).sql 收件人邮箱 # 删除本地3天前的数据 rm -rf web_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).tar.gz web_data_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).sql # 登录FTP lftp ftp地址 -u ftp用户名,ftp密码 \u0026lt;\u0026lt; EOF # 进入FTP根目录 cd ftp根目录文件夹 # 删除3天前备份文件 mrm web_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).tar.gz mrm web_data_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).sql # 上传当天备份文件 mput web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz mput web_data_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).sql bye EOF 根据实际需求，改成下面模样：\n1 vi email.sh 1 2 3 4 5 #!/bin/bash cd /tmp tar zcvf web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz /root/.halo echo \u0026#34;Blog date\u0026#34;|mail -s \u0026#34;Backup$(date +%Y-%m-%d)\u0026#34; -a web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz 455343442@qq.com rm -f web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz 上面代码中最后的rm -f web_$(date +\u0026quot;%Y%m%d\u0026quot;).tar.gz，表示删除本地的临时文件。\n注意在Debian下要讲-a 改成 -A（如下）\n1 2 - echo \u0026#34;Blog date\u0026#34;|mail -s \u0026#34;Backup$(date +%Y-%m-%d)\u0026#34; -a web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz 455343442@qq.com + echo \u0026#34;Blog date\u0026#34;|mail -s \u0026#34;Backup$(date +%Y-%m-%d)\u0026#34; -A web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz 455343442@qq.com 设置定时任务 赋予文件执行权限 1 chmod +x /root/email.sh 运行的时候就输入下面的代码即可：./email.sh\n设定自动任务 1 crontab -e 1 01 00 * * * /root/email.sh 意思是每天凌晨0:01运行这个脚本。\n备份到Dropbox 创建Dropbox应用 首先，需要创建一个Dropbox应用，可以从该网址进行创建：https://www.dropbox.com/developers/apps/create\n在这里，应用类型选择Dropbox API，数据存储类型选择App folder，然后命名创建。然后切换到Permissions选项卡，勾选相应权限。最后记录下App key，App secret，下面要用。\n下载dropbox_uploader.sh dropbox_uploader 是一个第三方Dropbox备份脚本，首先下载脚本：\n1 curl \u0026#34;https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh\u0026#34; -o dropbox_uploader.sh 然后，为该脚本添加执行权限：\n1 chmod +x dropbox_uploader.sh 执行该脚本，绑定APP：\n1 ./dropbox_uploader.sh 在终端里输入App key，App secret，接着会返回一个网址，浏览器打开，复制得到的token，最后在终端里完成绑定。\n之后可以执行下面的命令测试上传，提示Done就是绑定成功了：\n1 ./dropbox_uploader.sh upload /etc/passwd /backup/passwd.old 如果报错unlink,先执行命令rm ~/.dropbox_uploader，删除相应文件夹，然后删除上面申请的APP。按上面的操作重新申请\nAPP、重新绑定，一般第二次申请就会成功。\n编写备份脚本 编写定时备份脚本，取名为backup.sh。代码原来模样如下：\n1 vi backup.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/bin/bash SCRIPT_DIR=\u0026#34;/root\u0026#34; #这个改成你存放刚刚下载下来的dropbox_uploader.sh的文件夹位置 DROPBOX_DIR=\u0026#34;/backup\u0026#34; #这个改成你的备份文件想要放在Dropbox下面的文件夹名称，如果不存在，脚本会自动创建 BACKUP_SRC=\u0026#34;/home/wwwroot /usr/local/nginx/conf\u0026#34; #这个是你想要备份的本地服务器上的文件，不同的目录用空格分开 BACKUP_DST=\u0026#34;/tmp\u0026#34; #这个是你暂时存放备份压缩文件的地方，一般用/tmp即可 MYSQL_SERVER=\u0026#34;localhost\u0026#34; #这个是你mysql服务器的地址，一般填这个本地地址即可 MYSQL_USER=\u0026#34;mysqluser\u0026#34; #这个是你mysql的用户名名称，比如root或admin之类的 MYSQL_PASS=\u0026#34;password\u0026#34; #这个是你mysql用户的密码 # 下面的一般不用改了 NOW=$(date +\u0026#34;%Y.%m.%d\u0026#34;) DESTFILE=\u0026#34;$BACKUP_DST/$NOW.tar.gz\u0026#34; # 备份mysql数据库并和其它备份文件一起压缩成一个文件 mysqldump -u $MYSQL_USER -h $MYSQL_SERVER -p$MYSQL_PASS --all-databases \u0026gt; \u0026#34;$NOW-Databases.sql\u0026#34; echo \u0026#34;数据库备份完成，打包网站数据中...\u0026#34; tar cfzP \u0026#34;$DESTFILE\u0026#34; $BACKUP_SRC \u0026#34;$NOW-Databases.sql\u0026#34; echo \u0026#34;所有数据打包完成，准备上传...\u0026#34; # 用脚本上传到dropbox $SCRIPT_DIR/dropbox_uploader.sh upload \u0026#34;$DESTFILE\u0026#34; \u0026#34;$DROPBOX_DIR/$NOW.tar.gz\u0026#34; if [ $? -eq 0 ];then echo \u0026#34;上传完成\u0026#34; else echo \u0026#34;上传失败，重新尝试\u0026#34; fi # 删除本地的临时文件 rm -f \u0026#34;$NOW-Databases.sql\u0026#34; \u0026#34;$DESTFILE\u0026#34; 根据实际情况改成下面模样：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/bin/bash SCRIPT_DIR=\u0026#34;/root\u0026#34; DROPBOX_DIR=\u0026#34;/backup\u0026#34; BACKUP_SRC=\u0026#34;/root/.halo\u0026#34; BACKUP_DST=\u0026#34;/tmp\u0026#34; NOW=$(date +\u0026#34;%Y.%m.%d\u0026#34;) DESTFILE=\u0026#34;$BACKUP_DST/$NOW.tar.gz\u0026#34; echo \u0026#34;打包网站数据中...\u0026#34; tar cfzP \u0026#34;$DESTFILE\u0026#34; $BACKUP_SRC echo \u0026#34;所有数据打包完成，准备上传...\u0026#34; $SCRIPT_DIR/dropbox_uploader.sh delete \u0026#34;$DROPBOX_DIR\u0026#34; $SCRIPT_DIR/dropbox_uploader.sh upload \u0026#34;$DESTFILE\u0026#34; \u0026#34;$DROPBOX_DIR/$NOW.tar.gz\u0026#34; if [ $? -eq 0 ];then echo \u0026#34;上传完成\u0026#34; else echo \u0026#34;上传失败，重新尝试\u0026#34; fi rm -f \u0026#34;$DESTFILE\u0026#34; 先用$SCRIPT_DIR/dropbox_uploader.sh delete \u0026quot;$DROPBOX_DIR\u0026quot;删除Dropbox备份文件夹，再上传文件。这样就保证Dropbox永远只有一个最新的备份文件，不用手动删除多余的备份文件了。\n当然也可以通过脚本设置保留旧数据的时长。如下面一个脚本就是让旧数据在Dropbox保留7天，本地保留10天。（不过觉得没有必要，还是上面的方法简单，下面方法尝试过，老是出现问题，旧数据删除不了，不想折腾了）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #!/bin/bash # 定义需要备份的目录 WEB_DIR=/home/www # 网站数据存放目录 # 定义备份存放目录 DROPBOX_DIR=/$(date +%Y-%m-%d) # Dropbox上的备份目录 LOCAL_BAK_DIR=/home/backup # 本地备份文件存放目录 # 定义备份文件名称 DBBakName=DB_$(date +%Y%m%d).tar.gz WebBakName=Web_$(date +%Y%m%d).tar.gz # 定义旧数据名称 Old_DROPBOX_DIR=/$(date -d -7day +%Y-%m-%d) OldDBBakName=DB_$(date -d -10day +%Y%m%d).tar.gz OldWebBakName=Web_$(date -d -10day +%Y%m%d).tar.gz cd $LOCAL_BAK_DIR #使用命令导出数据库 mongodump --out $LOCAL_BAK_DIR/mongodb/ --db bastogne #压缩数据库文件合并为一个压缩文件 tar zcf $LOCAL_BAK_DIR/$DBBakName $LOCAL_BAK_DIR/mongodb rm -rf $LOCAL_BAK_DIR/mongodb #压缩网站数据 cd $WEB_DIR tar zcf $LOCAL_BAK_DIR/$WebBakName ./* cd ~ #开始上传 ./dropbox_uploader.sh upload $LOCAL_BAK_DIR/$DBBakName $DROPBOX_DIR/$DBBakName ./dropbox_uploader.sh upload $LOCAL_BAK_DIR/$WebBakName $DROPBOX_DIR/$WebBakName #删除旧数据 rm -rf $LOCAL_BAK_DIR/$OldDBBakName $LOCAL_BAK_DIR/$OldWebBakName ./dropbox_uploader.sh delete $Old_DROPBOX_DIR/ echo -e \u0026#34;Backup Done!\u0026#34; 赋予文件执行权限 1 chmod +x backup.sh 运行的时候就输入下面的代码即可：./backup.sh\n设置定时任务 1 crontab -e 1 02 00 * * * /root/backup.sh 这样，就可以每天凌晨00:02自动备份到Dropbox了。\n备份到github 准备工作 首先当然是在服务器上安装GIt，配置ssh公钥，并且在github上添加服务器ssh公钥。具体过程略。\n初始化仓库 1 2 3 4 5 6 cd /root/.halo git init git remote add origin git@github.com:iwyang/halo.git git add . git commit -m \u0026#34;site backup\u0026#34; git push --force origin master 注意要删除主题文件夹下的.git文件夹，不然的话就无法备份主题了。当然也可以不备份主题，因为主题所有配置选项都在数据库里。如果这样的话，命令要作如下调整：\n1 git add application.yaml upload/ db/ 设置定时任务 编写备份脚本 1 2 cd /root vi github.sh 脚本原来模样：\n1 2 3 4 5 6 7 8 #!/bin/bash #进入到网站根目录，记得修改为自己的站点 cd /home/xxx.com #将数据库导入到该目录，这里以mysql为例，passwd为数据库密码，typecho为数据库名称，typecho.sql为备份的数据库文件 mysqldump -uroot -ppasswd typecho \u0026gt; typecho.sql git add -A git commit -m \u0026#34;backsite\u0026#34; git push -u origin master 根据实际情况修改如下：\n1 2 3 4 5 6 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to github...\\033[0m\u0026#34; cd /root/.halo git add .\tgit commit -m \u0026#34;site backup\u0026#34; git push --force origin master 为了防止服务器里.git文件夹过大，脚本可以作如下调整：\n1 2 3 4 5 6 7 8 9 10 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to github...\\033[0m\u0026#34; cd /root/.halo rm -rf .git git init git remote add origin git@github.com:iwyang/halo.git git add . git commit -m \u0026#34;site backup\u0026#34; git push --force origin master rm -rf .git 赋予文件执行权限 1 chmod +x /root/github.sh 设定自动任务 1 crontab -e 1 03 00 * * * /root/github.sh 意思是每天凌晨0:03运行这个脚本。\n还原博客 1 git clone git@github.com:iwyang/halo.git .halo 接下来就是配置个 Java 环境，下载个 Halo 运行包，配置域名访问。具体可参考官方文档。\n总结 halo博客迁移后，最好删除logs文件夹下的日志文件。\nSCP命令 下载文件 从服务器下载文件到本地，在Git Bash执行：\n1 scp root@104.224.191.88:/root/.ssh/mysite ssh 意思是将服务器/root/.ssh目录下的mysite文件复制到当前路径下ssh文件夹下。\n上传文件 从本地上传文件到服务器，在Git Bash执行：\n1 scp .halo.zip root@137.220.43.191:/root/ 意思是将当前目录下.halo.ip文件上传到服务器/root/目录下。\nwordpress相关 wordpress常用mysql命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1.删除数据库 mysqladmin -u root -p drop wordpress # 2.新建一个空数据库 mysqladmin -u root -p create wordpress # 3.导入数据 mysql -uroot -p”你的密码” wordpress \u0026lt; 你的数据sql文件 # 4.更新Url # 4.1.连接数据库 mysql -u root -p # 4.2. 选择数据库 use wordpress # 4.3.更新URL SELECT * FROM wp_options WHERE option_name = \u0026#39;home\u0026#39;; UPDATE wp_options SET option_value=\u0026#34;https://new_url/\u0026#34; WHERE option_name = \u0026#34;home\u0026#34;; SELECT * FROM wp_options WHERE option_name = \u0026#39;siteurl\u0026#39;; UPDATE wp_options SET option_value=\u0026#34;https://new_url/\u0026#34; WHERE option_name = \u0026#34;siteurl\u0026#34;; Debian 10 五分钟/一键安装Wordpress 1 2 3 4 5 6 #Debian8下载脚本 wget http://w3.gubo.org/pubfiles/tylemp/10/tylemp.sh #安装稳定版Nginx+PHP+MariaDB bash tylemp.sh stable #安装wordpress，www.yourdomain.com即为你的域名 bash tylemp.sh wordpress www.yourdomain.com 命令列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 bash tylemp.sh system # 优化系统，删除不需要组件，dropbear替代sshd bash tylemp.sh exim4 # 更轻量级邮件系统 bash tylemp.sh mysql # 安装mysql bash tylemp.sh nginx # 安装nginx，默认一个进程，可调整 bash tylemp.sh php # 安装php，包含php5-gd，可使用验证码 bash tylemp.sh stable # 安装上面所有，软件是debian官方stable源，版本较旧 bash tylemp.sh wordpress www.yourdomain.com # 一键安装wordpress, 数据库自动配置好。 bash tylemp.sh vhost www.yourdomain.com # 一键安装静态虚拟主机。 bash tylemp.sh dhost www.yourdomain.com # 一键安装动态虚拟主机，方便直接上传网站程序。 bash tylemp.sh typecho www.yourdomain.com # 安装typecho，提供数据库名，密码等自主添加完成安装 bash tylemp.sh phpmyadmin www.yourdomain.com # 一键安装phpmyadmin 数据库管理软件，用http://www.yourdomain.com/phpMyAdmin访问 bash tylemp.sh addnginx 2 #调整nginx进程，这里2表示调整后的进程数，请根据vps配置（cpu核心数）更改 bash tylemp.sh sshport 22022 #更改ssh端口号22022，建议更改10000以上端口。重启后生效。 bash tylemp.sh rainloop www.yourdomain.com # 增加Gmail的web客户端一键安装 bash tylemp.sh carbon www.yourdomain.com # 增加Carbon Forum的一键安装 修改 WordPress 上传文件大小限制 1.查找php.ini配置文件\n1 find / -name \u0026#34;php.ini\u0026#34; 会出现两个结果，修改类似/etc/php/7.3/fpm/php.ini\n2.修改 php.ini\n1 vi /etc/php/7.3/fpm/php.ini 在其中搜索并修改以下配置：\n1 2 3 upload_max_filesize = 512M post_max_size = 512M max_execution_time = 3000 这里配置上限为 512 MB，同时增加了最大处理时间。\n3.修改 nginx.conf\n1 vi /etc/nginx/conf.d/blog.bore.vip.conf 在 http 或 server 配置下添加\n1 client_max_body_size 512M; 这里配置上限为 512 MB。\n4.重启nginx和php\n1 2 service nginx restart service php7.3-fpm restart nginx: command not found 解决方案 只需要输入source /etc/profile ，让配置文件重新生效一下即可。\n参考链接 1.Linux 每日自动备份到FTP及数据库通过邮箱发送方法 2.fetchmail: SMTP error: 552 5.3.4 Message size exceeds fixed limit 3.如何将服务器上的网站数据定时自动备份到Dropbox 4.Linux 定时备份服务器/网站数据到Github私人仓库 5.MySQL 教程 6.Changing the WordPress site URL using the MySQL command line 7.CentOs8系统安装mailx发邮件 8.Impossible to unlink 9.如何在Debian 9上安装和配置Postfix作为仅发送SMTP服务 10.Debian LNMP/LEMP/WordPress一键脚本 11.修改 WordPress 上传文件大小限制 ","date":"2020-07-26T13:49:25Z","permalink":"//localhost:1313/archives/halo%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E7%9A%84%E6%96%B9%E6%B3%95/","title":"halo定时备份的方法"},{"content":"本教程以 CentOS 7.x 为例，配置并运行 Halo，其他 Linux 发行版大同小异。\n写在前面 具备一定的 Linux 基础。 如需域名绑定，请先保证已经正确解析 IP，以及确认服务器是否需要备案。 如需使用 IP 访问，请先确保 Halo 的运行端口已经打开，除非你使用 80 端口运行 Halo。 如 3 所述，如果你使用了类似 宝塔面板 之类的 Linux 管理面板，可能还需要在面板里设置端口。 不要想当然，请严格按照文档的流程操作。 Win10配置java环境变量 下载\u0026amp;\u0026amp; 安装JDK 下载地址：https://www.oracle.com/java/technologies/downloads/\n2022.5.26 java18 本地不可用，java17 本地可用。（halo版本：1.5.3）\n环境变量配置 打开 环境变量窗口，右键 This PC(此电脑) -\u0026gt; Properties（属性） -\u0026gt; Advanced system settings（高级系统设置） -\u0026gt; Environment Variables（环境变量）\u0026hellip;\n新建JAVA_HOME 变量，点击 New（新建）\u0026hellip; 按钮，输入:\n1 2 变量名：JAVA_HOME 变量值：电脑上JDK安装的绝对路径(例如：C:\\Program Files\\Java\\jdk-17.0.2) 新建/修改 CLASSPATH 变量，如果存在 CLASSPATH 变量，选中点击 Edit(编辑)。如果没有，点击 New（新建）\u0026hellip; 新建。输入/在已有的变量值后面添加： 1 2 变量名：CLASSPATH 变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; 修改Path 变量。由于 win10 的不同，当选中 Path 变量的时候，系统会很方便的把所有不同路径都分开了，不会像 win7 或者 win8 那样连在一起。新建两条路径： 1 2 %JAVA_HOME%\\bin %JAVA_HOME%\\jre\\bin 检查 打开 cmd，输入 java，出现一连串的指令提示，说明配置成功了。 环境要求 为了在使用过程中不出现意外的事故，给出下列推荐的配置\nCentOS 7.x 512 MB 以上内存 服务器配置 更新软件包 请确保服务器的软件包已经是最新的。\n1 sudo yum update -y 装 Java 运行环境 若已经存在 Java 运行环境的可略过这一步。\n1 2 3 4 5 # 安装 OpenJRE sudo yum install java-11-openjdk -y # 检测是否安装成功 java -version 当然，这只是其中一种比较简单的安装方式，你也可以用其他方式，并不是强制要求使用这种方式安装。\n创建 Halo 用户 我们推荐创建一个低权限的用户运行 halo：（这一步我没有进行，直接用root）\n1 2 3 4 # 创建 halo 用户 sudo useradd -m halo # 直接登录该用户 sudo su halo 安装 Halo 创建存放运行包的目录 创建存放 运行包 的目录，这里以 ~/app 为例\n1 mkdir ~/app \u0026amp;\u0026amp; cd ~/app 下载运行包 1 wget https://dl.halo.run/release/halo-1.5.3.jar -O halo.jar 创建工作目录 1 mkdir ~/.halo \u0026amp;\u0026amp; cd ~/.halo 下载配置文件 考虑到部分用户的需要，可能需要自定义比如端口等设置项，我们提供了公共的配置文件，并且该配置文件是完全独立于安装包的。当然，你也可以使用安装包内的默认配置文件，但是安装包内的配置文件是不可修改的。请注意：配置文件的路径为 ~/.halo/application.yaml。\n1 2 # 下载配置文件到 ~/.halo 目录 wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml 修改配置文件 完成上一步操作，我们就可以自己配置 Halo 的运行端口，以及数据库相关的配置了。\n1 2 # 使用 Vi 工具修改配置文件 vi ~/.halo/application.yaml 打开之后我们可以看到\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 server: port: 8090 # Response data gzip. compression: enabled: false spring: datasource: # H2 database configuration. driver-class-name: org.h2.Driver url: jdbc:h2:file:~/.halo/db/halo username: admin password: 123456 # MySQL database configuration. # driver-class-name: com.mysql.cj.jdbc.Driver # url: jdbc:mysql://127.0.0.1:3306/halodb?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;serverTimezone=Asia/Shanghai\u0026amp;allowPublicKeyRetrieval=true # username: root # password: 123456 # H2 database console configuration. h2: console: settings: web-allow-others: false path: /h2-console enabled: false halo: # Your admin client path is https://your-domain/{admin-path} admin-path: admin # memory or level cache: memory 如果需要自定义端口，修改 server 节点下的 port 即可。 默认使用的是 H2 Database 数据库，这是一种嵌入式的数据库，使用起来非常方便。需要注意的是，默认的用户名和密码为 admin 和 123456，这个是自定义的，最好将其修改，并妥善保存。 如果需要使用 MySQL 数据库，需要将 H2 Database 的所有相关配置都注释掉，并取消 MySQL 的相关配置。另外，MySQL 的默认数据库名为 halodb，请自行配置 MySQL 并创建数据库，以及修改配置文件中的用户名和密码。 h2 节点为 H2 Database 的控制台配置，默认是关闭的，如需使用请将 h2.console.settings.web-allow-others 和 h2.console.enabled 设置为 true。控制台地址即为 域名/h2-console。注意：非紧急情况，不建议开启该配置。 server.compression.enabled 为 Gzip 功能配置，如有需要请设置为 true，需要注意的是，如果你使用 Nginx 或者 Caddy 进行反向代理的话，默认是有开启 Gzip 的，所以这里可以保持默认。 halo.admin-path 为后台管理的根路径，默认为 admin，如果你害怕别人猜出来默认的 admin（就算猜出来，对方什么都做不了），请自行设置。仅支持一级，且前后不带 /。 halo.cache 为系统缓存形式的配置，可选 memory 和 level，默认为 memory，将数据缓存到内存，使用该方式的话，重启应用会导致缓存清空。如果选择 level，则会将数据缓存到磁盘，重启不会清空缓存。如不知道如何选择，建议默认。 注意：使用 MySQL 之前，必须要先新建一个 halodb 数据库，MySQL 版本需 5.7 以上。\n1 create database halodb character set utf8mb4 collate utf8mb4_bin; 注意：使用 MySQL 之前，必须要先新建一个 halodb 数据库，MySQL 版本需 5.7 以上。\n1 create database halodb character set utf8mb4 collate utf8mb4_bin; 运行 Halo 1 cd ~/app \u0026amp;\u0026amp; java -jar halo.jar 如看到以下日志输出，则代表启动成功.\n1 2 3 run.halo.app.listener.StartedListener : Halo started at http://127.0.0.1:8090 run.halo.app.listener.StartedListener : Halo admin started at http://127.0.0.1:8090/admin run.halo.app.listener.StartedListener : Halo has started successfully! 提示：以上的启动仅仅为测试 Halo 是否可以正常运行，如果我们关闭 ssh 连接，Halo 也将被关闭。要想一直处于运行状态，请继续看下面的教程。\n作为服务运行 上面我们已经完成了 Halo 的整个配置和安装过程，接下来我们对其进行更完善的配置，比如：需要开机自启？，更简单的启动方式？\n实现以上功能我们只需要新增一个配置文件即可，也就是使用 Systemd 来完成这些工作。\n1.退出 halo 账户，登录到 root 账户\n如果当前就是 root 账户，请略过此步骤。\n1 exit 2.下载 Halo 官方的 halo.service 模板\n1 wget https://dl.halo.run/config/halo.service -O /etc/systemd/system/halo.service 3.修改 halo.service\n1 vi /etc/systemd/system/halo.service 4.修改配置\n下载 Halo 官方的 halo.service 模板 1 wget https://dl.halo.run/config/halo.service -O /etc/systemd/system/halo.service 3.修改 halo.service 下载完成之后，我们还需要对其进行修改。\n1 sudo vi /etc/systemd/system/halo.service 打开之后我们可以看到\nYOUR_JAR_PATH：Halo 运行包的绝对路径，例如 /root/app/halo.jar，注意：此路径不支持 ~ 符号。 USER：运行 Halo 的系统用户，如果有按照上方教程创建新的用户来运行 Halo，修改为你创建的用户名称即可。反之请删除 User=USER。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 [Unit] Description=Halo Service Documentation=https://halo.run After=network-online.target Wants=network-online.target [Service] Type=simple User=USER ExecStart=/usr/bin/java -server -Xms256m -Xmx256m -jar YOUR_JAR_PATH ExecStop=/bin/kill -s QUIT $MAINPID Restart=always StandOutput=syslog StandError=inherit [Install] WantedBy=multi-user.target 参数：\n-Xms256m：为 JVM 启动时分配的内存，请按照服务器的内存做适当调整，512 M 内存的服务器推荐设置为 128，1G 内存的服务器推荐设置为 256，默认为 256。 -Xmx256m：为 JVM 运行过程中分配的最大内存，配置同上。 YOUR_JAR_PATH：Halo 安装包的绝对路径，例如 /www/wwwroot/halo-latest.jar。 提示：\n如果你不是按照上面的方法安装的 JDK，请确保 /usr/bin/java 是正确无误的。 systemd 中的所有路径均要写为绝对路径，另外，~ 在 systemd 中也是无法被识别的，所以你不能写成类似 ~/halo-latest.jar 这种路径。 如何检验是否修改正确：把 ExecStart 中的命令拿出来执行一遍。 5.重新加载 systemd\n1 2 # 修改 service 文件之后需要刷新 Systemd systemctl daemon-reload 6.运行服务\n1 systemctl start halo 7.在系统启动时启动服务\n1 systemctl enable halo 您可以查看服务日志检查启动状态\n1 journalctl -n 20 -u halo 配置域名访问 假设你已经成功配置并运行好了 Halo，且不是使用 80 端口运行。 请确保域名已经成功解析到服务器 IP，并确认服务器是否需要备案。 请检查服务器的 80 和 443 端口是否开放。 如 3 所述，如果你使用了类似 宝塔面板 之类的 Linux 管理面板，可能还需要在面板里设置端口。 并不一定要求按照下列教程操作，这里仅仅以供参考。 如 2 所述，你需要做的仅仅是反向代理 Halo 运行端口，并配置 SSL 证书而已，所以并不要求配置方式。 使用 Nginx 进行反向代理 我使用的是这一种方法。\n安装 Nginx 1 2 3 4 5 6 7 8 9 10 11 # 添加 Nginx 源 sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm # 安装 Nginx sudo yum install -y nginx # 启动 Nginx sudo systemctl start nginx.service # 设置开机自启 Nginx sudo systemctl enable nginx.service 配置 Nginx 1 2 # 下载 Halo 官方的 Nginx 配置模板 curl -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf 下载完成之后，我们还需要对其进行修改\n1 2 # 使用 vim 编辑 halo.conf vi /etc/nginx/conf.d/halo.conf 打开之后我们可以看到\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; server_name www.yourdomain.com; client_max_body_size 1024m; location / { proxy_pass http://halo; proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } 注意：Nginx 默认的 client_max_body_size 配置大小为 1m，可能会导致你在 Halo 后台上传文件被 Nginx 限制，所以此示例配置文件加上了 client_max_body_size 1024m; 这行配置。当然，1024m 可根据你的需要自行修改。\n修改完成之后\n1 2 3 4 5 # 检查配置是否有误 sudo nginx -t # 重载 Nginx 配置 sudo nginx -s reload 配置阿里云免费证书SSL 证书 目前使用的是Let’s Encrypt 免费证书。\n1.在nginx根目录（默认为/etc/nginx）下创建目录cert。\n1 2 cd /etc/nginx mkdir cert 2.把下载的证书两个文件.pem和.key上传到目录cert中。\n3.修改nginx配置文件（目前使用的是下面的官方推荐配置）\n1 vi /etc/nginx/conf.d/halo.conf 自定义配置(不要用这个，用下面的官方配置）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 server { listen 80; server_name bore.vip www.bore.vip; rewrite ^(.*)$ https://$host$1 permanent; client_max_body_size 1024m; } server { listen 443 ssl; server_name bore.vip; ssl_certificate /etc/nginx/cert/bore.vip.pem; ssl_certificate_key /etc/nginx/cert/bore.vip.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8090/; } } 官方推荐配置（用这个）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; listen 443 ssl http2; listen [::]:443 ssl http2; server_name bore.vip www.bore.vip; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ https://bore.vip/$1 permanent; } client_max_body_size 1024m; ssl_certificate /etc/nginx/cert/bore.vip.pem; ssl_certificate_key /etc/nginx/cert/bore.vip.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_timeout 10m; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_buffer_size 1400; add_header Strict-Transport-Security max-age=15768000; ssl_stapling on; ssl_stapling_verify on; index index.html index.htm index.php; root /data/wwwroot/bore.vip; if ($ssl_protocol = \u0026#34;\u0026#34;) { return 301 https://$host$request_uri; } #error_page 404 /404.html; #error_page 502 /502.html; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ { proxy_pass http://halo; expires 30d; access_log off; } location ~ .*\\.(js|css)?$ { proxy_pass http://halo; expires 7d; access_log off; } location ~ /(\\.user\\.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README\\.md) { deny all; } location / { proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://halo; } } 4.重启nginx服务。\n1 systemctl restart nginx 添加 Let\u0026rsquo;s Encrypt 免费证书 Centos 8 安装Certbot 1 2 yum install epel-release -y yum install certbot -y 新建相应文件夹 由于配置了反向代理，为了顺利申请证书，需要新建文件夹： 1 2 mkdir -p /data/wwwroot/bore.vip mkdir -p /data/wwwlogs 配置Nginx http 80端口 为了使下面申请证书时能访问http://bore.vip/.well-known/acme-challenge/\u0026hellip;\u0026hellip;.这个链接，首先配置好\nNginx 80端口，保证上述网址能顺利访问，从而顺利申请证书。\n由于配置了反向代理，所以在验证的时候是无法直接访问到站点目录下的 .well-known 文件夹下的验证文\n件的。所以在nginx配置的server节点下添加：\n1 2 3 4 5 location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/demo.halo.run/; } 上述代码如果不行，试下下面的：\n1 2 3 location ~ /.well-known { allow all; } 编辑halo.conf\n1 vi /etc/nginx/conf.d/halo.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; server_name bore.vip; client_max_body_size 1024m; location / { proxy_pass http://halo; proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/bore.vip/; } } 申请证书 1 certbot certonly --webroot -w /data/wwwroot/bore.vip -d bore.vip -m 455343442@qq.com --agree-tos 相关参数含义：\n–webroot是运行模式 standalone模式：需要停止当前的 web server 服务，让出 80 端口，由客户端内置的 web server 启动与Let’ s Encrypt通信。 webroot模式：不需要停止当前 web server，但需要在域名根目录下创建一个临时目录，并要保证外网通过域名可以访问这个目录。 -w 指定网站所在目录 -d 指定网站域名 -m 指定联系邮箱，填写真实有效的，letsencrypt会在证书在过期以前发送预告的通知邮件 agree-tos 表示接受相关协议 使用webroot模式，Certbot在验证服务器域名的时候，会生成一个随机文件，然后Certbot的服务器会通过HTTP访问你的这个文件，因此要确保你的 Nginx 配置好，以便可以访问到这个文件。否则会返回403错误，在nginx配置的server节点下添加：\n1 2 3 4 5 location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/demo.halo.run/; } 上述代码如果不行，试下下面的：\n1 2 3 location ~ /.well-known { allow all; } 配置Nginx 编辑halo.conf\n1 vi /etc/nginx/conf.d/halo.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; listen 443 ssl http2; listen [::]:443 ssl http2; server_name bore.vip www.bore.vip; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ https://bore.vip/$1 permanent; } client_max_body_size 1024m; ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_timeout 10m; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_buffer_size 1400; add_header Strict-Transport-Security max-age=15768000; ssl_stapling on; ssl_stapling_verify on; access_log /data/wwwlogs/bore.vip_nginx.log combined; index index.html index.htm index.php; root /data/wwwroot/bore.vip; if ($ssl_protocol = \u0026#34;\u0026#34;) { return 301 https://$host$request_uri; } #error_page 404 /404.html; #error_page 502 /502.html; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ { proxy_pass http://halo; expires 30d; access_log off; } location ~ .*\\.(js|css)?$ { proxy_pass http://halo; expires 7d; access_log off; } location ~ /(\\.user\\.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README\\.md) { deny all; } location / { proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://halo; } location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/bore.vip/; } } 测试配置是否有问题：\n1 nginx -t 重启Nginx生效：\n1 systemctl restart nginx 证书自动更新 由于这个证书的时效只有 90 天，我们需要设置自动更新的功能，帮我们自动更新证书的时效。首先先在命令行模拟证书更新： 1 certbot renew --dry-run 模拟更新成功的效果如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 [root@special-beep-1 ~]# certbot renew --dry-run Saving debug log to /var/log/letsencrypt/letsencrypt.log - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Processing /etc/letsencrypt/renewal/blog.bore.vip.conf - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Simulating renewal of an existing certificate for blog.bore.vip - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Processing /etc/letsencrypt/renewal/bore.vip.conf - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Simulating renewal of an existing certificate for bore.vip - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Congratulations, all simulated renewals succeeded: /etc/letsencrypt/live/blog.bore.vip/fullchain.pem (success) /etc/letsencrypt/live/bore.vip/fullchain.pem (success) - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 在无法确认你的 nginx 配置是否正确时，一定要运行模拟更新命令，确保certbot和服务器通讯正常。使用 crontab -e 的命令来启用自动任务，命令行：\n1 crontab -e 添加配置：（每隔两个月凌晨2:30自动执行证书更新操作）后保存退出。\n1 30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\n1 openssl x509 -noout -dates -in /etc/letsencrypt/live/bore.vip/cert.pem PS:如果失败，先申请阿里证书，再申请Let\u0026rsquo;s Encrypt SSL证书，记得要添加 acme.sh 续签验证路由，才能申请Let\u0026rsquo;s Encrypt SSL证书。\nDebian10 安装 Certbot 1 sudo apt-get install letsencrypt 新建相应文件夹 由于配置了反向代理，为了顺利申请证书，需要新建文件夹：\n1 2 mkdir -p /data/wwwroot/bore.vip mkdir -p /data/wwwlogs 配置Nginx http 80端口 为了使下面申请证书时能访问http://bore.vip/.well-known/acme-challenge/…这个链接，首先配置好\nNginx 80端口，保证上述网址能顺利访问，从而顺利申请证书。所以在nginx配置的server节点下添加：\n1 2 3 4 5 location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/demo.halo.run/; } 上述代码如果不行，试下下面的：\n1 2 3 location ~ /.well-known { allow all; } 编辑halo.conf 1 vi /etc/nginx/conf.d/halo.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; server_name bore.vip; client_max_body_size 1024m; location / { proxy_pass http://halo; proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/bore.vip/; } } 重启 Nginx 生效：\n1 systemctl restart nginx 使用 webroot 自动生成证书 Certbot 支持多种不同的「插件」来获取证书，这里选择使用 webroot 插件，它可以在不停止 Web 服务器的前提下自动生成证书，使用 \u0026ndash;webroot 参数指定网站的根目录。\n1 certbot certonly --webroot -w /data/wwwroot/bore.vip -d bore.vip -m 455343442@qq.com --agree-tos PS：用上面的命令，不要用下面的命令。\n1 letsencrypt certonly --webroot -w /data/wwwroot/bore.vip -d bore.vip -m 455343442@qq.com --agree-tos 这样，在 /var/www/hexo 目录下创建临时文件 .well-known/acme-challenge ，通过这个文件来证明对域名 iwyang.top 的控制权，然后 Let’s Encrypt 验证服务器发出 HTTP 请求，验证每个请求的域的 DNS 解析，验证成功即颁发证书。\n生成的 pem 和 key 在 /etc/letsencrypt/live/ 目录下\n配置Nginx 编辑halo.conf，未开启443端口复用：\n1 vi /etc/nginx/conf.d/halo.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; listen 443 ssl http2; listen [::]:443 ssl http2; server_name bore.vip www.bore.vip; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ https://bore.vip/$1 permanent; } client_max_body_size 1024m; ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_timeout 10m; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_buffer_size 1400; add_header Strict-Transport-Security max-age=15768000; ssl_stapling on; ssl_stapling_verify on; access_log /data/wwwlogs/bore.vip_nginx.log combined; index index.html index.htm index.php; root /data/wwwroot/bore.vip; if ($ssl_protocol = \u0026#34;\u0026#34;) { return 301 https://$host$request_uri; } #error_page 404 /404.html; #error_page 502 /502.html; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ { proxy_pass http://halo; expires 30d; access_log off; } location ~ .*\\.(js|css)?$ { proxy_pass http://halo; expires 7d; access_log off; } location ~ /(\\.user\\.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README\\.md) { deny all; } location / { proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://halo; } location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/bore.vip/; } } 如果开启443端口复用：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; listen 127.0.0.1:443 ssl http2 proxy_protocol; listen [::]:443 ssl http2; set_real_ip_from 127.0.0.1; real_ip_header proxy_protocol; server_name bore.vip www.bore.vip; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ https://bore.vip/$1 permanent; } client_max_body_size 1024m; ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_timeout 10m; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_buffer_size 1400; add_header Strict-Transport-Security max-age=15768000; ssl_stapling on; ssl_stapling_verify on; access_log /data/wwwlogs/bore.vip_nginx.log combined; index index.html index.htm index.php; root /data/wwwroot/bore.vip; if ($ssl_protocol = \u0026#34;\u0026#34;) { return 301 https://$host$request_uri; } #error_page 404 /404.html; #error_page 502 /502.html; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ { proxy_pass http://halo; expires 30d; access_log off; } location ~ .*\\.(js|css)?$ { proxy_pass http://halo; expires 7d; access_log off; } location ~ /(\\.user\\.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README\\.md) { deny all; } location / { proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://halo; } location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/bore.vip/; } } 测试配置是否有问题：\n1 nginx -t 重启Nginx生效：\n1 systemctl restart nginx 自动续期 Let’s Encrypt 的证书有效期为 90 天，不过我们可以通过 crontab 定时运行命令更新证书。\n先运行以下命令来测试证书的自动更新：\n1 certbot renew --dry-run PS：用上面的命令，不要用下面的命令。\nletsencrypt renew --dry-run --agree-tos\n如果一切正常，就可以编辑 crontab 定期运行以下命令：\n1 crontab -e 1 30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx halo更改评论模块 首先进入后台，依次点击：系统—博客设置—评论设置，更改评论模块JS。系统默认（halo 1.3.2）评论模块JS为：\n1 //cdn.jsdelivr.net/npm/halo-comment@latest/dist/halo-comment.min.js 更改为halo-comment-fly评论模块JS：\n1 https://cdn.jsdelivr.net/gh/hshanx/halo-comment-fly@latest/dist/halo-comment.min.js 或者：\n1 https://cdn.jsdelivr.net/gh/hshanx/halo-comment-hshan@2.0.6/dist/halo-comment.min.js 更多评论模块JS，可以在github中搜索halo comment。\n定时删除halo日志 1 crontab -e 1 0 0 * * * rm -rf /root/.halo/logs/* 意思是每天删除日志文件。\n更改时区 如果你不知道服务器当前时间，可以使用下面的命令，查看当前时间：\n1 date -R 修改当前时区为上海（为了避免日志发表时间出现错误）：\n1 sudo timedatectl set-timezone Asia/Shanghai 再次不带任何选项参数调用timedatectl命令，打印系统当前设置的时区即可：\n1 timedatectl 版本升级 我们假设你存放运行包的路径为 ~/app，运行包的文件名为 halo.jar，且使用了 systemd 进行进程管理，如有不同，下列命令请按需修改。\n停止正在运行的服务 1 service halo stop 备份数据以及旧的运行包（重要） 1 2 cp -r ~/.halo ~/.halo.archive mv ~/app/halo.jar ~/app/halo.jar.archive 需要注意的是，.halo.archive 和 halo.jar.archive 文件名不一定要根据此文档命名，这里仅仅是个示例。\n清空 leveldb 缓存（如果有使用 leveldb 作为缓存策略） 1 rm -rf ~/.halo/.leveldb 下载最新版本的运行包 1 cd ~/app \u0026amp;\u0026amp; wget https://dl.halo.run/release/halo-1.5.3.jar -O halo.jar 启动测试 1 java -jar halo.jar 重启服务 1 service halo start 备份迁移 目前 Halo 在后台的小工具中提供了数据导出的功能，此功能的作用为导出数据库的所有数据，格式为 JSON。通常可以作为切换数据库类型的时候使用。需要注意的是，此备份仅仅为备份数据，不包含其他诸如主题、附件等资料。如下图：\n整站备份 通过 《写在前面》 的名词解释部分我们可以知道，Halo 的所有数据都是存放在当前用户目录的工作目录（.halo）下的（使用 MySQL 数据库除外，你还需要导出 MySQL 数据）。所以我们备份整站的数据仅需备份这个目录即可，不管你使用何种方式。不过，为了操作方便，我们也在后台的小工具中提供了备份整站数据的功能，和上面所说的数据备份一致，点击备份按钮即可打包工作目录文件夹。如下图：\n导入数据 此功能为导入上面所说的数据备份产生的数据文件（JSON 格式），并非整站备份的工作目录文件。需要注意的是，此功能仅在站点初始化的时候支持。如下图：\n整站迁移 此操作通常用于迁移服务器，基于上面 整站备份 所说，Halo 的所有数据都是存放于当前用户目录的工作目录（.halo）下的。当然，这仅限于使用 H2 Database 的情况下，如果你使用的 MySQL，那么还需要手动导出 MySQL 数据。所以，我们迁移服务器仅仅需要需要将工作目录的备份文件上传到新服务器的用户目录下解压，然后按照 《安装指南》 重新安装即可。MySQL 用户还需要做的就是手动导出 MySQL 数据，并在新服务器上导入。\n常见问题 1.忘记了管理员密码，如何重置？\n目前在登录页面含有隐藏的 找回密码 链接，点击即可进入找回密码页面，具体可参考以下步骤：\n在登录页面按下键盘快捷键（Windows / Linux：Shift + Alt + H，macOS：Shift + Command + H）即可显示 找回密码 链接。 按照表单提示输入用户名和邮箱，点击 获取 按钮即可发送带有验证码的邮件。 按照表单填写验证码和新密码，点击重置密码即可。 需要注意的是，第 2 步中的获取验证码需要事先配置了 SMTP 发信设置，否则无法发送验证码。但你可以登录服务器查看 Halo 运行日志，搜索 Got reset password code 关键字即可获取到验证码。\n附：修改 Nginx 配置文件 使用你熟悉的工具打开配置文件，此教程使用 vi。 1 vi /etc/nginx/conf.d/halo.conf 添加 upstream 配置 在 server 的同级节点添加如下配置： 1 2 3 upstream halo { server 127.0.0.1:8090; } 在 server 节点添加如下配置 1 2 3 4 5 6 7 location / { proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://halo; } 修改 location ~ .*.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ 节点 1 2 3 4 5 location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ { proxy_pass http://halo; expires 30d; access_log off; } 修改 location ~ .*.(js|css)?$ 节点 1 2 3 4 5 location ~ .*\\.(js|css)?$ { proxy_pass http://halo; expires 7d; access_log off; } 如果不按照第 4，5 步操作，请求一些图片或者样式文件不会经过 Halo，所以请不要忽略此配置。\n6. 添加 acme.sh 续签验证路由\nOneinStack 使用的 acme.sh 管理证书，如果你在创建 vhost 的时候选择了使用 Let\u0026rsquo;s Encrypt 申请证书，那么 OneinStack 会在系统内添加一个定时任务去自动续签证书，acme.sh 默认验证站点所有权的方式为在站点根目录生成一个文件（.well-known）来做验证，由于配置了反向代理，所以在验证的时候是无法直接访问到站点目录下的 .well-known 文件夹下的验证文件的。需要添加如下配置：\n1 2 3 4 5 location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/demo.halo.run/; } 如果上述代码失效，可以试下：\n1 2 3 location ~ /.well-known { allow all; } 至此，配置修改完毕，保存即可。最终你的配置文件可能如下面配置一样：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; listen 443 ssl http2; listen [::]:443 ssl http2; ssl_certificate /usr/local/nginx/conf/ssl/demo.halo.run.crt; ssl_certificate_key /usr/local/nginx/conf/ssl/demo.halo.run.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_timeout 10m; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_buffer_size 1400; add_header Strict-Transport-Security max-age=15768000; ssl_stapling on; ssl_stapling_verify on; server_name demo.halo.run; access_log /data/wwwlogs/demo.halo.run_nginx.log combined; index index.html index.htm index.php; root /data/wwwroot/demo.halo.run; if ($ssl_protocol = \u0026#34;\u0026#34;) { return 301 https://$host$request_uri; } include /usr/local/nginx/conf/rewrite/none.conf; #error_page 404 /404.html; #error_page 502 /502.html; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ { proxy_pass http://halo; expires 30d; access_log off; } location ~ .*\\.(js|css)?$ { proxy_pass http://halo; expires 7d; access_log off; } location ~ /(\\.user\\.ini|\\.ht|\\.git|\\.svn|\\.project|LICENSE|README\\.md) { deny all; } location / { proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://halo; } location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; allow all; root /data/wwwroot/demo.halo.run/; } } https www跳转 1 2 3 4 5 6 7 8 9 10 11 12 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; listen 443 ssl http2; listen [::]:443 ssl http2; server_name bore.vip www.bore.vip; + if ($host != \u0026#39;bore.vip\u0026#39; ) { + rewrite ^/(.*)$ https://bore.vip/$1 permanent; + } 参考链接 1.在 Linux 服务器部署 Halo 2.配置域名访问 3.CentOS 7 Nginx配置Let\u0026rsquo;s Encrypt SSL证书 4.windows 10 配置Java 环境变量 5.如何设置或更改系统时区在CentOS 8 ","date":"2020-07-24T02:21:25Z","permalink":"//localhost:1313/archives/%E5%9C%A8centos%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2halo/","title":"在Centos服务器部署Halo"},{"content":" 2022.5.17 因为jsdelivr不再稳定，此法已失效。现在还是利用typecho将插入到文章的图片自动复制到/source/img/文件夹下，方法如下:\n1.在typora菜单栏点击 格式-\u0026gt;图像-\u0026gt;设置图片根目录，将hexo/source作为其根目录即可。\n2.首先在 hexo \u0026gt; source目录下建一个文件夹叫img，用来保存博客中的图片。然后打开Typora的 文件 \u0026gt; 偏好设置，进行如下设置。\n1 2 3 4 5 6 7 8 复制到制定路径 ../img/${filename} 勾选所有选项： 对本地位置的图片应用上述规则 对网络位置的图片应用上述规则 优先使用相对路径 允许根据YAML设置自动上传图片 插入时自动转义图片URL 这样的话所有插入到md的图片都将会保存到 /source/img/该博客md文件名/图片名称。\nPS： Butterfly主题相册：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 {% gallery %} ![](../../img/2022春季趣味运动会/1.jpg) ![](../../img/2022春季趣味运动会/2.jpg) ![](../../img/2022春季趣味运动会/3.jpg) ![](../../img/2022春季趣味运动会/4.jpg) ![](../../img/2022春季趣味运动会/5.jpg) ![](../../img/2022春季趣味运动会/6.jpg) {% endgallery %} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;style\u0026gt; .page-title { display: none; } \u0026lt;/style\u0026gt; ## 骑行 \u0026lt;div class=\u0026#34;gallery-group-main\u0026#34;\u0026gt; {% galleryGroup \u0026#39;荆州行\u0026#39; \u0026#39;第一个100Km（2019.5）\u0026#39; \u0026#39;/gallery/jing-zhou-ride\u0026#39; ../img/荆州行/2.jpg %} \u0026lt;/div\u0026gt; ## 太和小学2019级 \u0026lt;div class=\u0026#34;gallery-group-main\u0026#34;\u0026gt; {% galleryGroup \u0026#39;2022春季趣味运动会\u0026#39; \u0026#39;那些精彩的瞬间\u0026#39; \u0026#39;/gallery/sport2022spring\u0026#39; ../img/2022春季趣味运动会/1.jpg %} {% galleryGroup \u0026#39;2021秋季趣味运动会\u0026#39; \u0026#39;那些精彩的瞬间\u0026#39; \u0026#39;/gallery/sport2021autumn\u0026#39; ../img/2021秋季趣味运动会/1.jpg %} {% galleryGroup \u0026#39;2021春季趣味运动会\u0026#39; \u0026#39;那些精彩的瞬间\u0026#39; \u0026#39;/gallery/sport2021spring\u0026#39; ../img/2021春季趣味运动会/3.jpg %} {% galleryGroup \u0026#39;2019秋季趣味运动会\u0026#39; \u0026#39;那些精彩的瞬间\u0026#39; \u0026#39;/gallery/sport2019autumn\u0026#39; ../img/2019秋季趣味运动会/1.jpg %} \u0026lt;/div\u0026gt; ## 湖大教技2010级 \u0026lt;div class=\u0026#34;gallery-group-main\u0026#34;\u0026gt; {% galleryGroup \u0026#39;那些花儿\u0026#39; \u0026#39;那些人，那些事\u0026#39; \u0026#39;/gallery/hubei-university\u0026#39; ../img/那些花儿/3.jpg %} {% galleryGroup \u0026#39;2012年木兰天池春游\u0026#39; \u0026#39;大学里的一次春游\u0026#39; \u0026#39;/gallery/mulan-great-lake\u0026#39; ../img/2012年木兰天池春游/4.jpg %} \u0026lt;/div\u0026gt; 手动将图片文件夹放到上述文件夹下，然后在源码模式，一个个输入图片相对路径。\n配置github 新建公共仓库 新建一个公共仓库，例如我建的仓库地址：https://github.com/iwyang/pic，注意一定要勾选使用Readme文件初始化这个仓库，否则后面会无法上传图片。\n获取私人令牌 前往设置，作用：授权仓库的操作权限，通过API实现自动化。然后填写 Token 描述，勾选 repo、write、read然后点击 Generate token 生成一个 Token。因为 Token 只会显示一次，所以先保存笔记本等。\n安装\u0026amp;配置PicGo 安装PicGo 访问PicGo Releases直接下载你的操作系统对应的安装包并完成安装。\n注：在安装的时候安装目录千万不能选C:\\Program Files\\下的任何地方，因为PicGo无法解析这一路径，如果你不知道安装在哪里的话，选择仅为我安装，否则在设置Typora时会出现错误。\n配置PicGo 在PicGo设置里作如下修改：\n1 2 3 4 5 6 设置日志文件：日志记录等级选择\u0026#34;错误-Error\u0026#34;和\u0026#34;提醒-Warn\u0026#34; 时间戳重命名：开 开启上传提示：开 上传后自动复制URL：开 选择显示的图床：只勾选Github图床 配置GitHub插件 安装好后开始配置GitHub图床\n设定仓库名：按照 用户名/仓库名 的格式填写（iwyang/pic） 设定分支名：master 设定 Token：粘贴之前叫你保存的Token。（在网盘里搜索图床会找到Token） 设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照自定义域名+上传的图片名的方式生成访问链接，放到粘贴板上。 https://cdn.jsdelivr.net/gh/用户名/仓库名（https://cdn.jsdelivr.net/gh/iwyang/pic） 点击设为默认图床 上传和管理图片 单击上传区，选择链接格式，使用点击上传或剪贴板图片上传，PicGo会自动上传图片并将符合链接格式的链接复制到剪贴板，你只要按下Ctrl+v即可粘贴图片的链接。 单击相册，你可以看到你上传的所有图片，你可以对所有图片进行复制链接，修改图片URL与删除操作，并可以批量复制或批量删除。 配置Typora 点击Typora左上角的文件-\u0026gt;偏好设置 在弹出的界面中点击图像，选择插入图片时选项为上传图片，并勾选对本地位置的图片应用上述规则和对网络位置的图片应用上述规则。 上传服务选项里选择PicGo(app)，PicGo路径选择PicGo.exe的绝对路径。 以后在Typora里插入本地图片时，它会利用PicGo自动帮你上传到github，并替换本地图片地址为github地址。\nTypora下载地址\u0026amp;皮肤 下载地址：\nTypora 1.3.8 123pan 皮肤：\nDrakeTyporaTheme npm图床 1.首先需要注册一个 npm 的账号。访问 npm 注册页面\n2.完成邮箱验证，注册完成后进入账号管理界面:头像 -\u0026gt;Account，拉倒最上方，你会看到 You have not verified your email address 字样的提示，点击以后按提示步骤验证你的邮箱。\n3.部分同学需要切换回原生源，如果你没改过源请跳过此步。（右键空白处———Git bush）来打开终端，输入以下命令：\n1 npm config set registry https://registry.npmjs.org 4.添加本地 npm 用户设置\n1 2 3 4 # 仅第一次使用需要添加用户，之后会提示你输入你的npm账号密码以及注册邮箱(第一次可能需要输入邮箱验证码) npm adduser # 非第一次使用直接登录即可，之后会提示你输入你的npm账号密码以及注册邮箱(第一次可能需要输入邮箱验证码) npm login 5.新建一个文件夹，将你需要的上传到图床的图片放到里面。也可以将你之前的GitHub仓库的图片clone下来，右键文件夹空白处打开终端。输入以下命令：\n1 npm init 运行 npm 初始化指令，把整个图床仓库打包，按照指示进行配置，注意需要事先确认你的包名没有和别人已发布的包重复，可以在 npm 官网搜索相应包名，搜不到就说明还没被占用。\n6.禁用双重验证\n如果不禁用双重验证，每次npm publish都会报错提示要输入验证码（必须加上--otp=\u0026lt;code\u0026gt;才能发布包）：\n1 npm ERR! You can provide a one-time password by passing --otp=\u0026lt;code\u0026gt; to the command you ran. 禁用方法：\n1 npm profile disable-2fa npm 将提示你输入密码，然后npm会显示Enter one-time password from your authenticator:6位数字。\n7.然后输入以下指令来发布我们的包：：\n1 npm publish 8.那么如何利用国内节点引用图片等资源呢\n1 2 3 https://unpkg.com/:package@:version/:file ## unpkg CDN https://cdn.jsdelivr.net/npm/:package@:version/:file ## jsd cdn https://cdn1.tianli0.top/npm/:package@:version/:file ## 第三方 例如：\n1 2 3 https://unpkg.com/iwyang@1.0.2/speak/butterfly-ispeak-swiper.min.js https://cdn.jsdelivr.net/npm/iwyang@1.0.2/speak/butterfly-ispeak-swiper.min.js https://cdn1.tianli0.top/npm/iwyang@1.0.2/speak/butterfly-ispeak-swiper.min.js 通过ping看出，unpkg比jsd要稳定、速度要更快，所以优先使用unpkg\n9.每次更新 npm 图床都需要先修改[AssetsRepo]\\package.json里的 version, 也就是版本号。 而 npm version patch 即为更新 package.json 里的版本号的指令，效果是末尾版本号 + 1，例如 0.0.1=\u0026gt;0.0.2、1.1.3=\u0026gt;1.1.4。免去了打开 package.json 再修改版本号的麻烦。（大版本更新还是需要手动改的）。更新 npm 图床务必要记得更新 package.json 里的版本号！\n1 npm version patch 10.可以在根目录新建 deploy.sh脚本：\n1 2 3 4 # 更新package版本号 npm version patch # 发布新版本包 npm publish 利用GitHub actions发布包 此部分内容还未测试\n1.如果每次都要在本地进行 npm publish 的话，npm 的提交是整个包一起上传的，不存在增量更新，耗时不说，而且还往往需要架梯子才能正常上传。所以我们可以把它交给 github action 来完成。\n在 npm 官网 -\u0026gt;头像 -\u0026gt;Access Tokens-\u0026gt;Generate New Token, 勾选Automation选项，Token 只会显示这一次，之后如果忘记了就只能重新生成重新配置了。\n2.在 github 的 [AssetsRepo] 仓库设置项里添加一个名为 NPM_TOKEN 的 secrets，把获取的 Npm 的Access token输入进去。\n3.在本地的 [AssetsRepo]文件夹下新建 [AssetsRepo]/.github/workflows/autopublish.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name: Node.js Package # 监测图床分支，2020年10月后github新建仓库默认分支改为main，记得更改 on: push: branches: - master jobs: publish-npm: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v1 with: node-version: \u0026#34;12.x\u0026#34; registry-url: https://registry.npmjs.org/ - run: npm publish env: NODE_AUTH_TOKEN: ${{secrets.npm_token}} 4.在本地的 [AssetsRepo] 文件夹下打开终端，运行以下指令，上传新增内容至 github，即可触发部署。\n1 2 3 4 5 6 7 # 将更改提交 git add . git commit -m \u0026#34;npm publish\u0026#34; # 更新package版本号 npm version patch # 推送至github触发action git push 此处的四行指令顺序严格。 每次更新 npm 图床都需要先修改[AssetsRepo]\\package.json里的 version, 也就是版本号。 而 npm version patch 即为更新 package.json 里的版本号的指令，效果是末尾版本号 + 1，例如 0.0.1=\u0026gt;0.0.2、1.1.3=\u0026gt;1.1.4。免去了打开 package.json 再修改版本号的麻烦。（大版本更新还是需要手动改的） 更新 npm 图床务必要记得更新 package.json 里的版本号！\n5.总结：\nGitHub 图床仓库大小不能超过 1G。当仓库超过 1G 后会有人工审核仓库内容，如果发现用来做图床，轻则删库重则封号。 Npm 有 100MB 的包大小限制，但是 NPM 有丰富的国内节点。 参考链接 1.GitHub + jsDelivr + PicGo 打造稳定快速、高效免费图床 2.手把手教你用Typora自动上传到picgo图床 3.typora + hexo博客中插入图片 4.使用npm作为图床 5.npm图床的使用技巧 6.npm 使用双因素身份验证. ","date":"2020-07-21T08:32:00Z","permalink":"//localhost:1313/archives/github-jsdelivr-picgo-typora%E6%89%93%E9%80%A0%E5%85%8D%E8%B4%B9%E9%AB%98%E9%80%9F%E5%9B%BE%E5%BA%8Anpm%E5%9B%BE%E5%BA%8A/","title":"GitHub+jsDelivr+PicGo+Typora打造免费高速图床\u0026\u0026npm图床"},{"content":"ico插件 下载插件：官网下载地址：ICO (Windows Icon) Format ，找到ICO (Windows Icon) Format，然后根据系统选择相应版本，如Windows (64 bit)，进行下载。 复制下载的ICOFormat64.8bi，粘贴到D:\\Program Files\\Adobe\\Adobe Photoshop CC 2015\\Required\\Plug-Ins\\File Formats 重新打开Photoshop点击打开会显示有.ico和.cur文件，也可以对文件进行操作，然后另存为.ico格式和.cur格式。 参考链接：使Photoshop支持ICO图片、CUR图片格式\nwebp插件 插件地址：WebP file format plug-in for Photoshop\n","date":"2020-07-13T16:43:25Z","permalink":"//localhost:1313/archives/%E8%AE%A9ps%E6%94%AF%E6%8C%81.icowebp%E6%A0%BC%E5%BC%8F/","title":"让PS支持.ico\u0026webp格式"},{"content":"准备工作 备份源文件 版本升级以前一定要先备份源文件，防止后面一些插件升级出现bug\rnpm速度太慢 如果npm install速度过慢，可安装cnpm淘宝镜像替代：\n1 npm install -g cnpm --registry=https://registry.npm.taobao.org 安装好了就可以使用cnpm来替代npm进行依赖的下载了:\n1 cnpm install 版本升级 先查看hexo版本：\n1 hexo version 升级命令如下：\n1 2 3 npm i hexo-cli -g npm update hexo version 注意：如果升级后报错，大概率是因为安装的某个插件的问题（如hexo升级5.4后，hexo-cake-moon-menu插件导致报错，就需卸载此插件，当然也有可能是主题和这个插件不兼容），这时就需要排查是哪个插件的问题，最直接的方法就是重新初始化hexo，所以说升级前备份源文件是及其重要的。\r插件升级 上面升级命令不够正确（插件没有升级，不过插件升级可能会导致bug，要事先备份好源文件），继续往下操作：\n检查插件是否有升级 1 2 npm install -g npm-check npm-check 升级系统中的插件 1 2 npm install -g npm-upgrade npm-upgrade 更新全局包 1 npm update -g 更新生产环境依赖包 1 npm update --save 再次查看版本号 1 hexo version 出现的问题 升级插件后报错：\n1 hexo TypeError [ERR_INVALID_URL]: Invalid URL 主要是因为某些插件升级后有bug，需要退版本，解决方法如下：\n删除node_modules文件夹\n把稳定版本的package.json和package-lock.json复制到当前文件夹并覆盖\nnpm install\nhexo 5.0升级 升级方法 2020.7.29 To upgrade to Hexo v5, change the following line in your package.json,\n1 2 3 4 package.json - \u0026#34;hexo\u0026#34;: \u0026#34;^4.2.1\u0026#34;, + \u0026#34;hexo\u0026#34;: \u0026#34;^5.0.0\u0026#34;, 然后\n1 2 3 npm i hexo-cli -g npm update hexo version 存在的问题 升级hexo 5.0后，hexo s后，提示：\n1 2 INFO Validating config WARN Deprecated config detected: \u0026#34;use_date_for_updated\u0026#34; is deprecated, please use \u0026#34;updated_option\u0026#34; instead. See https://hexo.io/docs/configuration for more details. 解决方法 站点配置文件_config.yml\n1 2 - use_date_for_updated: false + updated_option: mtime {% note primary %}\n1 2 3 4 5 Hexo 4.0.0 提供的 use_date_for_updated 配置项现已被 updated_option 替代。 use_date_for_updated: true 现在等价于 updated_option: \u0026#39;date\u0026#39;。 use_date_for_updated: false 现在等价于 updated_option: \u0026#39;mtime\u0026#39;。 //如果从hexo 4.0升级到5.0，这里应当是updated_option: mtime（不要引号） {% endnote %}\nhexo 6.2升级 出现问题：Asset render failed: %s css/style.css #4970\n解决方法：\nnode16 npm8 修改 package.json：\nhttps://github.com/volantis-x/demo/blob/5063cebe42975af229aea88fbcc0e25fa1cc3048/package.json#L14-L19\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 { \u0026#34;name\u0026#34;: \u0026#34;hexo-site\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;hexo generate\u0026#34;, \u0026#34;clean\u0026#34;: \u0026#34;hexo clean\u0026#34;, \u0026#34;deploy\u0026#34;: \u0026#34;hexo deploy\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;hexo server\u0026#34; }, \u0026#34;hexo\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;6.2.0\u0026#34; }, + \u0026#34;overrides\u0026#34;: { + \u0026#34;nib\u0026#34;: { + \u0026#34;stylus\u0026#34;: \u0026#34;0.54.8\u0026#34; + }, + \u0026#34;glob\u0026#34;: \u0026#34;7.2.0\u0026#34; + }, \u0026#34;dependencies\u0026#34;: { \u0026#34;hexo\u0026#34;: \u0026#34;^6.0.0\u0026#34;, \u0026#34;hexo-abbrlink\u0026#34;: \u0026#34;^2.2.1\u0026#34;, \u0026#34;hexo-deployer-git\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;hexo-filter-nofollow\u0026#34;: \u0026#34;^2.0.2\u0026#34;, \u0026#34;hexo-generator-archive\u0026#34;: \u0026#34;^1.0.0\u0026#34;, \u0026#34;hexo-generator-category\u0026#34;: \u0026#34;^1.0.0\u0026#34;, \u0026#34;hexo-generator-index\u0026#34;: \u0026#34;^2.0.0\u0026#34;, \u0026#34;hexo-generator-searchdb\u0026#34;: \u0026#34;^1.4.0\u0026#34;, \u0026#34;hexo-generator-sitemap\u0026#34;: \u0026#34;^2.2.0\u0026#34;, \u0026#34;hexo-generator-tag\u0026#34;: \u0026#34;^1.0.0\u0026#34;, \u0026#34;hexo-renderer-ejs\u0026#34;: \u0026#34;^2.0.0\u0026#34;, \u0026#34;hexo-renderer-marked\u0026#34;: \u0026#34;^5.0.0\u0026#34;, \u0026#34;hexo-renderer-pug\u0026#34;: \u0026#34;^2.0.0\u0026#34;, \u0026#34;hexo-renderer-stylus\u0026#34;: \u0026#34;^2.0.1\u0026#34;, \u0026#34;hexo-server\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;hexo-theme-butterfly\u0026#34;: \u0026#34;^4.1.0\u0026#34;, \u0026#34;hexo-theme-landscape\u0026#34;: \u0026#34;^0.0.3\u0026#34;, \u0026#34;hexo-wordcount\u0026#34;: \u0026#34;^6.0.1\u0026#34; } } 删除 package-lock.json node_modules 然后 执行安装命令:\n1 npm i （安装glob只是执行了npm i，并没有什么用，如果安装了建议马上卸载 npm un glob）\n#4968\nisaacs/node-glob#471\n参考链接 1.hexo版本升级 2.Hexo版本升级和Next主题升级之坑 3.hexo TypeError ERR_INVALID_URL: Invalid URL 4.npm太慢，安装cnpm淘宝镜像替代 5.\u0026ldquo;use_date_for_updated\u0026rdquo; is deprecated 6.Hexo 5.0.0 正式发布 7.Asset render failed: %s css/style.css #4970 ","date":"2020-07-12T11:05:00Z","permalink":"//localhost:1313/archives/hexo%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/","title":"hexo版本升级"},{"content":"记得这是一次青年教师什么考试的题目，当然没能够做出来，有必要记录一下，代码如下：\n1 2 3 4 5 6 7 8 cs repeat 36+18[rt 5 fd 10 rt 5] repeat 36+18[lt 5 fd 10 lt 5] repeat 36[rt 5 fd 10 rt 5] repeat 36[rt 5 fd 10 rt 5] rt 90 repeat 36[rt 5 fd 10 rt 5] pu bk 115 pd repeat 36[rt 5 fd 10 rt 5] 参考链接：用嵌套repeat画奥运五环 是pc logo 里的\n","date":"2020-07-12T01:16:25Z","permalink":"//localhost:1313/archives/%E7%94%A8pc-logo%E7%94%BB%E4%BA%94%E7%8E%AF/","title":"用PC Logo画五环"},{"content":"首先保障手机已解锁，一加5T解锁教程：一加5T解锁、root、刷机教程\nroot\u0026amp;EdXposed框架 准备以下6个文件 注意要先把2—6号文件放在手机根目录（如果放在文件夹里，文件夹名不能有中文）。\n一加手机5T工具箱 _2.2.1 twrp-3.3.1-0-dumpling.img （第三方recovery镜像） Magisk-v20.4(20400).zip （集root管理、模块安装等功能） MM管理器(叶子修改版)v1.8.zip 可在TWRP下对Magisk模块进行管理、卸载。一定要先安装这个，再安装EdXposed的两个模块，防止安装模块后手机变砖无法开机，这时就可以通过MM管理器来删除安装的模块，使用方法：在第三方rec下，点击高级→终端，输入/data/media/mm，然后回车，就可以禁用该模块了。 Riru_(Riru_-Core)-v21.2(35).zip和Riru-EdXposed-v0.4.6.1(4510)_(YAHFA)(4510).zip （EdXposed两个模块包）\nEdXposedManager.apk （EdXposed管理器）\n刷入第三方recover\u0026amp;root\n打开一加手机5T工具箱，选择选项8—刷写自选Recovery，按照提示把下载好的rec拖入工具箱随后回车刷入。（如果无法拖入，直接输入rec路径即可） 刷完会自动进入第三方Recovery（TWRP），这时候可以一次性选择2—5号文件刷入，当然如果只想root则只用刷入Magisk。 root后可以利用link2sd这个软件，冻结或者卸载系统应用，安卓10好像只能冻结，卸载不了。具体使用方法，例如：搜索更新，将自动更新冻结，以后就收不到更新了。 刷入EdXposed模块 选择MM管理器以及两个模块刷入。（如果模块无法刷入，可能是命名格式问题，将模块重命名为1.zip、2.zip即可，同理上面Magisk无法刷入，也重命名一下；实在不行就在Magisk里刷入模块）\n安装EdXposed管理器\n重启手机安装EdXposed管理器。之后就是安装各种使用的模块了。\n救砖 主要教程查看：一加手机全系列⑮机型线刷救砖资源★附教程，这里要注意以下几点：\n1.救砖后系统恢复为安卓7。\n2.要升级系统好像只能逐级升级（安卓7—安卓8—安卓9—安卓10），将下载好的官方全量包—安卓8、安卓9、安卓10放在根目录依次升级，如果想直接从安卓7升级到安卓10，会失败。这里用官方recovery即可。\n3.升级到安卓9，出现bug—WiFi开关打不开；升级到安卓10，出现bug—相机、手电筒不能用。于是乎就卡刷了第三方ROM：终结之作-5T Beta30 纯净优化包，刷这个包用到的recovery是用一加手机5T工具箱 _2.2.1刷的自选Recovery—twrp-3.3.1。\n4.root后可以利用link2sd这个软件，冻结或者卸载系统应用，安卓10好像只能冻结，卸载不了。具体使用方法，例如：搜索更新，将自动更新冻结，以后就收不到更新了。\n5.网上还有线刷的方法：【任意升降级】一加系统任意升级降级 7.1/8.0/8.1 新手福利，不过测试未成功，不想再折腾了。\n6.不知为什么升级到安卓10后，相机不能用了。以后就暂且用这个包：终结之作-5T Beta30 纯净优化包。（这里好像是在升级到安卓10出现问题后，再卡刷这个包的，不知道能否直接从安卓7卡刷，以后有机会再测试吧，当然要注意recovery版本不能太低了，用twrp-3.3.1应该没问题）。\n手机使用记录 2018年2月买的，用到2021年6月 一加9R 2021年6月买的一加5T 参考链接 1.OnePlus 5T Android 10 root亲测教程 2.完美支持安卓10Xposed框架★EdXposed ","date":"2020-07-10T10:34:25Z","permalink":"//localhost:1313/archives/%E4%B8%80%E5%8A%A05t%E5%AE%89%E5%8D%9310rootedxposed%E6%A1%86%E6%9E%B6%E6%95%91%E7%A0%96/","title":"一加5T(安卓10)root\u0026EdXposed框架\u0026救砖"},{"content":"从学生的角度来讲，把一个正方形一部分成四份，应该有四种分法,如图所示：\n但是，如果不是学生，有人突然问你这样的一个问题，你就可以这样回答：有无数种方法。如：\n另外，我们还可以正方形的中心为交点画一个互相垂直的直线，然后沿此中心旋转，被分成的四个部分永远都是平均的四份。\n参考链接：把一个正方形平分成四份.有几种分法\n","date":"2020-07-09T02:15:25Z","permalink":"//localhost:1313/archives/%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%B9%B3%E5%88%86%E6%88%90%E5%9B%9B%E4%BB%BD/","title":"把一个正方形平分成四份"},{"content":"生成公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\n1 2 git config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; 1 2 3 4 cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n上传id_rsa.pub 在右上角个人账户依次点击Settings-\u0026gt;SSH and GPG keys添加刚刚生成的公钥，名称随意。\n上传id_rsa 然后在 Settings \u0026gt; Secrets 中新增一个 secret，命名为 DEPLOY_KEY，把私钥 id_rsa 的内容复制进去，供后续使用。\n配置 GitHub Actions 第一种 在博客根目录新建.github/workflows/gh_pages.yml文件。代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 name: Hexo Deploy # 只监听 source 分支的改动 on: push: branches: - develop # 自定义环境变量 env: POST_ASSET_IMAGE_CDN: true jobs: build-and-deploy: runs-on: ubuntu-latest steps: # 获取博客源码和主题 - name: Checkout uses: actions/checkout@v2.3.4 - name: Checkout theme repo uses: actions/checkout@v2.3.4 with: repository: jerryc127/hexo-theme-butterfly ref: master path: themes/butterfly # 这里用的是 Node.js 14.x - name: Set up Node.js uses: actions/setup-node@v2 with: node-version: \u0026#39;14\u0026#39; # 设置 yarn 缓存，npm 的话可以看 actions/cache@v2 的文档示例 - name: Get yarn cache directory path id: yarn-cache-dir-path run: echo \u0026#34;::set-output name=dir::$(yarn cache dir)\u0026#34; - name: Use yarn cache uses: actions/cache@v2.1.6 id: yarn-cache with: path: ${{ steps.yarn-cache-dir-path.outputs.dir }} key: ${{ runner.os }}-yarn-${{ hashFiles(\u0026#39;**/yarn.lock\u0026#39;) }} restore-keys: | ${{ runner.os }}-yarn- # 安装依赖 - name: Install dependencies run: | yarn install --prefer-offline --frozen-lockfile # 从之前设置的 secret 获取部署私钥 - name: Set up environment env: DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} run: | sudo timedatectl set-timezone \u0026#34;Asia/Shanghai\u0026#34; mkdir -p ~/.ssh echo \u0026#34;$DEPLOY_KEY\u0026#34; \u0026gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hosts # 生成并部署 - name: Deploy run: | npx hexo deploy --generate - name: Deploy Hexo to Server uses: SamKirkland/FTP-Deploy-Action@4.1.0 with: server: 104.224.191.88 username: admin password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/blog/ 第二种 PS：第二种比第一种慢。\n首先确认 _config.yml 文件中有类似如下的 GitHub Pages 配置：\n1 2 3 4 5 deploy: type: git repo: github: git@github.com:iwyang/hexo.git branch: gh-pages 配置私钥 首先在 GitHub 上打开保存 Hexo 的仓库，访问 Settings -\u0026gt; Secrets，然后选择 New secret; 名字部分填写：HEXO_DEPLOY_KEY，注意大小写，这个后面的 GitHub Actions Workflow 要用到; 在 Value 的部分填入 github-deploy-key 中的内容。 添加公钥 接下来我们需要访问存放网页的仓库，也就是 Hexo 部署以后的仓库，访问 Settings -\u0026gt; Deploy keys; 按 Add deploy key 来添加一个新的公钥； 在 Title中输入：HEXO_DEPLOY_PUB 字样，当然也可以填写其它自定义的名字; 在 Key 中粘贴 github-deploy-key.pub文件的内容。 创建 Workflow 在 Hexo 的仓库中创建一个新文件：.github/workflows/auto_deploy.yml，文件的内容如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 name: auto deploy # workflow name # 只监听 source 分支的改动 on: push: branches: - develop jobs: build: # job1 id runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu name: auto deploy steps: - name: Checkout # step1 获取源码 uses: actions/checkout@v1 # 使用 actions/checkout@v1 with: # 条件 submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？ - name: Setup Node.js 12.x uses: actions/setup-node@master with: node-version: \u0026#34;12.x\u0026#34; - name: Generate Public Files run: | npm i npm install hexo-cli -g hexo clean \u0026amp;\u0026amp; hexo generate - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.HEXO_DEPLOY_KEY }} external_repository: iwyang/hexo publish_branch: public publish_dir: ./public commit_message: ${{ github.event.head_commit.message }} user_name: \u0026#39;github-actions[bot]\u0026#39; user_email: \u0026#39;github-actions[bot]@users.noreply.github.com\u0026#39; - name: Deploy Hexo to Server uses: SamKirkland/FTP-Deploy-Action@4.1.0 with: server: 104.224.191.88 username: hexo password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/hexo/ github、gitee、服务器三线部署 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 name: Hexo Deploy # 只监听 source 分支的改动 on: push: branches: - develop # 自定义环境变量 env: POST_ASSET_IMAGE_CDN: true jobs: build-and-deploy: runs-on: ubuntu-latest steps: # 获取博客源码和主题 - name: Checkout uses: actions/checkout@v2.3.4 - name: Checkout theme repo uses: actions/checkout@v2.3.4 with: repository: jerryc127/hexo-theme-butterfly ref: master path: themes/butterfly # 这里用的是 Node.js 14.x - name: Set up Node.js uses: actions/setup-node@v2 with: node-version: \u0026#39;14\u0026#39; # 设置 yarn 缓存，npm 的话可以看 actions/cache@v2 的文档示例 - name: Get yarn cache directory path id: yarn-cache-dir-path run: echo \u0026#34;::set-output name=dir::$(yarn cache dir)\u0026#34; - name: Use yarn cache uses: actions/cache@v2.1.6 id: yarn-cache with: path: ${{ steps.yarn-cache-dir-path.outputs.dir }} key: ${{ runner.os }}-yarn-${{ hashFiles(\u0026#39;**/yarn.lock\u0026#39;) }} restore-keys: | ${{ runner.os }}-yarn- # 安装依赖 - name: Install dependencies run: | yarn install --prefer-offline --frozen-lockfile # 从之前设置的 secret 获取部署私钥 - name: Set up environment env: DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} run: | sudo timedatectl set-timezone \u0026#34;Asia/Shanghai\u0026#34; mkdir -p ~/.ssh echo \u0026#34;$DEPLOY_KEY\u0026#34; \u0026gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hosts # 生成并部署 - name: Deploy run: | npx hexo deploy --generate - name: Deploy Hexo to Server uses: SamKirkland/FTP-Deploy-Action@4.1.0 with: server: 104.224.191.88 username: admin password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/blog/ - name: Sync to Gitee uses: wearerequired/git-mirror-action@master env: # 注意在 Settings-\u0026gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }} with: # 注意替换为你的 GitHub 源仓库地址 source-repo: git@github.com:iwyang/iwyang.github.io.git # 注意替换为你的 Gitee 目标仓库地址 destination-repo: git@gitee.com:iwyang/iwyang.git - name: Build Gitee Pages uses: yanglbme/gitee-pages-action@main with: # 注意替换为你的 Gitee 用户名 gitee-username: iwyang # 注意在 Settings-\u0026gt;Secrets 配置 GITEE_PASSWORD gitee-password: ${{ secrets.GITEE_PASSWORD }} # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错 gitee-repo: iwyang/iwyang # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在） branch: master 将hexo三线部署（由于部署hexo较慢，如果单独为gitee建立一个workflows，gitee会先部署完成，这样无法同步；hugo可以单独为gitee建立一个workflows，因为hugo部署到服务器会先于部署到gitee）\n推送到远端 配置Hexo的_config.yml 1 2 3 4 5 6 7 deploy: type: git repo: github: git@github.com:iwyang/iwyang.github.io.git branch: master name: iwyang email: 455343442@qq.com 当然，具体步骤还是得根据自己的需求进行相应的修改。\n提交源码 今后只需备份源码到develop分支，gitbub action就会自动部署博客到iwyang.github.io仓库。\n1 2 3 4 5 6 git init git checkout -b develop git remote add origin git@github.com:iwyang/iwyang.github.io.git git add . git commit -m \u0026#34;备份源码\u0026#34; git push --force origin develop 最终部署脚本 deploy.sh内容：\n1 2 3 4 5 6 7 8 9 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; # backup git config --global core.autocrlf false git add . git commit -m \u0026#34;site backup\u0026#34; git push origin develop --force 参考链接 使用 GitHub Actions 自动部署 Hexo 博客 GitHub Actions 实现 Hexo 自动部署 ","date":"2020-07-07T11:11:25Z","permalink":"//localhost:1313/archives/hexo%E5%88%A9%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2/","title":"hexo利用Github Actions自动构建博客"},{"content":"初始化 GitHub 仓库 Github上新建一个名为iwyang.github.io的仓库。\n配置ACTIONS_DEPLOY_KEY 生成公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\n1 2 git config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; 1 2 3 4 cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n上传id_rsa.pub 点击博客仓库的Settings-\u0026gt;Deploy keys-\u0026gt;add deploy key，Title填写ACTIONS_DEPLOY_KEY，Key填写id_rsa.pub文件的内容。\n上传id_rsa 点击博客仓库的Settings-\u0026gt;Secrets-\u0026gt;Add a new secret，Name填写ACTIONS_DEPLOY_KEY，Value填写id_rsa文件的内容。\n利用FTP-Deploy-Action上传文件 这里在Github actions里利用FTP-Deploy-Action上传文件到服务器。项目地址：SamKirkland/FTP-Deploy-Action\n首先是搭建ftp服务器。\n安装vsftpd 1 sudo yum install vsftpd -y 安装软件包后，启动vsftpd，并使其能够在引导时自动启动：\n1 2 sudo systemctl start vsftpd sudo systemctl enable vsftpd 配置vsftpd 1 vi /etc/vsftpd/vsftpd.conf 在userlist_enable=YES下面，加上：\n1 2 userlist_file=/etc/vsftpd/user_list userlist_deny=NO 创建FTP用户 创建一个新用户，名为git: 1 2 sudo adduser git sudo passwd git 将用户添加到允许的FTP用户列表中： 1 echo \u0026#34;git\u0026#34; | sudo tee -a /etc/vsftpd/user_list 设置正确的权限 为了使ftp用户可以上传网站文件到相应目录：\n1 2 sudo chmod 755 /var/www/hexo sudo chown -R git: /var/www/hexo 重启vsftpd服务。 保存文件并重新启动vsftpd服务，以使更改生效：\n1 sudo systemctl restart vsftpd 配置FTP_MIRROR_PASSWORD 点击博客仓库的Settings-\u0026gt;Secrets-\u0026gt;Add a new secret，Name填写FTP_MIRROR_PASSWORD，Value填写用户密码。\n配置 Github actions 在博客根目录新建.github/workflows/gh_pages.yml文件。代码（不添加缓存）如下：最好使用下面添加了缓存的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 name: GitHub Page Deploy on: push: branches: - develop jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout master uses: actions/checkout@v2.3.4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2.5.0 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build Hugo run: hugo --minify - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v3.8.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public # cname: - name: Deploy Hugo to Server uses: SamKirkland/FTP-Deploy-Action@4.1.0 with: server: 104.224.191.88 username: git password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/hexo/ 添加缓存：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 name: GitHub Page Deploy on: push: branches: - develop jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout master uses: actions/checkout@v2.3.4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2.5.0 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Cache resources # 缓存 resource 文件加快生成速度 uses: actions/cache@v2 with: path: resources # 检查照片文件变化 key: ${{ runner.os }}-hugocache-${{ hashFiles(\u0026#39;content/**/*\u0026#39;) }} restore-keys: ${{ runner.os }}-hugocache- - name: Build Hugo run: hugo --minify --gc - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v3.8.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public # cname: - name: Deploy Hugo to Server uses: SamKirkland/FTP-Deploy-Action@4.1.0 with: server: 104.224.191.88 username: git password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/hexo/ 第三方：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 name: GitHub Page on: push: branches: - master # master 更新触发 jobs: deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 with: submodules: true # clone submodules fetch-depth: 0 # 克隆所有历史信息 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.87.0\u0026#34; # Hugo 版本 extended: true # hugo插件版 Stack主题 必须启用 - name: Cache resources # 缓存 resource 文件加快生成速度 uses: actions/cache@v2 with: path: resources # 检查照片文件变化 key: ${{ runner.os }}-hugocache-${{ hashFiles(\u0026#39;content/**/*\u0026#39;) }} restore-keys: ${{ runner.os }}-hugocache- - name: Build # 生成网页 删除无用 resource 文件 削减空行 run: hugo --minify --gc - name: Deploy # 部署到 GitHub Page uses: peaceiris/actions-gh-pages@v3 with: # 如果在同一个仓库下使用请使用 github_token 并注释 deploy_key # github_token: ${{ secrets.GITHUB_TOKEN }} deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # 如果在同一个仓库请注释 external_repository: # 你的 GitHub page 仓库 example/example.github.io publish_dir: ./public user_name: \u0026#34;github-actions[bot]\u0026#34; user_email: \u0026#34;github-actions[bot]@users.noreply.github.com\u0026#34; full_commit_message: Deploy from ${{ github.repository }}@${{ github.sha }} 🚀 提交源码 初始化git，新建并切换到develop分支，将源码提交到develop分支。稍等片刻，github action会自动部署blog到master分支。\n1 2 3 4 5 6 git init git checkout -b develop git remote add origin git@github.com:iwyang/iwyang.github.io.git git add . git commit -m \u0026#34;备份源码\u0026#34; git push --force origin develop 最终部署脚本 1 2 3 4 5 6 7 8 9 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; # backup git config --global core.autocrlf false git add . git commit -m \u0026#34;site backup\u0026#34; git push origin develop --force 本地操作 1 git clone -b develop git@github.com:iwyang/iwyang.github.io.git blog --recursive 因为使用Submodule管理主题，所以最后要加上 --recursive，因为使用 git clone 命令默认不会拉取项目中的子模块，你会发现主题文件是空的。（另外一种方法：git submodule init \u0026amp;\u0026amp; git submodule update）\n同步更新源文件 1 git pull 同步主题文件 1 git submodule update --remote 运行此命令后， Git 将会自动进入子模块然后抓取并更新，更新后重新提交一遍，子模块新的跟踪信息便也会记录到仓库中。这样就保证仓库主题是最新的。\n服务器通过git拉取更新 2021.8.15 已经不用此方法，现在直接在Github actions利用FTP-Deploy-Action上传文件到服务器。\n克隆仓库 1 2 rm -rf /var/www/hexo git clone git@github.com:iwyang/iwyang.github.io.git /var/www/hexo 出现问题 执行上一步可能会出现问题： Permission denied (publickey). Could not read from remote repository。\n解决方法：\n服务器生成ssh key 1 2 yum install rsync -y ssh-keygen -t rsa -C \u0026#34;455343442@qq.com\u0026#34; 一路回车即可，会生成你的ssh key。然后再终端下执行命令：\n1 ssh -v git@github.com 这时会报错，最后两句是：\n1 2 No more authentication methods to try. Permission denied (publickey). 在终端再执行以下命令：\n1 ssh-agent -s 接着在执行:\n1 ssh-add ~/.ssh/id_rsa 出现问题：Could not open a connection to your authentication agent.\n解决方法：使用：ssh-agent bash 命令，然后再次使用ssh-add ~/.ssh/id_rsa_name这个命令就没问题了。(注意：Identity added: \u0026hellip;这是ssh key文件路径的信息，如/.ssh/id_rsa)\n配置github 打开你刚刚生成的id_rsa.pub，将里面的内容复制，进入你的github账号，在settings下，SSH and GPG keys下new SSH key，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。\n验证Key 1 ssh -T git@github.com 设置crontab定时任务： 1 2 crontab -e */5 * * * * git -C /var/www/hexo pull 这样只要提交源码给github，github action就会帮你部署博客到github page，服务器通过git pull定时拉取更新。换台电脑不用再搭建环境，直接在gtihub新建或者修改文章，剩下的工作就交给github action。注意回本地电脑先git pull拉取更新，再提交源码。\n注意：好像先要从源码仓库clone一份源码到本地，才能利用git pull拉取github已有的更新。只有先拉取github已有的更新，再在本地提交源码，github上的更新才不会被删除。\n附：使用Git Submodule管理Hugo主题 如果克隆库的时候要初始化子模块，请加上 --recursive 参数，如： 1 git clone -b develop git@github.com:iwyang/iwyang.github.io.git blog --recursive 如果已经克隆了主库但没初始化子模块，则用： 1 git submodule update --init --recursive 如果已经克隆并初始化子模块，而需要从子模块的源更新这个子模块，则： 1 git submodule update --recursive --remote 更新之后主库的 git 差异中会显示新的 SHA 码，把这个差异选中提交即可。\n其他命令：在主仓库更新所有子模块：git submodule foreach git pull origin master 参考链接 1.使用Github Actions自动编译部署基于hugo的博客 2.用 Hugo 自动构建 搭建 GitHub Pages 3.使用 GitHub Action 自动部署博客到远程服务器 4.使用 GitHub Actions 实现博客自动化部署 5.解决git@github.com: Permission denied (publickey). Could not read from remote repository 6.GIT 子模块 7.子模块 8.Stack主题 + GitHub Action ","date":"2020-07-06T09:19:19Z","permalink":"//localhost:1313/archives/hugo%E5%88%A9%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2/","title":"hugo利用Github Actions自动构建博客"},{"content":"\n思路： 以最后一个数三角形有几个为例：\n首先给小三角形编号：1号、2号、3号。 先数小三角形有几个：3个 再数中型三角形（ 把两个小三角形看作一个中型三角形）有几个：1号和2号是一个，2号和3号是一个，合起来是2个。 大三角形有1个。 所以一共有：3+2+1=6（个） 总结： 感觉还是做个flash动画直观一些。\n参考链接： 1.怎么数一数到底有几个三角形，一年级数学认识图形\n2.一年级下数学：如何教孩子数图形的个数，才不会漏数呢？\n3.一年级数学-巧数图形\n","date":"2020-06-29T06:10:25Z","permalink":"//localhost:1313/archives/%E4%B8%80%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E6%95%B0%E5%9B%BE%E5%BD%A2%E6%9C%89%E5%87%A0%E4%B8%AA/","title":"一年级数学下册数图形有几个"},{"content":"这里以Excel 2019为例。\n首先选中表格相应区域。 依次选择开始—条件格式—突出显示单元格规则—重复值。 重复的单元格会突出显示，修改重复项后，突出显示自动消失。\n参考链接：excel一列中如何找出重复的数据？\n","date":"2020-06-29T05:54:25Z","permalink":"//localhost:1313/archives/excel%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E9%A1%B9/","title":"Excel查找重复项"},{"content":"**摘要：**在信息化教育的背景下，数学教师应当在推进小学数学创新教学的过程中，果断地应用信息技术，使其成为推进创新的有力助手，如可以使用微课教学，构建直播课堂，打开学习的新空间，并且能够运用多媒体加强线下的教学能力，这会有助于推进创新教学。\n**关键词：**信息技术；小学数学；创新\n引言：\n在创新教学的前提下，需要分别在教育方式与思维上进行创新，一方面可以整合信息技术，在方式上进行创新，另一方面可以吸收新课改等先进的教育思维，学会从生活中涉及教育，在引导中逐步渗透，这会更利于学生，使其能够慢慢地提升积极性，从而可以实现创新教学的目的。\n一、信息技术对小学数学创新教学的重要性分析\n（一）能够予以充足的工具支持\n从当前信息技术应用在学科教育中的工具类型来看，根据需求和应用途径的不同，会分为若干种类，如视频类、图文类、辅助类等，每种工具都有独特的功能，因此若将信息技术应用在小学数学课程中，可以为创新教学予以充足的工具支持。\n（二）能够予以充足的资源支持\n信息技术工具除了自带某种功能外，还经常与互联网联系在一起，这就意味着使用者可以从互联网中搜集各种想要的资源，因此在推进创新教学中，可以充分运用互联网，结合信息技术工具，能够应用许多信息化的资源，从而有助于推进创新教学。\n二、在小学数学创新教学中存在的问题\n（一）教学手段受限制\n若要做到创新的目的，多元化的教学手段是必要的选择，但是从目前情况来看，由于客观因素的限制，导致不少教师的教学手段受限制，不能在实质上突破传统教学工具的局限性，不能达到创新教学的目的。\n（二）积极性不足\n在创新教学的过程中，学生与课堂的契合度是考验创新成果的重要因素，使其能够适应新形式的课堂，但是目前情况来看，若干名学生具备的积极性不足，即使在课堂中应用新型的教学方式，依旧不能有效地改变现状，这就需要反思其中的缘由。\n三、信息技术支持下的小学数学创新教学策略分析\n（一）使用微课进行教学\n微课是信息技术应用在学科教育中的重要表现，既具有多媒体的演示功能，又具有包容多种资源的功能，可以被用于若干部分的教学工作中，这会有助于推进创新教学。因此，在小学数学中，可以将微课融入各章节的教学过程中，既可以充当有效的引导工具，又可以加入新内容，这就能够达到创新的目的。例如，在教学《线与角》时，可以分别演示两段微课视频，第一段视频中会讲述线与线的位置关系，如平行、垂直等，并且会用虚线、实线、点表示画线的过程，在第二段视频中会讲述平角、周角，用图形的变化表示两种角的形成过程，同时会用量角器表示若干角。在课堂中，不仅可以演示微课视频，而且可以配合视频中的内容，同步指导学生，如在关于角的微课中，当在讲到用线段OA逆时针旋转时，可以提问说：“当这条线段旋转后，会变成什么？请你们猜一猜吧”，使学生对视频中的图文有所质疑，再继续播放，使其能够加深对周角的认识。另外，在课堂之外，可以运用微课视频充当补习、复习等方面的工具，如作为补习的工具时，教师会自行录制视频，会对课堂中未能充分说明的内容，或者对某些成绩较差的学生进行提点，协助其慢慢地弥补与其他同学的差距；作为复习的工具时，可以用于考试前的复习阶段，自行录制视频，简要地概括某单元的要点，令学生加紧考前的复习任务，或者会在教完某堂课后，让学生回家后借助微课复习当天的课程。\n（二）构建直播课堂\n当前，直播教学是基于现实意义的新型教学方式，通过某些直播类型的教育软件，可以实现远程的在线教育，既能解除教室空间的束缚，又能实现教育目的。因此，数学教师可以构建直播课堂，在适当的时间内与学生建立联系，进而可以展开教学。\n例如，以希沃白板为例，该软件中拥有“云课堂”的功能，专门用于远程教育，若要保证师生能够面对面地交流，可以建立“直播课堂”，若仅通过讲话的方式交流，可以建立“语音课堂”，在创建后，会任意产生一张二维码图片，这是进入直播教室的钥匙，将其发送给班内的学生，令其用微信扫描图中的二维码，随即会弹出小程序的窗口，点击报名后即可进入课堂。在开课前，可以通过观察“学生”栏的姓名，统计进入教室的人数，同时进行点名，在确认所有人进入后，开始正式上课，此时可以像往常一样，利用多媒体课件逐部分地讲述，若要让某名学生说话，可以给其开放连麦权限，使其通过手机讲话，说完关闭权限，若要临时提问，可以利用答题板的功能，设计选择题或主观题，边说题，边让学生思考，选择相应的选项，或者自行写出答案，再拍照传送到课堂中，随后由教师阅览检查，对优秀的学生提出夸赞，同时可以利用“小奖杯”的功能，给其颁发奖章，随后继续讲解某部分的内容。\n另外，在选择直播教学时间的时候，可以根据不同的需求开播，如在暑寒假的时候，若要提前对下学期的新内容预热，可以利用直播教学的手段，与学生建立教学关系，在直播课堂内讲述新内容；若因某些特殊因素无法正常开课时，可以利用直播教学的手段，提前制作课件，正常地展开教学。并且，在展开直播教学的过程中，需要家长的配合，令其督促学生按时上课，在过程中不乱跑，不会任意打开手机中的游戏玩耍，避免对直播教学造成影响。还有，直播教学应当与课堂评价有效地结合起来，每当提出某个问题后，需要对其进行中肯地评价，使学生能够听到褒奖的同时，可以了解不足的地方，这样才能充分运用直播教学的手段，逐步增强学习能力。\n（三）运用多媒体进行教学\n除了在网络中教学外，信息技术还可以应用在现实的课堂中，通过多媒体的形式展现出来，若用于数学学科，可以依据教学内容的变化，选择较为恰当的多媒体信息辅助，一方面有助于体现数学知识中的逻辑关系，另一方面有助于增强学生的积极性。\n例如，在教学《变化的图形》时，从课题内容来看，平移、旋转等图形是要点，这就可以运用多媒体展示生活中存在的现象，如游乐园中旋转的摩天轮、在空中滑过的飞机等，在观看的过程中，会点拨学生，使其能够对生活现象产生疑问，再进入本小节的内容进行讲解；在教学《周长》时，从课题内容来看，计算简单图形的周长是要点，这就可以运用多媒体展示某些物体，如大货厢等，用线条画出物体的周边，指导学生产生质疑，再进行详细讲解。\n另外，可以利用多媒体创建一些易于理解的数学模型，促使学生能够加深认识，如在教学《时、分、秒》时，从课题内容来看，钟表上的时刻是要点，可以借助希沃白板，加入关于钟表的数学模型，其中会有一个较大的钟表，表内的时、分、秒针会用不同的颜色表示，并且小时的刻度与分钟的刻度大小不一、颜色不一，易于学生区分，随后可以选择其中的某些选项，如选择“显示/隐藏秒针”后，表盘中的秒针会自动隐藏，仅剩时针、分针，教师可以利用该功能，讲述三个表示时间的指针的用途，以及每根指针表示的时间，并且选择“练习认时刻”后，每点击一次表盘中的时间会变化一次，可以利用该功能，训练学生认识时间，同时可以选择“数字式”，在表盘下方会显示相应的数字时间，可以让学生边读边看，这就能够提高教学成果。\n四、结束语\n综上所述，信息技术是当前数学课程创新的重要动力，既会提供多种可用的教学工具，又会提供充足的教学资源，对改进课程的教学手段具有明显的帮助作用，因此需要数学教师牢牢地把握该项技术手段，能够推进课程创新。\n","date":"2020-06-26T16:56:10Z","permalink":"//localhost:1313/archives/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81%E4%B8%8B%E7%9A%84%E5%B0%8F%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%88%9B%E6%96%B0%E6%95%99%E5%AD%A6/","title":"信息技术支持下的小学数学创新教学"},{"content":"笔记本换SSD后，原来机械硬盘没用了。这时可以将原来的硬盘改成移动硬盘。方法是买一个移动硬盘盒子。下面着重记一下在移动硬盘安装PE的方法。\n1.用DiskGenius给移动硬盘分区：新建一个5G大小的FAT32格式的分区，用来安装PE；硬盘其他空间新建一个NTFS格式的分区，用来存放文件。\n2.打开微PE工具箱，右下角选择安装PE到移动硬盘，第一主分区选择刚才建立的FAT32分区，然后点击立即安装进移动硬盘。\n3.将操作系统等相关文件复制到FAT32分区里，便于安装系统使用。\n","date":"2020-06-16T05:51:25Z","permalink":"//localhost:1313/archives/%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%A1%AC%E7%9B%98%E6%94%B9%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%AE%89%E8%A3%85pe/","title":"笔记本硬盘改移动硬盘\u0026分区安装PE"},{"content":"使用方法：\n1.首先安装SpleeterGUI_v2.5.msi，安装到任意位置即可。\n2.然后进入训练模型目录，以管理员模式运行安装SpleeterGUI之后右键管理员模式运行这个.bat。最后相应文件夹会被拷贝到C:\\Users\\Admin\\AppData\\Roaming目录下，如果卸载该软件，也要手动删除此文件夹。\n总结：此软件除了消音乐伴奏外，还可以去视频（例如MTV）里的人声。\n","date":"2020-06-15T05:09:25Z","permalink":"//localhost:1313/archives/%E4%BA%BA%E5%A3%B0%E4%BC%B4%E5%A5%8F%E5%88%86%E7%A6%BB%E5%88%86%E7%A6%BB%E7%A5%9E%E5%99%A8spleeter-gui_v2.5/","title":"人声伴奏分离分离神器：Spleeter GUI_v2.5"},{"content":"求“括号最大能填几”，分两步计算。例如：\n(1) 39-( )＞14\n第一步，先想比14大1的数是几？14+1=15；\n第二步，再想39减几等于15，39-( )=15，答案是24。\n(2) 84＞( )+12\n第一步，先想比84小1的数是几，84-1=83；\n第二步，再想几加12等于83，答案是71。\n(3) 29+( )＜46\n第一步，先想比46小1的数是几，46-1=45，是45。 第二步，再想29加几等于45，45-29=16，答案是16。 更多有关“括号最大能填几”内容，可查看：括号里最大能填几？\n","date":"2020-06-02T02:02:25Z","permalink":"//localhost:1313/archives/%E4%B8%80%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E6%8B%AC%E5%8F%B7%E6%9C%80%E5%A4%A7%E8%83%BD%E5%A1%AB%E5%87%A0/","title":"一年级数学括号最大能填几"},{"content":" 什么是“一图四式”呢？\n**给出一个图，写出四个算式，两道加法算式，两道减法算式。**这类数学题的目的，是为了训练一年级小学生看图的能力，以及对加减法意义的理解。\n口诀：\n1 2 3 4 5 一图四式题，先来数左边，再来数右边， 两道加法题，左边加右边，右边加左边。 两位减法题，先来数总数， 总数减左边，就等于右边。 总数减右边，就等于左边。 参考链接：一年级数学“一图四式”\n","date":"2020-05-28T07:20:25Z","permalink":"//localhost:1313/archives/%E4%B8%80%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%80%E5%9B%BE%E5%9B%9B%E5%BC%8F%E9%97%AE%E9%A2%98/","title":"一年级数学一图四式问题"},{"content":"排除关键词 方法是：减号+关键词\n功能是：排除一些 不想要的关键词\n例如：锤子 -锤子手机\n精确搜索 方法是：给关键词加引号\n功能是：只搜索引号里的字\n指定网站内搜索 方法是：site:域名+关键词（此处加号代表空格）\n功能是：在指定网站内搜索\n指定文件格式 方法是：filetype:文件格式+关键词（此处加号代表关键词）\n功能是：指定文件格式\n指定标题搜索 方法是：intitle:关键词\n功能是：搜索结果必须在标题中\n两种指定范围搜索 锤子 intext:苹果:要求搜索结果中有这个关键词。\nallintext:认知心理学 发展心理学 积极心理学 ：要求三个关键词都包括在搜索结果中。\ninurl:关键字：要求在网页url中包含关键词。\n叠加使用 site:douban.com 亲密关系 intext:罗兰米勒\n注意事项 所有的冒号都是半角，也就是英文的冒号而不是中文的冒号。\n空格很重要，关键词之间一定要有空格。\n提取关键词很重要。\n参考链接 搜索效率提升200%！8个小技巧助你快速查资料 ","date":"2020-05-27T08:54:25Z","permalink":"//localhost:1313/archives/%E6%8F%90%E9%AB%98%E6%90%9C%E7%B4%A2%E6%95%88%E7%8E%87%E7%9A%847%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/","title":"提高搜索效率的7个小技巧"},{"content":"2020.5.26　已升级安装最新bios版本：\n1 2018/9/3 版本：BIOS Version: E5CN63WW,EC Version:E5IT23WW Fn+F2进入bios，Fn+F12选择启动顺序。\n1.打开联想服务的驱动与下载网页：查找驱动程序及工具软件，选择在站内查找设备驱动， 输入你的电脑主机编号（可以在电脑背面的标签上找到，也可以安装联想电脑管家，会自动检测你的主机编号），确定后进入驱动下载界面。联想小新700（主机编号：R90JZRF4）直接点击：小新 700-15ISK\n2.在驱动列表中找到bios驱动，下载安装即可，当然，这个界面的所有驱动你都可以下载安装。\n总结：如果升级完bios，每回重启完电脑声音总是静音的话，下载驱动人生，重新安装声卡驱动。此外升级bios后，可解决小新700无故自动休眠问题。\n","date":"2020-05-26T10:25:25Z","permalink":"//localhost:1313/archives/%E8%81%94%E6%83%B3%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91%E5%8D%87%E7%BA%A7bios/","title":"联想笔记本电脑升级bios"},{"content":"系统为centos8\nNginx默认目录：/usr/share/nginx/html\nNginx主要配置文件：/etc/nginx/nginx.conf\n1 vi /etc/nginx/nginx.conf 将下面几行配置文件加入nginx配置的server段内：\n1 2 3 4 autoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8,gbk; 重启nginx服务：\n1 systemctl restart nginx 参考链接：centos8自定义目录安装nginx\n","date":"2020-05-24T11:51:25Z","permalink":"//localhost:1313/archives/nginx%E5%BC%80%E5%90%AF%E7%9B%AE%E5%BD%95%E6%B5%8F%E8%A7%88/","title":"Nginx开启目录浏览"},{"content":"Fn+F2进入bios，Fn+F12选择启动顺序。 原版系统 备份E盘文件到移动硬盘。\n进PE，这里使用微pe工具箱。\n将系统iso文件装载到虚拟光驱，然后运行setup.exe\n先删掉所有分区，然后给C盘分区，大小为：82703M（80*1024+100+16+567+100=82703）\n安装完系统再用系统自带磁盘管理给D盘和E盘分区，D盘大小为：71780M（70*1024+100=71780），剩下的给E盘。\n精简系统 备份E盘文件到移动硬盘。 进PE，这里使用微pe工具箱。 用DiskGenius分区，C盘80G，D盘70G，剩余给E盘。注意给C盘分区时，勾选建立ESP分区和建立MSR分区，勾选对齐到此扇区的整数倍，选择2048扇区。给D盘和E盘分区时也要勾选对齐到2048扇区。 用windows安装器安装系统。注意选择安装驱动器的位置为C盘，还有选择相应的安装版本。 系统安装记录 序号 日期 版本 1 2020.5.24 win10 2004 2 2021.8.29 win10 21H1 3 2022.3.4 win10 21H2 4 2023.2.19 win11 22H2 笔记本清灰记录 序号 日期 备注 1 2020.6.18 风扇都没有拆下来清理 2 2022.3.5 常见问题 办公室旧电脑安装精简版Win7，出现错误Windows could not start the installation process，解决方法：删除分区，重新分区。\n整机 2022年3月13号购入\n0.分区：C盘100G D盘200G E盘剩下\n1.微星主板按F11选择启动顺序，按Delete进入bios。\n2.蓝宝石北极狐机箱尺寸：392×185×303（长×宽×高 mm）\n机箱玻璃摔破了，新机箱尺寸：335×182×423 MM\n包装尺寸：460×231×390MM\n3.AOC 23.8寸显示器尺寸：长550mm，宽200mm,高430mm\n4.aoc键盘 446×143×34\n5.调显存大小，重启黑屏。解决方法：拔掉主板电池（拔掉电池的方法见bibi收藏夹，直接将挡板往外按，电池会自动弹起。注意不要用手挡住电池，否则电池无法弹出），5分钟后再装上去。买之前 应该说清楚，不用搞高频，正常使用就好；不用调显存大小，默认就行。默认内建显示配置：\n1 2 3 Initiate Graphic Adapter [PEG] Integrated Graphics [Game Mode] UMA Frame Butter Size [自动] 估计是直接将显存由4g直接改成自动，第二项没有设置为Game Mode而导致黑屏，无法点亮。\n护眼模式 一、显示设置—夜间模式强度调到30左右。\n二、调整颜色：\n1、鼠标右键点击【开始】菜单按钮选择【运行】， 2、输入 regedit 点击【确定】， 3、展开注册表路径至：HKEY_CURRENT_USER\\Control Panel, 点击【Colors】文件夹， 4、在右侧找到 Window，鼠标右击【Window】选择【修改】， 5、将数值数据改为【202 234 206】（豆沙绿）点击【确定】，（初始：255 255 255）\n6、定位：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\DefaultColors\\Standard，找到Window，双击Window，更改数值：caeace (默认值为ffffff)，选择：十六进制\n7、重启电脑，设置生效。\n三、右键—个性化—颜色—浅色—打开透明效果—自定义颜色（202 234 206)—勾选在标题栏和窗口边框显示主颜色。\n三、浏览器安装保护眼睛插件。保护眼睛\n常见问题 Windows开始菜单绝对路径：C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\n","date":"2020-05-24T06:36:25Z","permalink":"//localhost:1313/archives/win10%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%B8%85%E7%81%B0%E8%AE%B0%E5%BD%95%E6%95%B4%E6%9C%BA%E6%8A%A4%E7%9C%BC/","title":"Win10重装系统\u0026清灰记录\u0026整机\u0026护眼"},{"content":"大括号问题，是一年级数学一个必考题目，只有两种做法：加法或者减法。尽管很简单，我们依然要让孩子分清题目的不同表示方法，下面列出三种加法的表示：\n大括号表示什么意思？表示两部分合起来！ 问号表示什么意思？表示需要求的问题！ 这里必须要注意的地方，是问题的答案必须写在等号的右边，这也是很多孩子容易犯的错误之一。就是把算式写错了，尽管知道正确的结果，但是写的位置不对！\n用 口诀加强理解：\n大括号，小问号，\n在一起，我会算。\n小问号，在中间\n求一共，用加法。\n小问号，在一边，\n求部分，用减法。\n用这个口诀，可以加深孩子的印象。之后，我们就慢慢要给孩子用整体和部分来理解，因为这是理解加法和减法关系的基础。\n解题步骤：\n看？在哪儿 求什么 加还是减 参考链接：一年级数学上册《大括号问题》\n","date":"2020-05-23T14:49:25Z","permalink":"//localhost:1313/archives/%E4%B8%80%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8A%E5%86%8C%E5%A4%A7%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/","title":"一年级数学上册大括号问题"},{"content":"随机排序 首先打开需要操作的知excel表格。 然后在E2单元个中输入“=”号，添加辅助函数rand。 在E2单元格回车，专在E2单元格右下角下拉复制函数。 选择属排序和筛选升序、降序都可以。 最后可看到随机排序完成。 参考：excel如何随机排序\n换行 Excel单元格的内容想要换行有三种方法。\n1、自动换行\n选择需要换行的区域，点击开始选项卡下的自动换行即可。优点是方便快捷，缺点是自动换行是在列宽不足的条件下才有效，且有时候换行效果不美观。\n2、强制换行\n单元格编辑模式中，在需要换行的位置按Alt+enter可以强制换行。\n强制换行的优点是不受列宽的限制，想换行就换行，缺点是不好批量换行。但是强制换行批量取消还是很方便的：\n用查找和替换功能，在查找内容按Ctrl+J可以输入换行符，会有一个闪烁的小黑点。然后替换就可以了。(批量删除换行)\n3、公式换行\n函数CHAR（10）可以返回换行符，不过要展示换行效果，还需要将单元格格式设置为自动换行。举例说明：\n参考：Excel单元格内容“换行”你会几种方法？\n","date":"2020-05-23T03:38:25Z","permalink":"//localhost:1313/archives/excel%E5%A6%82%E4%BD%95%E9%9A%8F%E6%9C%BA%E6%8E%92%E5%BA%8F%E6%8D%A2%E8%A1%8C/","title":"Excel如何随机排序\u0026\u0026换行"},{"content":"估算是数学里一种很重要的能力，一年级数学下册有关估算这部分内容出现在课本71页，主要讲的是两位数加两位数的进位加法的估算。首先来了解一下什么是估算，对于两位数加两位数的进位加法的估算，可以把其中一个加数看作与它最接近的“整十数”，也可以把两个加数分别看作与它们接近的“整十数”，再口算出得数。我们拿书上例题为例。淘气摘了17个苹果，笑笑摘了38个苹果，箱子能装60个苹果，让你估一估，这个箱子能装得下吗？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 这里有三种估法，如下： 方法一：把17看作20 20+38=58(个) 58＜60 答：这个箱子装得下。 方法二：把38看作40 17+40=57(个) 57＜60 答：这个箱子装得下。 方法三：把17看作20，把38看作40 20+40=60(个) 60=60 答：这个箱子装得下。 总结：三种估法都是往大了估。往大了估，可以装下，实际比估计的少，所以也能装下。 ------------------------------------------------------------------------------------------ 再看下72页练一练第1题，已知第一袋可装43颗珠子，第二袋可装19颗，第三袋能装38颗，现在70颗能穿一条项链。 问“估一估，哪两袋珠子合起来够穿一条项链”，这里要往小了估。答案如下： 把43看作40 40+38=78(颗) 78＞70 答：第一袋和第三袋能够穿一条项链。 总结：往小了估够70颗，实际比估计的多，肯定也够，所以第一袋和第三袋合起来能穿一条项链。 有时也也会遇到估算类填空题：\n1 2 1.估算48+33时，可以把48看作（50），（50）+33=（83），结果是（83）。 2.估算48+33时，可以把48看作（50），把32看作（30），结果是（80）。 更多有关估算类的内容可以查看：\n1.运用估算方法来解答应用题\n2.估算应用题\n","date":"2020-05-20T09:32:25Z","permalink":"//localhost:1313/archives/%E4%B8%80%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E4%BC%B0%E7%AE%97%E9%97%AE%E9%A2%98/","title":"一年级数学下册估算问题"},{"content":"依次选择视图—分页预览，单击选中后，我们看到文档多出了几条蓝色的实线，分出了第1页、第2页。如果我们想要调整打印的内容，只需要按住鼠标左键，拖动蓝色实线，上下左右移动到合适位置即可，最后查看打印预览，作最后的调整。\n","date":"2020-05-18T13:31:25Z","permalink":"//localhost:1313/archives/excel%E8%A1%A8%E6%A0%BC%E8%B0%83%E6%95%B4%E5%88%86%E9%A1%B5%E6%89%93%E5%8D%B0%E5%86%85%E5%AE%B9/","title":"Excel表格调整分页打印内容"},{"content":"1.按住alt键，拖动直线，会拉出一个尖点。\n2.Ctrl+g 将绘图对象变成组，就不会覆盖；Ctrl+b将组打散。\n3.flash中只有两种绘画对象：线条、填充。所有绘画对象都是由线条和填充组成的。\n","date":"2020-05-17T04:32:25Z","permalink":"//localhost:1313/archives/flash%E5%B0%8F%E6%8A%80%E5%B7%A7/","title":"Flash小技巧"},{"content":"一年级比多比少类问题，应该说是一个难点。部分同学看见“多”就用加法，看见“少”就用减法，这样是不对的，一般说来比多比少类问题有三种题型，现在做个简单的总结，具体如下（题目选自网上）：\n求“多多少”、“少多少”都用减法。 例如：小明有39张卡片，小华有23张，小华比小明少多少张卡片？（或者小明比小华多多少张卡片？）\n求“较大数”用加法。 例如：小明有39张卡片，小华比小明多12张，小华有多少张卡片？\n或者：小明有39张卡片，比小华少12张，小华有多少张卡片？\n这两题其实是一样的，求的都是小华，求小华求的是较大数，所以用加法。\n求“较小数”用减法。 例如：小明有39张卡片，小华比小明少12张，小华有多少张卡片？\n或者：小明有39张卡片，比小华多12张，小华有多少张卡片？\n这两题其实是一样的，求的都是小华，求小华求的是较小数，所以用减法。\n另外还有比多比少列式计算题，相关内容可查看：一年级数学下册列式计算(加数、被减数、比多比少)\n","date":"2020-05-17T02:20:25Z","permalink":"//localhost:1313/archives/%E4%B8%80%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E6%AF%94%E5%A4%9A%E6%AF%94%E5%B0%91%E7%B1%BB%E9%97%AE%E9%A2%98/","title":"一年级数学比多比少类问题"},{"content":"首先要记忆以下几个公式：\n1 2 3 4 5 加数+加数=和 被减数-减数=差 和-加数=加数 被减数-差=减数 减数+差=被减数 要让他们将以上几个公式，写在数学书第一页上，然后背诵。列式计算具体习题如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 1、一个加数是25，另一个加数是36，和是多少? 2、两个加数都是46，和是多少？ 3、一个加数是37，另一个加数比它多17，和是多少？ 4、被减数是56，减数是39，差是多少？ 5、两个加数的和是87，其中的一个加数是40，另一个加数是多少？ 6、被减数是56，差是34，减数是多少？ 7、减数是27，差是49，被减数是多少？ 8、72与45的差，再加上38是多少？ 9、36与45的和，再减去42是多少？ 10、86比20多多少？ 11、一个加数由3个十和4个一组成，另一个加数由2个十和7个一组成， 这两个加数的和是多少？ 12、30比90少多少？ 13、三个25连续相加，和是多少？ 14、从80里减去27，在加上25，和是多少？ 15、一个数是56，它比哪一个数大21，另一个数是多少？它们的和是多少？它们的和是多少？ 16、72和91相差多少？ 17、比85少39的数是多少？ 18、甲数是26，乙数是35，丙数是28，它们的和是多少？ 19、35与44的差，再加上30与16的和，得多少？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 列式计算 1、67比30多多少？ 2、78比70多多少？ 3、34比40少多少？ 4、66比60小多少？ 5、93比90大多少？ 6、 比78多9的数是多少？ 7、比34少6的数是多少？ 8、最大的一位数与最小的两位数的和是多少？差是多少？ 9、两个加数都是30，它们的和是多少？差是多少？ 10、减数是50，差是34，被减数是多少？ 11、减数和差都是40，被减数是多少？ 12、26加上34与30的差，和是多少？ 13、76减去21与9的和，差是多少？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 一、列式计算。 1、 一个加数是45，另一个加数是28，和是多少? 2` 40与57相差多少? 3. 43比20多多少? 4. 两个加数都是45,和是多少? 5. 一个加数是25, 另一个加数是19, 和是多少? 6. 18与32的和是多少? 7. 被减数是50，减数是26，差是多少? 8. 62比27大多少？ 9. 减数是26，被减数是32，差是几？ 10. 两个加数都是34，和是多少？ 11.1 8比37小多少？　12.23和32相差多少？ 13. 比42少17的数是多少? 14. 比38多29的数是多少? 15.25比70少多少？ 16.减数是24，差是16，被减数是多少？ 17.60比34多多少？ 18.25加上18，再减去24，得多少？ 19.5个4相加是多少？ 20.60减去45，再加上26，得多少？ 21、2个5连加得多少？ 22.最小的三位数比最大的两位数多多少？ 23.最大的两位数比最大的一位数多多少？ 24.35比100少多少？ 25.两个因数都是5，积是多少？ 26.5乘3得多少？ 27.一个因数是5，另一个因数是2，积是多少？ 28.两个数的和是45，其中一个加数是13，另一个加数是多少？ 29.5和4相乘得多少？ 30.3个5相加的和是多少？ 31.比28多16的数是多少？ 32.比28少16的数是多少？ 33.减数是36，差是24，被减数是多少？ 34.被减数和减数都是26，差是多少？ 题目选自：\n1.一年级下数学列式计算题及答案 2.一年级下册数学列式计算专项练习 3.小学一年级数学下册列式计算题专项训练 ","date":"2020-05-16T01:10:25Z","permalink":"//localhost:1313/archives/%E4%B8%80%E5%B9%B4%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E5%88%97%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%8A%A0%E6%95%B0%E8%A2%AB%E5%87%8F%E6%95%B0%E6%AF%94%E5%A4%9A%E6%AF%94%E5%B0%91/","title":"一年级数学下册列式计算(加数、被减数、比多比少)"},{"content":"1.鼠标右键点击桌面左下角的开始菜单，选择“命令提示符（管理员）\n2.在打开的黑色命令提示符窗口中输入 notepad，敲回车；\n3.打开的记事本页面中点右上角的文件，然后点打开\nC:\\Windows\\System32\\drivers\\etc\\hosts\n4.在打开的host文件中修改你要添加的内容，最后保存。\n","date":"2020-05-15T17:04:25Z","permalink":"//localhost:1313/archives/win10-%E4%BF%AE%E6%94%B9host%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/","title":"Win10 修改host文件的方法"},{"content":"最好首先克隆github上的源码。\n1 git clone -b develop git@github.com:iwyang/hugo.git hugo --recursive 首先当然是备份博客源文件。\n更换服务器 参考：\nHugo部署到centos —服务器操作部分 Hugo部署到ubuntu —服务器操作部分 更换电脑、重装系统 本地操作 参考：hugo部署到coding—本地操作部分，重新配置环境，生成公钥。\n注意最后不用初始化hugo，因为我们已经有了博客原文件了。\n服务器上的操作 如果是部署到服务器，先将服务器原来的SSH 公钥先删除，再上传新的SSH 公钥。具体操作如下:\n服务器上输入：\n1 2 3 su git cd ~/.ssh rm -rf authorized_keys 本地Git Bash里输入：\n1 ssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址 如果在git bash中输入ssh git@服务器的IP地址,能够远程登录的话，则表示设置成功了。如若还是要输入密码，就修改目录权限：\n1 2 chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh github\u0026amp;gitee上的操作 如果是备份源码到githuhb上，部署网页到gitee上，要将重新生成的SSH公钥添加到github\u0026amp;gitee上。两者都在右上角个人设置里添加。\n还原源码 重装系统后，Algolia的自动提交索引功能要重新部署一遍，具体可查看：Hugo添加Algolia。最后还要在博客目录里重新关联远程仓库，还是一样先备份源码到github，再部署网页到相应服务器。\n先备份源码，再部署网页，是为了GitInfo以及lastmod能够生效和更新，其实源码可以备份到github、gitee、coding中任意一个公开仓库都可以，当然备份到github最好。网页也无需和源码放在同一个代码托管平台上。\n2022.3.4 如果使用Git Submodule子模块管理Hugo主题，将源码克隆到本地，使用下面这条命令才能将主题一同克隆到本地。\n1 git clone -b develop git@github.com:iwyang/hugo.git hugo --recursive ","date":"2020-05-14T16:19:25Z","permalink":"//localhost:1313/archives/hugo%E8%BF%81%E7%A7%BB%E7%AC%94%E8%AE%B0/","title":"Hugo迁移笔记"},{"content":"启用阿里免费证书 申请证书 查看：申请免费DV试用证书\n安装证书 基本操作参考：在Nginx/Tengine服务器上安装证书，这里具体讲下Nginx上的配置。\n1.在nginx根目录（默认为/etc/nginx）下创建目录cert。\n1 2 cd /etc/nginx mkdir cert 2.把下载的证书两个文件.pem和.key上传到目录cert中。\n3.修改nginx配置文件。vi /etc/nginx/conf.d/hexo.conf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 server { listen 80; server_name bore.vip www.bore.vip; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/hexo; server_name bore.vip www.bore.vip; ssl on; ssl_certificate /etc/nginx/cert/xxxx.pem; ssl_certificate_key /etc/nginx/cert/xxxx.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 4.修改hugo站点配置文件_config.toml\nbaseURL = \u0026quot;https://bore.vip/\u0026quot;\n5.开启负载均衡\n在阿里云SSl证书控制台，依次选择部署—负载均衡—选择所有区域，然后部署。\n6.重启nginx服务。\nubuntu、centos 6\n/etc/init.d/nginx restart\ncentos 7、8\n1 systemctl restart nginx 添加 Let\u0026rsquo;s Encrypt 免费证书 Ubuntu上的操作 安装 Certbot 在 Ubuntu 上只需要简单的一行命令：\nsudo apt-get install letsencrypt\n其他的发行版可以在这里选择。\n使用 webroot 自动生成证书 Certbot 支持多种不同的「插件」来获取证书，这里选择使用 webroot 插件，它可以在不停止 Web 服务器的前提下自动生成证书，使用 --webroot 参数指定网站的根目录。\nletsencrypt certonly --webroot -w /var/www/hexo -d iwyang.top\n这样，在 /var/www/hexo 目录下创建临时文件 .well-known/acme-challenge ，通过这个文件来证明对域名 iwyang.top 的控制权，然后 Let’s Encrypt 验证服务器发出 HTTP 请求，验证每个请求的域的 DNS 解析，验证成功即颁发证书。\n生成的 pem 和 key 在 /etc/letsencrypt/live/ 目录下\ncert.pem 用户证书 chain.pem 中间证书 fullchain.pem 证书链, chain.pem + cert.pem privkey.pem 证书私钥\n`\n自动续期 Let’s Encrypt 的证书有效期为 90 天，不过我们可以通过 crontab 定时运行命令更新证书。\n先运行以下命令来测试证书的自动更新：\nletsencrypt renew --dry-run --agree-tos\n如果一切正常，就可以编辑 crontab 定期运行以下命令：\n1 2 crontab -e * 2 * * * service nginx stop \u0026amp; letsencrypt renew \u0026amp; service nginx start 配置 Nginx 修改 Nginx 配置文件中关于证书的配置：\n1 vi /etc/nginx/conf.d/hexo.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 server { listen 80; server_name iwyang.top www.iwyang.top; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/hexo; server_name iwyang.top www.iwyang.top; ssl on; ssl_certificate /etc/letsencrypt/live/iwyang.top/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/iwyang.top/privkey.pem; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 然后重启 Nginx ，应该就可以看到小绿标了。/etc/init.d/nginx restart\nCentos 8上的操作 安装Certbot 1 2 yum install epel-release -y yum install certbot -y 然后执行：\n1 certbot certonly --webroot -w /var/www/hexo -d bore.vip -m 455343442@qq.com --agree-tos 配置Nginx 顶级域名参考上面Ubuntu Nginx的配置，二级域名操作如下：\n1 vi /etc/nginx/conf.d/hexo.conf 现在用的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 server { listen 80; listen 127.0.0.1:443 ssl http2 proxy_protocol; root /var/www/hexo; server_name bore.vip www.bore.vip; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ https://bore.vip/$1 permanent; } if ($ssl_protocol = \u0026#34;\u0026#34;) { return 301 https://$host$request_uri; } ssl on; ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_timeout 10m; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_buffer_size 1400; add_header Strict-Transport-Security max-age=15768000; ssl_stapling on; ssl_stapling_verify on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 以前用的:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 server { listen 80; server_name bore.vip www.bore.vip; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/hexo; server_name bore.vip www.bore.vip; ssl on; ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 重启Nginx生效：\n1 systemctl restart nginx 证书自动更新 由于这个证书的时效只有 90 天，我们需要设置自动更新的功能，帮我们自动更新证书的时效。首先先在命令行模拟证书更新：\n1 certbot renew --dry-run 模拟更新成功的效果如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ** DRY RUN: simulating \u0026#39;certbot renew\u0026#39; close to cert expiry ** (The test certificates below have not been saved.) ## 可以看到两个域名续期成功 The following certs were successfully renewed: /etc/letsencrypt/live/blog.bore.vip/fullchain.pem (success) /etc/letsencrypt/live/f.bore.vip/fullchain.pem (success) ## 以下失败的一个域名不用管 The following certs could not be renewed: /etc/letsencrypt/live/novel.bore.vip/fullchain.pem (failure) ** DRY RUN: simulating \u0026#39;certbot renew\u0026#39; close to cert expiry ** (The test certificates above have not been saved.) - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 在无法确认你的 nginx 配置是否正确时，一定要运行模拟更新命令，确保certbot和服务器通讯正常。使用 crontab -e 的命令来启用自动任务，命令行：\n1 crontab -e 添加配置：（每隔两个月凌晨2:30自动执行证书更新操作）后保存退出。\n1 30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\n1 openssl x509 -noout -dates -in /etc/letsencrypt/live/bore.vip/cert.pem Debian10上的操作 安装 Certbot 1 sudo apt-get install letsencrypt -y 使用 webroot 自动生成证书 1 certbot certonly --webroot -w /var/www/hexo -d bore.vip -m 455343442@qq.com --agree-tos 编辑Nginx 1 vi /etc/nginx/conf.d/hexo.conf hexo用：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 server { listen 80; listen [::]:80; root /var/www/hexo; server_name bore.vip www.bore.vip; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ https://bore.vip/$1 permanent; } listen 443 ssl; # managed by Certbot # RSA certificate ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; # managed by Certbot # Redirect non-https traffic to https if ($scheme != \u0026#34;https\u0026#34;) { return 301 https://$host$request_uri; } # managed by Certbot } 现在用的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 server { listen 80; listen 127.0.0.1:443 ssl http2 proxy_protocol; set_real_ip_from 127.0.0.1; real_ip_header proxy_protocol; root /var/www/hexo; server_name bore.vip www.bore.vip; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ https://bore.vip/$1 permanent; } if ($ssl_protocol = \u0026#34;\u0026#34;) { return 301 https://$host$request_uri; } ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_timeout 10m; ssl_session_cache builtin:1000 shared:SSL:10m; ssl_buffer_size 1400; add_header Strict-Transport-Security max-age=15768000; ssl_stapling on; ssl_stapling_verify on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 以前用的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 server { listen 80; server_name bore.vip www.bore.vip; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/hexo; server_name bore.vip www.bore.vip; ssl on; ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 测试配置是否有问题：\n1 nginx -t 重启Nginx生效：\n1 systemctl restart nginx 自动续期 Let’s Encrypt 的证书有效期为 90 天，不过我们可以通过 crontab 定时运行命令更新证书。\n先运行以下命令来测试证书的自动更新：\n1 certbot renew --dry-run 如果一切正常，就可以编辑 crontab 定期运行以下命令：\n1 crontab -e 1 30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\n1 openssl x509 -noout -dates -in /etc/letsencrypt/live/bore.vip/cert.pem https www跳转 1 2 3 4 5 6 7 8 9 10 11 12 upstream halo { server 127.0.0.1:8090; } server { listen 80; listen [::]:80; listen 443 ssl http2; listen [::]:443 ssl http2; server_name bore.vip www.bore.vip; + if ($host != \u0026#39;bore.vip\u0026#39; ) { + rewrite ^/(.*)$ https://bore.vip/$1 permanent; + } 参考链接 1.在Nginx/Tengine服务器上安装证书 2.阿里云hexo站点https之nginx配置 3.为博客添加 Let\u0026rsquo;s Encrypt 免费证书 4.ubuntu 生成https证书 for let\u0026rsquo;s encrypt 5.Ubuntu 16设置定时任务 6.Ubuntu查看crontab运行日志 7.Let\u0026rsquo;s Encrypt证书自动更新 8.CentOS 7 Nginx配置Let\u0026rsquo;s Encrypt SSL证书 ","date":"2020-05-14T02:07:25Z","permalink":"//localhost:1313/archives/nginx%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/","title":"Nginx配置ssl证书"},{"content":"服务器环境：Centos 8 x64\n本地环境：Win10 x64\n本地操作 参考：hugo部署到coding\u0026amp;gitee-本地操作部分\n服务器操作 注意：这里是参照服务器搭建hexo，所以代码里hexo没有改成hugo，不过这没有任何影响。\n准备工作：如果服务器端口不是22，先要更改SSH端口，\n1 2 vi /etc/ssh/sshd_config port 22 然后重启生效。\n首先，在服务器上安装 Git 和 nginx。\n2021.5.27 注意最好不要执行下面第一步升级操作，不然升级到最后一步会卡死，最后导致后面无法启动nginx。\r1 2 yum update -y yum install git-core nginx -y 如果是centos 7，先要安装安装epel：yum install epel-release，才能安装nginx。\nNginx 安装完成后需要手动启动，启动Nginx并设置开机自启：\n1 2 systemctl start nginx systemctl enable nginx 如果开启了防火墙，记得添加 HTTP 和 HTTPS 端口到防火墙允许列表。\n1 2 3 4 firewall-cmd --permanent --zone=public --add-service=http firewall-cmd --permanent --zone=public --add-service=https firewall-cmd --reload systemctl restart firewalld.service 配置完成后，访问使用浏览器服务器 ip ，如果能看到以下界面，表示运行成功。\n配置用户 然后新增一个名为 git 的用户，过程中需要设置登录密码，输入两次密码即可。\n1 2 adduser git passwd git 给用户 git 赋予无需密码操作的权限（否则到后面 Hexo 部署的时候会提示无权限）\n1 2 chmod 740 /etc/sudoers vi /etc/sudoers 在图示位置root ALL=(ALL:ALL) ALL的下方添加\n1 git ALL=(ALL:ALL) ALL 然后保存。然后更改读写权限。\n1 chmod 440 /etc/sudoers 上传 SSH 公钥 接下来要把本地的 ssh 公钥上传到服务器 。执行\n1 2 3 4 5 su git cd ~ mkdir .ssh \u0026amp;\u0026amp; cd .ssh touch authorized_keys vi authorized_keys 现在要打开本地的 Git Bash，输入vi ~/.ssh/id_rsa.pub，把里面的内容复制下来粘贴到上面打开的文件里。\n接着把ssh目录设置为只有属主有读、写、执行权限。代码如下：\n1 2 chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh 然后建立放部署的网页的 Git 库。\n1 2 3 cd ~ mkdir hexo.git \u0026amp;\u0026amp; cd hexo.git git init --bare 测试一下，如果在 Git Bash 中输入 ssh git@服务器的IP地址 能够远程登录的话，则表示设置成功了。如果你的服务器端口不是22。最好像开头那样更改SSH端口。也可以参考：上传SSH公钥。\nps: 如果配置完成还是提示要输入密码，可以使用 ssh-copy-id，在本地打开 Git Bash 输入：\n1 ssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址 登录成功会提示：\n1 2 3 $ ssh git@104.224.191.88 Last login: Sat Feb 26 02:33:30 2022 from 171.81.158.144 [git@special-beep-1 ~]$ 用户授权 接下来要给用户 git 授予操作 nginx 放网页的地方的权限：\n1 su 1 2 mkdir -p /var/www/hexo chown git:git -R /var/www/hexo 配置钩子 现在就要向 Git Hooks 操作，配置好钩子：\n1 2 3 su git cd /home/git/hexo.git/hooks vi post-receive 输入内容并保存：（里面的路径看着换吧，上面的命令没改的话也不用换）\n1 2 3 4 5 6 7 8 #!/bin/bash GIT_REPO=/home/git/hexo.git TMP_GIT_CLONE=/tmp/hexo PUBLIC_WWW=/var/www/hexo rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE rm -rf ${PUBLIC_WWW}/* cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} 赋予可执行权限：\n1 chmod +x post-receive 配置 nginx 然后是配置 nginx。执行\n1 su 1 vi /etc/nginx/conf.d/hexo.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 server { listen 80 ; listen [::]:80; root /var/www/hexo; server_name bore.vip www.bore.vip; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 因为放中文进去会乱码所以就不在里面注释了。代码里面配置了默认的根目录，绑定了域名，并且自定义了 404 页面的路径。 最后就重启 nginx 服务器：\n1 systemctl restart nginx 如果上传网页后，Nginx 出现 403 Forbidden，执行：\n1 vi /etc/selinux/config 将SELINUX=enforcing 修改为 SELINUX=disabled 状态。\n1 SELINUX=disabled 重启生效，reboot。\nps: 最好做一个301跳转，把bore.vip和www.bore.vip合并，并把之前的域名也一并合并. 有两种实现方法,第一种方法是判断nginx核心变量host(老版本是http_host)：\n1 2 3 4 5 6 7 server { server_name bore.vip www.bore.vip ; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ http://bore.vip/$1 permanent; } ... } 修改自动部署脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to Coding...\\033[0m\u0026#34; # Removing existing files rm -rf public/* # Build the project hugo # Go To Public folder cd public git remote rm origin git init git remote add origin git@你的ip:hexo.git git add . # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. 或直接在Git Bash中手动运行以下代码：\n1 2 3 4 5 6 7 8 9 rm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@104.224.191.88:hexo.git git add . git commit -m \u0026#34;building site\u0026#34; git push origin master --force 总结 最好不要反复切换部署仓库，否则git会出现以下错误提示：\n1 2 3 4 5 remote: error: The last gc run reported the following. Please correct the root cause remote: and remove gc.log. remote: Automatic cleanup will not be performed until the file is removed. remote: remote: warning: There are too many unreachable loose objects; run \u0026#39;git prune\u0026#39; to remove them. 查资料，原来是自己本地一些 “悬空对象”太多(git删除分支或者清空stash的时候，这些其实还没有真正删除，成为悬空对象，我们可以使用merge命令可以从中恢复一些文件)\n解决方法：\n1.输入命令：git fsck --lost-found，可以看到好多“dangling commit”\n2.清空他们：git gc --prune=now，完成\n参考链接 1.在服务器上搭建hexo博客，利用git更新 2.从 0 开始搭建 hexo 博客 3.基于CentOS搭建Hexo博客 4.Nginx出现403 forbidden 5.git运行突然提示 remote: error: The last gc run reported the following ","date":"2020-05-13T10:05:25Z","permalink":"//localhost:1313/archives/hugo%E9%83%A8%E7%BD%B2%E5%88%B0centos%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"Hugo部署到centos服务器"},{"content":"本地操作 安装GIt 本地需要安装 Git ，安装过程略。安装完git后还要配置环境变量： 右键我的电脑 \u0026ndash;\u0026gt; 属性，然后点击高级系统设置 \u0026ndash;\u0026gt; 环境变量 \u0026ndash;\u0026gt; 选择用户变量或系统变量中的Path,点击编辑；找到Git安装目录,添加以下地址:\n1 2 3 D:\\Program Files\\Git\\bin D:\\Program Files\\Git\\mingw64\\libexec\\git-core D:\\Program Files\\Git\\mingw64\\bin 配置SSH 公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\n1 2 git config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; 1 2 3 4 cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n初始化 Hugo 安装hugo windows10下安装hugo，可以参照Hugo官方手册的方法，这里讲一个相对简单稳定的方法。\n1.下载hugo程序压缩包：前往https://github.com/gohugoio/hugo/releases下载和自己系统版本相符合的hugo程序压缩包。(建议下载hugo_extended版本)\n2.解压到某个文件夹中（路径不要有中文，而且自己要记得文件夹的路径），最好是不常改动的文件夹下边，以防文件被误删或者丢失。\n3.添加hugo到系统环境变量PATH中\n找到“系统环境变量”的设置位置，在开始菜单的搜索栏搜索环境变量 添加用户环境变量，依此：点击环境变量，找到用户变量中的path，点击编辑，然后点击新建，在使用浏览按钮选中文件夹，即可使用hugo。（选中到hugo.exe所在的文件夹即可，不需要选中hugo.exe，貌似添加完系统变量，要重启电脑才能在Git Bash里运行hugo） 接下来，为了万无一失，还是要检查一下hugo是否安装完成。以管理员方式打开cmd命令窗口，然后输入以下指令： 1 hugo version 如果得到如下响应，（即显示版本信息），说明安装成功，接下来就可以玩转hugo了。\n1 Hugo Static Site Generator v0.70.0/extended windows/amd64 BuildDate: unknown 创建并配置站点 以下命令均在\u0026rsquo;Git Bash\u0026rsquo;中运行\n进入你想存放 Hugo 网站文件夹的目录，执行以下命令：\n1 hugo new site blog 添加主题 1 git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 附更新主题命令：\n1 2 cd ./themes/LoveIt/ git pull 配置主题\n将 根目录\\themes\\even\\exampleSite路径下的config.toml文件复制到根目录下，覆盖掉根目录下的config.toml文件。然后，我们在notepad++中打开并对其作一定的修改就可以直接使用。\n配置config.toml 略\n设置文章模板 为了更好的使用附加功能，我们提前修改一下模板。这样，每次使用新建一篇文档时候就省去很多麻烦事。 使用Typora文档工具打开themes/tranquilpeak/archetypes中的post.md直接替换为以下的模板：\n1 2 3 4 5 6 7 8 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} draft: false weight: false categories: [\u0026#34;\u0026#34;] tags: [\u0026#34;\u0026#34;] 接下来在根目录下使用以下命令生成一篇文档吧：\n1 hugo new post/XXXX.md 新建“关于”页面 1 hugo new about.md config.toml相应位置添加：\n1 2 3 4 5 [[menu.main]] name = \u0026#34;关于\u0026#34; weight = 50 identifier = \u0026#34;about\u0026#34; url = \u0026#34;/about/\u0026#34; 启动博客的本地预览 建议在配置文件中设置好主题，或者使用 –t指令指定主题，在站点的根目录下使用命令进行本地启动，本地启动的命令如下：\n1 hugo server -D 使用浏览器打开 http://localhost:1313 预览。\n部署到coding 略\n提交本地仓库 1 2 3 4 5 6 7 8 9 rm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@e.coding.net:iwyang/hugo/hugo.git git add . git commit -m \u0026#34;Add a new post\u0026#34; git push --force origin master 备份脚本 为了后续更新方便起见，可以在根目录新建一个一键部署脚本，命名为deploy.sh（如果对配置不做大的改动（例如：更换主题等），后续的更新可以使用以下脚本）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; # Removing existing files rm -rf public/* # Build the project hugo # Go To Public folder cd public git add . # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. 创建完脚本以后，不要忘了加权限\n1 chmod 777 xxx 提交本地仓库 1 2 3 4 5 6 7 8 9 rm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@gitee.com:iwyang/iwyang.git git add . git commit -m \u0026#34;Add a new post\u0026#34; git push origin master --force 备份hugo源码 1 2 3 4 5 6 7 git remote rm origin git init git checkout -b backup git add . git commit -m \u0026#34;备份源码\u0026#34; git remote add origin git@gitee.com:iwyang/iwyang.git git push origin backup --force 备份hugo源码 PS: 如果执行第三步git checkout -b backup后，提示fatal: A branch named 'backup' already exists.，则执行以下操作：\n1 2 git branch -D backup #删除分支:必须切换到其他的分之下才可操作 git checkout -b backup #切换分支 备份到github master分支 1 2 3 4 5 6 git remote rm origin git init git add . git commit -m \u0026#34;备份源码\u0026#34; git remote add origin git@github.com:iwyang/hugo.git git push --force origin master PS:这里Git Bash开头会报错：warning: LF will be replaced by CRLF，解决方法：在git add .前面添加：\n1 git config --global core.autocrlf false 最终效果：\n1 2 3 4 5 6 # backup git config --global core.autocrlf false git add . git commit -m \u0026#34;备份源码\u0026#34; git remote add origin git@github.com:iwyang/hugo-backup.git git push origin master --force 在部署脚本里也要作相应修改。\n还原源码 重装系统后，Algolia的自动提交索引功能要重新部署一遍，具体可查看：Hugo添加Algolia。最后还要在博客目录里重新关联远程仓库，还是一样先备份源码到github，再部署网页到相应服务器。\n先备份源码，再部署网页，是为了GitInfo以及lastmod能够生效和更新，其实源码可以备份到github、gitee、coding中任意一个公开仓库都可以，当然备份到github最好。网页也无需和源码放在同一个代码托管平台上。\n2022.3.4 如果使用Git Submodule子模块管理Hugo主题，将源码克隆到本地，使用下面这条命令才能将主题一同克隆到本地。\n1 git clone -b develop git@github.com:iwyang/hugo.git hugo --recursive 总结 最好不要反复切换部署仓库，否则git会出现以下错误提示：\n1 2 3 4 5 remote: error: The last gc run reported the following. Please correct the root cause remote: and remove gc.log. remote: Automatic cleanup will not be performed until the file is removed. remote: remote: warning: There are too many unreachable loose objects; run \u0026#39;git prune\u0026#39; to remove them. 查资料，原来是自己本地一些 “悬空对象”太多(git删除分支或者清空stash的时候，这些其实还没有真正删除，成为悬空对象，我们可以使用merge命令可以从中恢复一些文件)\n解决方法：\n1.输入命令：git fsck --lost-found，可以看到好多“dangling commit”\n2.清空他们：git gc --prune=now，完成\n参考链接 1.Hugo+github搭建个人博客 (windows10) 2.如何利用 GitHub Pages 和 Hugo 轻松搭建个人博客？ 3.Hugo 从入门到会用 4.码云Pages 5.git运行突然提示 remote: error: The last gc run reported the following ","date":"2020-05-13T01:42:25Z","permalink":"//localhost:1313/archives/hugo%E9%83%A8%E7%BD%B2%E5%88%B0coding%E5%A4%87%E4%BB%BD%E6%BA%90%E7%A0%81/","title":"hugo部署到coding\u0026备份源码"},{"content":"上回做过hexo迁移笔记，基本思路是利用U盘拷贝，或者网盘自动同步来备份，这回是通过git备份还原hexo源码。\nHexo博客存在一个问题：我们仅仅将博客的静态页面文件部署到了github远程仓库中，而我们的站点源文件仍在本地存储。如果存储站点源文件的电脑系统崩溃了，或者我们换了其他电脑，我们便无法实时更新博客了。\n如果选择重新搭建站点，不仅过程繁琐，而且还需要大量时间安装依赖、主题配置、博客优化，极其麻烦。所以我们需要将站点必要文件也部署到远程仓库中。然而github的私有仓库是要收费的，如果用免费仓库，暴露hexo源码，尤其是配置文件是很不安全的，因为配置文件中可能含有你的隐私信息，比如各种秘钥等。所以有一个私人仓库是很有利的。你可以通过购买服务器搭建自己的git私人服务器并备份hexo源码。你也可以在coding等这样提供私人仓库的服务商进行hexo源码备份。 我们采取的远程仓库部署策略是：使用coding的私人仓库，一个仓库两个分支。仓库即[yourname.coding.me]，一个分支[master]用于托管演示页面，一个分支[backup]用于备份Hexo博客站点的必要文件。\n备份 多机同步更新的前提：backup分支（也可以是其他名称的分支或者新的仓库）\nHexo博客站点的必要文件：\n1 2 3 4 5 6 7 8 . ├── scaffolds # 文章模板 ├── source # 用户源文件：页面，文章markdown文件 ├── themes # 主题 ├── .gitignore # git忽略文件信息 ├── _config.yml # 站点配置文件 ├── package.json # 已安装插件映射表，下次只需npm install即直接安装表中的插件 ├── package-lock.json 使git上传远程git服务器（这里是coding）时可忽略不必要的文件，做法是编辑站点根目录下的.gitignore文件，复制粘贴一下内容到.gitignore文件中。\n1 2 3 4 5 6 7 .DS_Store Thumbs.db db.json *.log node_modules/ public/ .deploy*/ 删除必要文件 删除themes/你的主题中的.git，.github，.gitignore等git仓库文件，只保留站点根目录下的.gitignore。\nhexo源码备份 备份到gitee backup分支 2020.7.8 现在没用这种备份方法\n1 2 3 4 5 6 git init git checkout -b backup git add .\tgit commit -m \u0026#34;提交说明\u0026#34; git remote add origin git@gitee.com:iwyang/iwyang.git git push --force origin backup\t备份到github master分支 2020.7.8 目前采用这种备份方法（一步一步的执行）\n1 2 3 4 5 git init git remote add origin git@github.com:iwyang/hexo.git git add . git commit -m \u0026#34;site backup\u0026#34; git push --force origin master PS: 如果执行第二步git checkout -b backup后，提示fatal: A branch named 'backup' already exists.，则执行以下操作\n1 2 git remote rm origin git checkout -b backup 实在不行先执行下面命令：\n1 git branch -D backup #删除分支:必须切换到其他的分之下才可操作 备份到github backup分支 2022.2.4 目前采用这种备份方法（一步一步的执行）\n1 2 3 4 5 6 git init git checkout -b backup git remote add origin git@github.com:iwyang/iwyang.github.io.git git add .\tgit commit -m \u0026#34;site backup\u0026#34; git push --force origin backup 如果出现问题参考上面解决方法。\n部署脚本 根目录新建deploy.sh：\n1 2 3 4 5 6 7 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; git add .\tgit commit -m \u0026#34;site backup\u0026#34; git push --force origin backup hexo clean hexo g -d 还原 还原前提 安装Git，nodejs，配置环境变量。\nhexo源码还原 1 2 3 4 $ git clone git@github.com:iwyang/hexo.git\t# 克隆master分支到本地，私有仓库需要输入用户名和密码 $ cd hexo-master\t# 进入hexo-master文件夹 $ npm install -g hexo-cli\t# 全局安装hexo $ npm install\t# 安装所有依赖(hexo以及插件的依赖)，根据package.json自动安装之前安装过的插件 Git配置用户信息（新系统环境下） 在Git bash中输入：\n1.设置用户名\n1 git config --global user.name \u0026#39;这里填写自己的用户名\u0026#39; 2.设置用户名邮箱\n1 git config --global user.email \u0026#39;这里填写自己的用户邮箱\u0026#39; 3.查看配置信息\n1 git config --list 注意：该设置在GitHub仓库主页显示谁提交了该文件，注意这里的 - 有两个！\n配置网络协议 SSH协议，长期部署推荐SSH，一劳永逸。\n1.SSH秘钥：\n1 2 3 $ ssh-keygen -t rsa -C \u0026#34;youremail@example.com\u0026#34;\t# 生成rsa秘钥 $ cd ~/.ssh\t# 进入虚拟目录ssh文件中 $ cat id_rsa.pub\t# 显示id_rsa.pub文件内容 2.复制秘钥至github/coding-\u0026gt;用户setting-\u0026gt;SSH keys，New SSH Key\n3.验证是否添加成功\n1 2 $ ssh -T git@github.com # 验证github是否添加成功 $ ssh -T git@git.coding.net # 验证coding是否添加成功 4.编辑站点配置文件_config.yml\n1 2 3 4 5 6 deploy: type: git repo: github: git@github.com:yourname/yourname.github.io.git coding: git@git.coding.net:yourname/yourname.coding.me.git branch: master 及时更新hexo源码到coding 发表文章、更新文章、修改源码，要及时更新hexo源码到coding。\n1 2 3 git add . git commit -m \u0026#34;更新\u0026#34; git push --force origin master 2020.7.8 把这段代码放在自动部署脚本里即可。\n参考链接 1.通过git备份还原hexo源码\n2.git报错：\u0026lsquo;fatal:remote origin already exists\u0026rsquo;怎么处理\n3.git 常用命令\n","date":"2020-05-10T15:09:25Z","permalink":"//localhost:1313/archives/hexo%E9%80%9A%E8%BF%87git%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F%E6%BA%90%E7%A0%81/","title":"hexo通过git备份\u0026还原源码"},{"content":"1. 更换电脑、重装系统 1 git clone -b backup git@github.com:iwyang/iwyang.github.io.git blog 1 2 3 4 cd blog npm install -g hexo-cli\tnpm install\thexo s 最后将服务器原来的SSH 公钥先删除，再上传新的SSH 公钥。具体操作如下:\n服务器上输入：\n1 2 3 su git cd ~/.ssh rm -rf authorized_keys 本地Git Bash里输入：\n1 ssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址 如果在git bash中输入ssh git@服务器的IP地址,能够远程登录的话，则表示设置成功了。如若还是要输入密码，就修改目录权限：\n1 2 chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh 登录成功会提示：\n1 2 3 $ ssh git@104.224.191.88 Last login: Sat Feb 26 02:33:30 2022 from 171.81.158.144 [git@special-beep-1 ~]$ 2. 更换服务器 最好首先克隆github上的源码。\n1 2 3 4 5 6 git config --global user.name \u0026#34;iwyang\u0026#34; git config --global user.email \u0026#34;455343442@qq.com\u0026#34; git clone -b backup git@github.com:iwyang/iwyang.github.io.git blog ssh-copy-id -i ~/.ssh/id_rsa.pub git@104.224.191.88 ssh git@104.224.191.88 git clone git@github.com:iwyang/pic.git pic 可结合hexo通过git备份\u0026amp;还原源码这篇文章来看。\n参考：\nubuntu 搭建hexo-服务器操作部分 centos8 搭建hexo-服务器操作部分 ","date":"2020-04-27T16:27:11Z","permalink":"//localhost:1313/archives/hexo%E8%BF%81%E7%A7%BB%E7%AC%94%E8%AE%B0/","title":"Hexo迁移笔记"},{"content":"Hexo 一键部署插件 地址 hexo-deployer-git 安装配置 安装插件：\n1 npm install hexo-deployer-git --save 然后修改站点配置文件_config.yml 中的配置：\n1 2 3 deploy: type: git repo: git@blog.yizhilee.com:hexo.git Hexo 本地搜索功能 地址 hexo-generator-searchdb 安装配置 1 npm install hexo-generator-search --save 然后我们修改站点配置_config.yml 文件，添加如下内容：\n1 2 3 4 search: path: search.xml field: all content: true path：索引文件的路径，相对于站点根目录 field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面 limit：限制搜索的条目数 然后修改主题配置文件next.yml：\n1 2 3 local_search: - enable: false + enable: true Hexo 站点地图 sitemap 生成 地址 hexo-generator-sitemap 安装配置 1 npm install hexo-generator-sitemap --save 然后我们需要在 Hexo 站点配置文件_config.yml 中加入 sitemap 插件：\n1 2 3 4 5 6 # 通用站点地图 sitemap: path: sitemap.xml rel: false tags: true categories: true hexo-abbrlink 可以把链接permalink转为数字的插件，配置容易，生成时自动转为数字。\n地址：hexo-abbrlink\n安装：npm install hexo-abbrlink --save\n配置 config.yml:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 url: https://bore.vip permalink: archives/:abbrlink/ # abbrlink config abbrlink: alg: crc32 #support crc16(default) and crc32 rep: hex #support dec(default) and hex drafts: false #(true)Process draft,(false)Do not process draft. false(default) # Generate categories from directory-tree # depth: the max_depth of directory-tree you want to generate, should \u0026gt; 0 auto_category: enable: false #true(default) depth: #3(default) over_write: false auto_title: false #enable auto title, it can auto fill the title by path auto_date: false #enable auto date, it can auto fill the date by time today force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. #进制： dec(default) and hex hexo-filter-nofollow 安装：npm i hexo-filter-nofollow --save\n然后我们在站点的配置文件_config.yml 中添加配置，\n1 2 3 4 nofollow: enable: true field: site exclude: 文章置顶 地址：hexo-generator-index\n安装：npm install hexo-generator-index --save\n配置：然后我们修改站点配置_config.yml 文件\n1 2 3 4 5 index_generator: path: \u0026#39;\u0026#39; per_page: 10 order_by: -date + pagination_dir: page 使用：你可以直接在文章的front-matter区域里添加sticky: 1属性来把这篇文章置顶。数值越大，置顶的优先级越大。\nRSS订阅插件 地址：hexo-generator-feed\n安装：npm install hexo-generator-feed --save\n配置：然后我们修改站点配置_config.yml 文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 feed: enable: true type: rss2 path: rss2.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: \u0026#39; \u0026#39; order_by: -date icon: icon.png autodiscovery: true template: 使用atom.xml会出现乱码，更多选项查看插件说明。\n参考链接 本博客当前使用的插件总结\n","date":"2020-04-26T21:24:16Z","permalink":"//localhost:1313/archives/hexo%E5%B7%B2%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E5%A4%87%E5%BF%98/","title":"hexo已使用插件备忘"},{"content":"2020.8.1 Hexo 5.0后要将主题配置文件复制到站点根目录，然后重命名为 _config.next.yml\n获取 NexT 下载最新 release 版本 通常情况下请选择 stable 版本。推荐不熟悉的用户按此方式进行。\n这种方式将仅提供最新的 release 版本（其中不附带 .git 目录）。因此，你无法通过 git 更新这一方式安装的主题。\n更新：推荐使用独立的配置文件（数据文件）而不在主题源代码进行更改，便于后续的更新（下载最新版本，替换掉旧版本）。\n站点配置 设置 hexo 的 next 主题 我们在站点的配置文件_config.yml中找到 theme 后修改： theme: next # 配置成刚下载的next主题\n配置 hexo 网站相关信息 1 2 3 4 5 6 7 8 # Site title: # 网站标题 subtitle: # 网站副标题 description: # 描述，介绍网站的 keywords: # 网站的关键字 author: # 博主姓名 language: zh-CN # 语言：zh-CN 是简体中文 timezone: \u0026#39;\u0026#39; #时区，默认不填就好，如果要填，填Asia/Shanghai 设置 hexo 永久链接 本着简单原则，在站点配置文_config.yml件里将固定链接改成：\n1 2 3 url: https://bore.vip root: / permalink: archives/:title/ nofollow 标签的使用 减少出站链接能够有效防止权重分散，hexo 有很方便的自动为出站链接添加 nofollow 标签的插件。 首先安装 hexo-filter-nofollow 插件： npm install hexo-filter-nofollow --save 然后我们在站点的配置文件_config.yml 中添加配置，将 nofollow 设置为 true：\n1 2 3 4 5 6 7 # 外部链接优化 nofollow: enable: true field: site exclude: - \u0026#39;exclude1.com\u0026#39; - \u0026#39;exclude2.com\u0026#39; 其中 exclude（例外的链接，比如友链）将不会被加上 nofollow 属性。\n站点地图 sitemap 生成 npm install hexo-generator-sitemap --save 然后我们需要在 Hexo 站点配置文件中加入 sitemap 插件：\n1 2 3 # 通用站点地图 sitemap: path: sitemap.xml 修改网站的图标 Favicon 把图标放在 /themes/next/source/images 里，并且修改 主题配置文件（next.yml）：\n1 2 3 4 5 6 7 favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/favicon-32x32-next.png safari_pinned_tab: /images/favicon-32x32-next.png #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 主题配置 准备工作，配置文件分离 Next主题在7.3之后分离了配置文件与主题，详情请见小丁的个人博客\n新建文件夹hexo/source/_data 将./themes/next/_config.yml复制到hexo/source/_data路径下并重命名为next.yml 将next.yml中的override设置为true即可作为主题的配置文件使用 1 override: true 在hexo/source/_data中新建body-end.swig和styles.styl文件 然后在next.yml的custom_file_path中删除前面的#来启用bodyEnd和style custom_file_path中的其他选项根据需要创建相关文件并启用 指定next-Gemini模板 主题配置文件（next.yml），关键字：Schemes,修改\n1 2 3 4 #scheme: Muse #scheme: Mist #scheme: Pisces #打开前面的注释 scheme: Gemini Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 Gemini - 左侧网站信息及目录，块+片段结构布局 配置 hexo 中的 about、tag、categories、sitemap 菜单 默认的主题配置文件_config.yml（next.yml） 中，菜单只开启了首页和归档，我们根据需要，可以添加 about、tag、categories、sitemap 等菜单，所以把它们也取消注释。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 菜单设置为 菜单名: /菜单目录 || 菜单图标名字 menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar sitemap: /sitemap.xml || sitemap commonweal: /404/ || heartbeat menu_settings: icons: true # 显示图标 badges: true # 显示统计信息 注：hexo 所有图标均来自 fontawesome，其中 || 后面是你想要设置的图标的名字。 菜单项的中文文本翻译见菜单中文翻译\n手动生成 hexo 菜单对应文件 新建 about 页面 我们可以在博客根目录下输入以下命令新建页面： hexo new page about 然后你会发现多了一个 hexo/source/about 文件夹，里面有一个 index.md 文件，你可以根据自己的需要在这个 Markdown 文件中写一些内容（同文章一样，用 Markdown 语法）。\n新建一个 tags 页面 同样的，我们可以新建 tags 页面： hexo new page tags 在 tags 页面文件 hexo/source/tags/index.md 的头部修改为：\n1 2 3 4 5 6 --- title: 标签 date: 2020-04-26 00:13:30 # 时间随意 type: \u0026#34;tags\u0026#34; # 类型一定要为tags comments: false # 提示这个页面不需要加载评论 --- 新建一个 categories 页面 同样的，我们可以新建 categories 页面： hexo new page categories 在 categories 页面文件 hexo/source/categories/index.md 的头部修改为：\n1 2 3 4 5 6 --- title: 文章分类 date: 2020-04-26 00:15:00 type: \u0026#34;categories\u0026#34; comments: false --- 新建一个 404 页面 这里我们将 404 替换成腾讯的公益页面。 首先我们在 hexo/source 目录下创建自己的 404.html：\n1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;404\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; homePageUrl=\u0026#34;/\u0026#34; homePageName=\u0026#34;返回\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 注意：Hexo 博客的基本内容是一些 Markdown 文件，放在 source/_post 文件夹下，每个文件对应一篇文章。除此之外，放在 source 文件夹下的所有开头不是下划线的文件，在 hexo generate 的时候，都会被拷贝到 public 文件夹下。但是，Hexo 默认会渲染所有的 HTML 和 Markdown 文件。\n因此我们可以简单地在文件开头加上 layout: false 一行来避免渲染：\n1 2 3 4 5 6 7 8 9 10 11 layout: false \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;404\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; homePageUrl=\u0026#34;/\u0026#34; homePageName=\u0026#34;返回\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 这样我们就完成了 404 页面的创建。注意：本地测试不出来，发布出来就### 配置 hexo 本地搜索可以了。\n配置 hexo 本地搜索 本地搜索的原理 对于动态网站来说，可以通过 php 实现。但是，Hexo 博客是静态网站，用不了 php。 NexT 主题已经实现这个功能，它用了 Hexo 的拓展包 hexo-generator-searchdb，预先生成了一个文本库 search.xml，然后传到了网站里面。在本地搜索的时候，NexT 直接用 javascript 调用了这个文件，从而实现了静态网站的本地搜索。\n设置过程 安装插件: npm install hexo-generator-searchdb --save 然后我们修改站点配置_config.yml 文件，添加如下内容：\n1 2 3 4 5 6 # 本地搜索 search: path: search.xml field: all format: html limit: 100 path：索引文件的路径，相对于站点根目录 field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面 limit：限制搜索的条目数 然后修改主题配置文件_config.yml（next.yml）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 # Local Search # Dependencies: https://github.com/theme-next/hexo-generator-searchdb local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false utterances评论系统\u0026amp;\u0026amp;valine 评论 如果使用utterances评论系统，一定要先关闭Pjax插件，否则utterances评论无法登陆\r1 pjax: false utterances评论系统 注意NexT 8.1.0起没有用valine\r具体见：Hide options of Valine\n创建 Github 仓库 utterance 使用 Github 保存评论，那我们就需要创建一个 repository 专门保存评论。你也可以将评论放在发布网页的仓库，注意要是公共仓库。\n授权 用户在博客页面上输入评论，utterance 拿到这个评论后，自动的提交到上面刚创建仓库的 Issues 里。\n所以我们需要授权 utterance 应用能访问仓库的 Issues。\n点击链接： https://github.com/apps/utterances ，点击选择Only select repositories，选中相应的仓库。\n主题配置 1 2 3 4 5 6 7 utterances: enable: true repo: iwyang/comments # Available values: pathname | url | title | og:title issue_term: title # Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light theme: github-light 解释一下主要参数：\nrepo：存放评论的issues的仓库名 issue-term：指定issues的标题，title表示使用文章的标题作为issues的标题，推荐使用这个。（pathname：网址域名之外的文件名；url：博客网址，网址全路径；title：博客标题） 回复评论方法 使用markdown语法引用，或者进issues里评论，或者直接在评论区@用户名然后再加上评论。\n1 2 3 \u0026gt; 这里引用别人的评论 这里是你要回复的评论，中间要空一行 valine评论 获取 APP id 和 APP key 注意右上角选择国际版。\n你可以点击 LeanCloud ，注册登录，进入控制台后点击创建应用。 进入刚刚创建的应用，选择设置 》应用Keys，就能看到你的 APP ID 和 APP Key 修改主题配置文件 注意guest_info这一栏，删除link，评论框就没有网址选项。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Valine # You can get your appid and appkey from https://leancloud.cn # For more information: https://valine.js.org, https://github.com/xCss/Valine # 配置项详情请查阅官方文档。 valine: enable: true # 开启评论功能 appid: # 填入刚刚获取的APP ID appkey: # 填入刚刚获取的APP key notify: false # 邮件通知默认关闭 verify: false # 验证码默认关闭 placeholder: 在这里写下你的评论吧！ # 评论框默认文字 avatar: mm # 头像风格 guest_info: nick,mail #,link # Custom comment header pageSize: 10 # Pagination size language: # Language, available values: en, zh-cn visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors\u0026#39; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html comment_count: false # If false, comment count will only be displayed in post page, not in home page recordIP: false # 是否记录IP serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in) #post_meta_order: 0 valine评论标题改中文中文 打开themes -\u0026gt; next -\u0026gt; languages -\u0026gt; zh-CN.yml\n1 2 3 # 在post标签下添加如下代码 comments: valine: 评论数 # 这里的中文随便自己定义 设置 hexo 中的 rss 订阅 没有用，不推荐\n配置 hexo 主题next.yml的 footer 信息 底部 footer 可以开关显示 hexo 信息、theme 信息、建站时间等个性化配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 footer: since: 2020 # 建站开始时间 icon: name: user # 设置 建站初始时间和至今时间中间的图标，默认是一个\u0026#39;小人像\u0026#39;，更改user为heart可以变成一个心 animated: true color: \u0026#34;#808080\u0026#34; # 更改图标的颜色，红色为\u0026#39;#ff0000\u0026#39; powered: enable: true # 开启hexo驱动 version: true # 开启hexo版本号 theme: enable: true # 开启主题驱动 version: true # 开启主题版本号 custom_text: Hosted by \u0026lt;a target=\u0026#34;_blank\u0026#34; rel=\u0026#34;external nofollow\u0026#34; href=\u0026#34;https://pages.coding.me\u0026#34;\u0026gt;\u0026lt;b\u0026gt;Coding Pages\u0026lt;/b\u0026gt;\u0026lt;/a\u0026gt; # 这里的底部标识是为了添加coding page服务时的版权声明 打开注释就可以看到底部有一个 hosted by coding pages 头像信息设置 next.yml 1 2 3 4 5 avatar: url: /images/avatar.jpg # 设置头像资源的位置 rounded: true # 开启圆形头像 opacity: 1 # 不透明的比例：0就是完全透明 rotated: false # 不开启旋转 社交信息和友链配置 这里和菜单设置格式一样，社交名字: 社交url || 社交图标，图标信息来自 fontawesome：\n1 2 3 4 5 6 7 8 social: GitHub: https://github.com/yourname || github E-Mail: mailto:yourname@gmail.com || envelope Google: https://plus.google.com/yourname || google social_icons: enable: true # 显示社交图标 icons_only: false # 只显示图标，不显示文字 友链配置：\n1 2 3 4 5 6 7 # Blog rolls links_icon: link # 友链的图标 参考上文 links_title: Links # 友链的title 比如你可以更改为 友情链接 links_layout: block # 友链摆放的样式：按块（一行一个） #links_layout: inline # 友链摆放的样式：按线摆放（一行很多个），注意，同时只能一种样式 links: Title: http://example.com/ # 友链的地址 官方提供的友链放在侧边栏下面，视觉上比较臃肿。这里我新建了一个友链页面：友情链接，设置教程见：Hexo-NexT 新增友链。\n首页文章不展示全文显示摘要 官方公告：auto_excerpt 可以自动截断文章内容作为摘要。此功能不是一个 Hexo 主题应当负责的，这为主题的维护者带来了太大压力。自 7.6.0 版本开始，此功能被移除，请自行安装第三方插件，或阅读 Hexo 有关文档。当然，我们仍然建议通过 `` 来精确控制 Read More 的位置。\n因此，这个功能在新版的 NexT 已经被废弃了，大家可以直接在文章中添加 来精确控制摘要内容。\n首页文章属性next.yml 1 2 3 4 5 6 7 post_meta: item_text: true # 设为true 可以一行显示，文章的所有属性 created_at: true # 显示创建时间 updated_at: enabled: true # 显示修改的时间 another_day: true # 设true时，如果创建时间和修改时间一样则显示一个时间 categories: true # 显示分类信息 页面阅读统计 不蒜子统计 1 2 3 4 5 6 7 8 busuanzi_count: enable: false # 设true 开启 total_visitors: true # 总阅读人数（uv数） total_visitors_icon: user # 阅读总人数的图标 total_views: true # 总阅读次数（pv数） total_views_icon: eye # 阅读总次数的图标 post_views: true # 开启内容阅读次数 post_views_icon: eye # 内容页阅读数的图标 字数统计、阅读时长 首先安装插件： npm install hexo-symbols-count-time --save 主题配置文件_config.yml（next.yml） 修改如下：\n1 2 3 4 5 6 symbols_count_time: separated_meta: true # false会显示一行 item_text_post: true # 显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字 item_text_total: true # 底部footer是否显示字数统计属性文字 awl: 4 # 计算字数的一个设置,没设置过 wpm: 275 # 一分钟阅读的字数 站点配置文件_config.yml 新增如下：\n1 2 3 4 5 6 7 symbols_count_time: #文章内是否显示 symbols: true time: true # 网页底部是否显示 total_symbols: true total_time: true 内容页里的代码块新增复制按钮 1 2 3 4 codeblock: copy_button: enable: false # 增加复制按钮的开关 show_result: true # 点击复制完后是否显示 复制成功 结果提示 Mac风格代码块样式 hexo\\source_data\\next.yml里修改：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 codeblock: # Code Highlight theme # See: https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: light: agate dark: dark # See: https://github.com/PrismJS/prism/tree/master/themes prism: light: prism dark: prism-dark # Add copy button on codeblock copy_button: enable: true # Available values: default | flat | mac style: mac 配置微信，支付宝打赏 1 2 3 4 5 # Reward reward_comment: # 打赏描述 wechatpay: /images/wechatpay.png # 微信支付的二维码图片地址 alipay: /images/alipay.png # 支付宝的地址 #bitcoin: /images/bitcoin.png # 比特币地址 相关文章推荐 安装推荐文章的插件： npm install hexo-related-popular-posts --save 主题配置信息（next.yml）如下:\n1 2 3 4 5 6 7 8 9 10 related_posts: enable: true title: 相关文章推荐 # 属性的命名 display_in_home: false # false代表首页不显示 params: maxCount: 5 # 最多5条 #PPMixingRate: 0.0 # 相关度 #isDate: true # 是否显示日期 #isImage: false # 是否显示配图 isExcerpt: false # 是否显示摘要 文章原创申明 1 2 3 4 5 creative_commons: license: by-nc-sa sidebar: false post: true # 默认显示版权信息 language: 修改文章底部标签的样式 1 2 3 # Use icon instead of the symbol # to indicate the tag at the bottom of the post # 标签代替# tag_icon: true 显示当前浏览进度next.yml 1 2 3 4 5 6 back2top: enable: false # 默认关闭 # Back to top in sidebar. sidebar: true # Scroll percent label in b2t button. scrollpercent: true 修改 back2top 标签 地址：hexo-cake-moon-menu\n1 npm install hexo-cake-moon-menu --save If you are using NexT theme version 7.8 or earlier, install version 2.1.2\n1 npm i hexo-cake-moon-menu@2.1.2 然后在站点配置文件_config.yml 中添加以下代码：\n1 2 3 4 5 6 7 8 9 10 11 moon_menu: back2top: enable: true icon: fa fa-chevron-up func: back2top order: -1 back2bottom: enable: true icon: fa fa-chevron-down func: back2bottom order: -2 {% note info %}\n2021.3.22 注意：如果在hexo升级5.4后，安装有此插件就会报错（当然也有可能是主题和这个插件不兼容，Next升级8.5后不会报错了，大概率是主题问题，只需升级到最新主题，即可避免这个问题），则需要卸载此插件。代码如下：\n1 npm remove hexo-cake-moon-menu --save 2021.6.19 安装此插件，不报错了，目前版本hexo 5.4+Next 8.5\n{% endnote %}\n菜单栏显示分类 / 标签中的文章数目 scheme选择Gemini\n1 2 menu_settings: badges: true # 显示菜单分类的数目 进阶配置 修改文章默认模板 修改hexo\\scaffolds\\post.md\n1 2 3 4 5 6 title: {{ title }} date: {{ date }} categories: [] tags: [] abbrlink: top: 新增文章时自动打开Markdown编辑器 首先在 hexo/scripts 下新建一个 newpost.js 文件，如果没有 scripts 文件可以手动创建一个。\n在这个文件写入如下代码：\n1 2 3 4 var spawn = require(\u0026#39;child_process\u0026#39;).exec; hexo.on(\u0026#39;new\u0026#39;, function(data){ spawn(\u0026#39;start \u0026#34;markdown编辑器绝对路径.exe\u0026#34; \u0026#39; + data.path); }); 注意里面要修改的是 Markdown 编辑器的绝对路径，我使用的是 Typora ，所以我的绝对路径是 D:\\Program Files\\Typora\\Typora.exe ，大家可以对应进行修改。\nPjax插件 Pjax是基于Ajax的插件，能实现网页局部无刷新载入，听起来很香，然而存在一些小问题：\n如果使用utterances评论系统，一定要先关闭Pjax插件，否则utterances评论无法登陆\r使用Mediumzoom时，从归档进入博文不会加载图片，需要刷新网页才能加载 Echarts图表全部需要刷新才能显示，否则只有一片空白 安装Pjax，地址： next-theme /pjax ，运行以下代码安装：\n1 git clone https://github.com/next-theme/pjax source/lib/pjax 然后在next.yml中搜索pjax并设置为pjax: true\n如果部署是报错:\n1 2 3 ERROR Process failed: lib/pjax/README.md YAMLException: end of the stream or a document separator is expected at line 9, column 102: ... languages` and other directories: 解决方法：安装完pjax插件后，部署时报错\n在 Hexo 的 _config.yml 中找到名为 skip_render 的选项，然后设置为这样:\n1 2 skip_render: - lib/**/* 加载进度条 注意next8.0.1后改用NProgress进度条插件\r在next.yml中搜索Progress bar in the top during page loading并设置为：\n1 2 3 nprogress: enable: true spinner: true next8.0.1之前，先安装插件：\r1 git clone https://github.com/theme-next/theme-next-pace source/lib/pace 然后设置：\n1 2 pace: enable: true 阅读进度条 1 2 3 4 5 6 7 # Reading progress bar reading_progress: enable: true # Available values: top | bottom position: top color: \u0026#34;#37c6c0\u0026#34; height: 3px 背景图片 将背景图片放置在./hexo/themes/next/source/images中并命名为background.jpg 然后在./hexo/source/_data/styles.styl中添加\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 body { background:url(/images/background.jpg);//图片路径 background-repeat: no-repeat;//是否重复平铺 background-attachment: fixed;//是否随着网页上下滚动而滚动，fixed为固定 background-position: 50% 50%;//图片位置 background-size: cover;//图片展示大小 -webkit-background-size: cover; -o-background-size: cover; -moz-background-size: cover; -ms-background-size: cover; opacity: 0.95; footer \u0026gt; div \u0026gt; div { color:#000000;//底部文字颜色 } } 第二种代码：（未测试，目前使用的是上面的代码）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 body { background:url(/images/yourbackground.jpg); background-repeat: no-repeat; background-attachment:fixed; //不重复 background-size: cover; //填充 background-position:50% 50%; } //博客内容透明化 //文章内容的透明度设置 .content-wrap { opacity: 0.95; } //侧边框的透明度设置 .sidebar { opacity: 0.9; } //菜单栏的透明度设置 .header-inner { background: rgba(255,255,255,0.9); } //搜索框（local-search）的透明度设置 .popup { opacity: 0.9; } 首页文章阴影边框 找到三种方法，在next7.7.2中都不起效。\nscheme选择Gemini 1 2 3 4 5 # Schemes #scheme: Muse #scheme: Mist #scheme: Pisces scheme: Gemini 在styles.styl里添加代码 方法一只有首页第一篇文章有阴影效果，其他两种方法都没有效果。（不折腾了）\n1 2 3 4 5 6 7 .content-wrap { background: initial; } .post-block { box-shadow: 0 2px 6px 0 rgb(0,0,0,0.6), 0 0 6px 0 rgb(0,0,0,0.6) background: #FFF } 1 2 3 4 5 6 7 8 9 // 主页文章添加阴影效果 .post_block { opacity: 0; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); } 1 2 3 4 5 6 7 8 // 主页文章添加阴影效果 .post { margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); } 自定义单行代码颜色 在./hexo/source/_data/styles.styl中添加\n1 2 3 4 5 6 // 单行代码颜色 code { color: #ff511A; background: #fbf7f8; margin: 2px; } 代码块高亮diff写法 Next主题其实是自带代码块高亮显示的，但是有另外一种好玩的代码块高亮写法，叫 diff 语言。只需要在 markdown 语法代码块的语言选择处写上 diff 即可，然后在相应代码前面加上 - 和 + 就行了。（注意+ -前面不要加空格）\n菜单中文翻译 我们原来是通过配置主题下的 languages 目录中的 zh-CN.yml 文件来对菜单等进行中文翻译的，现在我们可以通过在 hexo/source/_data/ 下新建数据文件 languages.yml，配置如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 zh-CN: menu: home: 首页 top: 热榜 archives: 归档 categories: 分类 tags: 标签 about: 关于 links: 友情链接 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益 404 movies: 观影 books: 阅读 gallery: 画廊 reward: donate: \u0026lt;i class=\u0026#34;fa fa-qrcode fa-2x\u0026#34; style=\u0026#34;line-height:35px;\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; wechatpay: 微信支付 alipay: 支付宝 bitcoin: 比特币 文章末尾添加本文结束分割线 新建 source/_data/post-body-end.swig 文件，添加内容：\n1 2 3 4 5 \u0026lt;div\u0026gt; {% if not is_index %} \u0026lt;div style=\u0026#34;text-align:center;color: #ccc;font-size:14px;\u0026#34;\u0026gt;-------------本文结束\u0026lt;i class=\u0026#34;fa fa-paw\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;感谢您的阅读-------------\u0026lt;/div\u0026gt; {% endif %} \u0026lt;/div\u0026gt; 在next.yml中，去掉注释 postBodyEnd: source/_data/post-body-end.swig\n圆角设置、中文字体设置 圆角设置 在自定义样式文件 hexo\\source\\_data\\variables.styl 中添加：\n1 2 3 // 圆角设置 $border-radius-inner = 20px 20px 20px 20px; $border-radius = 20px; 然后在 NexT 的配置文件 next.yml 中取消 variables.styl 的注释： variable: source/_data/variables.styl 在这里会有一个bug，左下角始终会有个白块。解决方法:你只需要在 source\\_data\\styles.styl 文件中添加一行代码即可：\n1 2 // 修复圆角 :root{--body-bg-color: hsla(0,0%,100%,0)} 或者添加下列代码：\n1 2 3 4 5 // 修复圆角 .sidebar { box-shadow: none background: none } 中文字体设置 首先修改主题配置文件 next.yml：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 font: - enable: false + enable: true # Uri of fonts host. E.g. //fonts.googleapis.com (Default). - host: + host: https://fonts.loli.net # Font options: # `external: true` will load this font family from `host` above. # `family: Times New Roman`. Without any quotes. # `size: xx`. Use `px` as unit. # Global font settings used for all elements in \u0026lt;body\u0026gt;. global: external: true - family: + family: Noto Serif SC size: 修改配置文件 \\hexo\\source_data\\variables.styl，增加如下代码：\n1 2 3 // 中文字体 $font-family-monospace = consolas, Menlo, monospace, $font-family-base; $font-family-monospace = get_font_family(\u0026#39;codes\u0026#39;), consolas, Menlo, monospace, $font-family-base if get_font_family(\u0026#39;codes\u0026#39;); 鼠标点击特效、打字特效、友链等 打字特效、鼠标点击特效 之前版本：Hexo-NexT 添加打字特效、鼠标点击特效中，以下代码是放在 hexo/next/_layout/_custom/custom.swig 文件中的，现在这部分代码需要放到 hexo/source/_data/body-end.swig 文件中：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 {# 鼠标点击特效 #} {% if theme.cursor_effect == \u0026#34;fireworks\u0026#34; %} \u0026lt;script async src=\u0026#34;/js/cursor/fireworks.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {% elseif theme.cursor_effect == \u0026#34;explosion\u0026#34; %} \u0026lt;canvas class=\u0026#34;fireworks\u0026#34; style=\u0026#34;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;\u0026#34; \u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;script src=\u0026#34;//cdn.bootcss.com/animejs/2.2.0/anime.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script async src=\u0026#34;/js/cursor/explosion.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {% elseif theme.cursor_effect == \u0026#34;love\u0026#34; %} \u0026lt;script async src=\u0026#34;/js/cursor/love.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {% elseif theme.cursor_effect == \u0026#34;text\u0026#34; %} \u0026lt;script async src=\u0026#34;/js/cursor/text.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {% endif %} {# 打字特效 #} {% if theme.typing_effect %} \u0026lt;script src=\u0026#34;/js/activate-power-mode.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; POWERMODE.colorful = {{ theme.typing_effect.colorful }}; POWERMODE.shake = {{ theme.typing_effect.shake }}; document.body.addEventListener(\u0026#39;input\u0026#39;, POWERMODE); \u0026lt;/script\u0026gt; {% endif %} 然后在 NexT 的配置文件 next.yml 中取消 body-end.swig 的注释： bodyEnd: source/_data/body-end.swig 然后我们在 next.yml 中增加如下配置项：\n1 2 3 4 5 6 7 8 9 # 鼠标点击特效 # mouse click effect: fireworks | explosion | love | text cursor_effect: fireworks # 打字特效 # typing effect typing_effect: colorful: true # 礼花特效 shake: false # 震动特效 注意：上面所有特效的 JS 代码文件都放在站点的 source 目录下（即 hexo/source/js/）而不是主题目录下，如果没有 js 目录，则新建一个。\n友链添加 详见：Hexo-NexT 新增友链 从第一种友链方式改用第二种友链方式，因为第二种瀑布流友链样式是不用修改 NexT 主题源文件的。\n代码块折叠 参考：代码块折叠\n近期文章、粒子时钟特效 近期文章 现在我们把上面的代码放到 hexo/source/_data/sidebar.swig 文件中，并且做以下更改：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 {% if theme.recent_posts %} \u0026lt;div class=\u0026#34;links-of-blogroll motion-element {{ \u0026#34;links-of-blogroll-\u0026#34; + theme.recent_posts_layout }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;links-of-blogroll-title\u0026#34;\u0026gt; \u0026lt;!-- modify icon to fire by szw --\u0026gt; \u0026lt;i class=\u0026#34;fa fa-history fa-{{ theme.recent_posts_icon | lower }}\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; {{ theme.recent_posts_title }} \u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026#34;links-of-blogroll-list\u0026#34;\u0026gt; - {% set posts = site.posts.sort(\u0026#39;-date\u0026#39;) %} + {% set posts = site.posts.sort(\u0026#39;-date\u0026#39;).toArray() %} {% for post in posts.slice(\u0026#39;0\u0026#39;, \u0026#39;5\u0026#39;) %} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ url_for(post.path) }}\u0026#34; title=\u0026#34;{{ post.title }}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;{{ post.title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {% endif %} 这是因为 NexT 已经更换 Nunjucks 作为模板引擎。\n然后在 NexT 的配置文件 next.yml 中取消 sidebar.swig 的注释： sidebar: source/_data/sidebar.swig 最后，为了配置方便，在主题的next.yml 中添加了几个变量，如下：\n1 2 3 recent_posts_title: 近期文章 recent_posts_layout: block recent_posts: true 粒子时钟特效 现在我们只需要把粒子时钟的 js 代码直接放入到 hexo/source/_data/sidebar.swig 文件即可。 详情见：Hexo-NexT 增加 canvas 粒子时钟\n置顶文章标志 首先我们需要安装 hexo-generator-index-pin-top 这个插件，\n1 2 npm uninstall hexo-generator-index --save npm install hexo-generator-index-pin-top --save {% note primary %}\n2021.6.19：如果卸载hexo-generator-index，没有安装hexo-generator-index-pin-top，本地预览会提示Cannot GET/，原因在于缺少了hexo-generator-index组件。\n{% endnote %}\n然后将以下代码放入 hexo/source/_data/post-meta.swig 文件\n1 2 3 4 5 6 {% if post.top %} \u0026lt;span class=\u0026#34;post-meta-divider\u0026#34;\u0026gt;|\u0026lt;/span\u0026gt; \u0026lt;i class=\u0026#34;fa fa-thumb-tack\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;font color=7D26CD\u0026gt;置顶\u0026lt;/font\u0026gt; \u0026lt;span class=\u0026#34;post-meta-divider\u0026#34;\u0026gt;|\u0026lt;/span\u0026gt; {% endif %} 然后在 NexT 的配置文件 next.yml 中取消 post-meta.swig 的注释： post-meta: source/_data/post-meta.swig 使用方法：在需要置顶的文章的 Front-matter 中加上 top: true 或者 top: 任意数字，比如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- title: TMDb电影数据分析 declare: true toc: true tags: - Python - 数据分析 categories: - 数据分析 - 实战 abbrlink: 7e380af2 date: 2018-11-23 13:20:03 top: 100 --- 注意：top 中数字越大，文章越靠前。\n静态资源压缩插件 安装插件： npm install hexo-neat --save 然后我们需要在站点配置文件中添加以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # 博文压缩 neat_enable: true # 压缩html neat_html: enable: true exclude: # 压缩css neat_css: enable: true exclude: - \u0026#39;**/*.min.css\u0026#39; # 压缩js neat_js: enable: false mangle: true output: compress: exclude: - \u0026#39;**/*.min.js\u0026#39; - \u0026#39;**/jquery.fancybox.pack.js\u0026#39; - \u0026#39;**/index.js\u0026#39; - \u0026#39;**/fireworks.js\u0026#39; 首页改归档页 把 layout/archive.swig 改为 layout/index.swig 就行了。不过注意此时首页的 meta 信息是 archive （归档）……要做个清爽合格的首页，可以把原 index.swig 的 meta 信息拷贝到新 index.swig 下。\n1 2 3 4 5 // new index.swig (archive.swig) - {% block title %}{{ __(\u0026#39;title.archive\u0026#39;) }} | {{ title }}{% endblock %} + {% block title %}{{ title }}{%- if theme.index_with_subtitle and subtitle %} - {{ subtitle }}{%- endif %}{% endblock %} 修改首页、归档页显示文章数量 站点配置文件_config.yml里修改：\n1 2 3 4 index_generator: path: \u0026#39;\u0026#39; per_page: 10 order_by: -date 1 2 3 4 # Pagination ## Set per_page to 0 to disable pagination per_page: 10 pagination_dir: page 关闭文章目录自动数字编号 关闭文章目录自动数字编号后，可以自定义目录数字编号。\n在hexo\\source_data\\next.yml里修改：\n1 2 3 4 5 6 7 8 9 10 toc: enable: true # Automatically add list number to toc. number: false # If true, all words will placed on next lines if header width longer then sidebar width. wrap: false # If true, all level of TOC in a post will be displayed, rather than the activated part of it. expand_all: false # Maximum heading depth of generated toc. max_depth: 6 自动部署脚本 在根目录新建deploy.sh，输入以下内容：\n1 2 3 4 5 6 7 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; git add .\tgit commit -m \u0026#34;site backup\u0026#34; git push --force origin master hexo clean hexo g -d 有时候可能需要多次运行脚本才能提交成功，这时不妨手动输入命令。\nstyles.styl自定义样式 自用自定义样式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // 背景图片 body { background:url(https://cdn.jsdelivr.net/gh/iwyang/pic/background.jpg); background-repeat: no-repeat;//是否重复平铺 background-attachment: fixed;//是否随着网页上下滚动而滚动，fixed为固定 background-position: 50% 50%;//图片位置 background-size: cover;//图片展示大小 -webkit-background-size: cover; -o-background-size: cover; -moz-background-size: cover; -ms-background-size: cover; opacity: 0.95; footer \u0026gt; div \u0026gt; div { color:#000000;//底部文字颜色 } } // 单行代码颜色 code { color: #ff511A; background: #fbf7f8; margin: 2px; } // 修复圆角 :root{--body-bg-color: hsla(0,0%,100%,0)} // 修改选中字符的颜色 /* webkit, opera, IE9 */ ::selection { background: #00c4b6; color: #f7f7f7; } /* firefox */ ::-moz-selection { background: #00c4b6; color: #f7f7f7; } // 删除线 del { color: #b35888; background: #fbf7f8; margin: 2px; } // 文章内链接文本样式 .post-body p a{ color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; \u0026amp;:hover { color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; } } 二级菜单目录 NexT 主题支持多级目录，但是官网并没有直接给出配置的方法，因此很少见到有人使用，具体的样式可以参考官方网站的 Docs 页面，其上方的样式即为二级目录和三级目录。\n就以官方网站的 Docs 页面为例，其配置文件的目录设定内容为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 menu: News: / || bullhorn Docs: default: /docs/ || book Getting Started: default: /getting-started/ || flag Installation: /installation.html || download Deployment: /deployment.html || upload Data Files: /data-files.html || wrench Update from 5.x: /update-from-v5.html || retweet Theme Settings: default: /theme-settings/ || star Footer: /footer.html || sun-o Sidebar: /sidebar.html || bars Posts: /posts.html || pencil-square-o Custom Pages: /custom-pages.html || file-o SEO: /seo.html || external-link-square Front Matter: /front-matter.html || header Third Party Services: default: /third-party-services/ || plug Math Equations: /math-equations.html || superscript Comment Systems: /comments.html || comments-o Statistics and Analytics: /statistics-and-analytics.html || bar-chart Post Widgets: /post-widgets.html || share-square Search Services: /search-services.html || search-plus Chat Services: /chat-services.html || comment External Libraries: /external-libraries.html || puzzle-piece Tag Plugins: default: /tag-plugins/ || rocket Note: /note.html || comment Tabs: /tabs.html || columns PDF: /pdf.html || file-pdf-o Mermaid: /mermaid.html || tasks Label: /label.html || font Video: /video.html || video-camera Button: /button.html || square Caniuse: /caniuse.html || signal Group Pictures: /group-pictures.html || file-image-o Advanced Settings: /advanced-settings.html || cogs FAQ\u0026#39;s: /faqs.html || life-ring Troubleshooting: /troubleshooting.html || bug archives: /archives/ || archive 也就是说，在一级目录 Docs 下，我们想要创建 Getting Started、Theme Settings 等二级目录页面，那么需要作出如下修改：\n1 2 3 4 menu: - Docs: /docs/ || book + Docs: + default: /docs/ || book 即将当前目录默认页面的名称改为 default。然后再在 default 同级下添加：\n1 2 3 4 Docs: default: /docs/ || book + Getting Started: /getting-started/ || flag + Theme Settings: /theme-settings/ || star 我们需要在 ~/source/docs/ 文件夹下创建对应的文件夹 Getting Started 和 Theme Settings，文件夹中创建对应的 index.md 文件，该文件即为其二级目录对应页面内容的存放文件。\n同样，创建三级目录的时候，需要将对应的二级目录默认页面改为 default，然后在同级下添加同样格式的内容，在此不再赘述。如果你还没有明白是怎么设定的，可以研究一下 NexT 官方网站的源码仓库文件的存放位置。\n例子：将友情链接放在关于页面顶部导航栏。\n先将links文件夹放在about文件夹里，然后设置目录菜单。\n1 2 3 about: default: /about/ || fa fa-user links: /links/ || fa fa-link 开启gitter 首先前往 {% btn https://gitter.im, gitter官网, link fa-lg fa-fw %} 建立社区房间，然后在`_config.next.yml`配置如下:\r1 2 3 4 5 gitter: - enable: + enable: true - room: + room: iwyang/community 最终效果：\n由于觉得开启gitter会影响页面美观，所以我没有开启gitter。\rV8.0 更新内容 重要更新 图标库升级为 Font-Awesome 5 (theme-next/hexo-theme-next#1438) 模板格式从 swig 更改为 njk 菜单设置变更 (a527bfd) 1 2 3 4 5 6 7 8 9 10 11 12 13 -override: false menu: - home: / || fa fa-home + #home: / || fa fa-home #about: /about/ || fa fa-user #tags: /tags/ || fa fa-tags #categories: /categories/ || fa fa-th - archives: /archives/ || fa fa-archive + #archives: /archives/ || fa fa-archive #schedule: /schedule/ || fa fa-calendar #sitemap: /sitemap.xml || fa fa-sitemap #commonweal: /404/ || fa fa-heartbeat Valine 选项更新 (6e6fc74)\n1 2 3 4 5 6 7 8 9 10 11 valine: - appid: # Your leancloud application appid - appkey: # Your leancloud application appkey + appId: # Your leancloud application appid + appKey: # Your leancloud application appkey ... - guest_info: nick,mail,link # Custom comment header + meta: # Custom comment header + - nick + - mail + - link 支持 highlight.js (9fdaba2) 允许更多的代码高亮格式 (03e50d0) 1 2 3 4 5 6 7 8 9 codeblock: ... - # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic - # See: https://github.com/chriskempson/tomorrow-theme - highlight_theme: normal + # See: https://github.com/highlightjs/highlight.js/tree/master/src/styles + theme: + light: default + dark: dark 配置 代码高亮 1 2 3 4 5 6 7 8 9 10 11 codeblock: theme: light: agate dark: dark # Add copy button on codeblock copy_button: enable: true # Show text copy result. show_result: true # Available values: default | flat | mac style: mac 你可以在这里预览代码高亮的效果：highlightjs 选择你喜欢的 style 即可。\n更换模板 1 2 3 4 5 6 7 8 9 10 11 custom_file_path: #head: source/_data/head.njk #header: source/_data/header.njk #sidebar: source/_data/sidebar.njk postMeta: source/_data/post-meta.njk postBodyEnd: source/_data/post-body-end.njk footer: source/_data/footer.njk bodyEnd: source/_data/body-end.njk variable: source/_data/variables.styl #mixin: source/_data/mixins.styl style: source/_data/styles.styl 同时将原 _data 目录下的 swig 文件后缀改为 njk 即可\n参考链接 1.Hexo-NexT (v7.0+) 主题配置 2.Next升级+Mac迁移 3.Hexo 框架 (三)：Next 主题配置及美化 4.Hexo博客+Next主题深度优化与定制 5.Hexo-NexT 主题个性优化 6.第三方评论系统之我见—云游君 7.尝试折腾了下用 Hexo-Next-Theme 搭建的博客 ","date":"2020-04-26T12:03:16Z","permalink":"//localhost:1313/archives/hexo-next-v7.7.2-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/","title":"Hexo-NexT (v7.7.2) 主题配置"},{"content":"摘 要 当今世界已进入信息时代，在高速发展的信息时代，信息日益成为社会各领域中最活跃、最具有决定意义的因素。信息时代给教育注入了新的生机和活力，也给教育提出了更高的要求。要适应信息时代，教育必须实现信息化。教育信息化要求在教育过程中较全面地运用以计算机、多媒体和网络通讯为基础的现代信息技术，促进教育改革。微课正是在这种背景下产生的。2012年11月，全国首届微课大赛在武汉启动，并已经在全国300多个城市陆续开展。参赛微课上传到云平台，教育资源全国共享，引爆了全国“微课热”。本文主要就微课的教学设计与制作这两个方面进行讨论，希望对微课的发展有一点启示作用。\n【关键词】微课 教学设计 制作\nThe instructional design and production of micro-lecture\nAbstract Today, the world has entered the information age. In the rapid development of the information age, information is increasingly becoming the most active and decisive factor in kinds of areas of society. The information age has injected new vigor and vitality into the education. And the information age also gives a higher requirement to education. In order to adapt to the information age, education must achieve informatization. The educational information requires fully using the computers, multimedia and network communication which are based on modern information technology to promote the reform of education in the process of education. Micro-lecture is produced under this kind of background. In November 2012, the first national contest of micro-lecture started in Wuhan. And it has been carried out in more than 300 cities in the country. The entries have been uploaded to the cloud platform which makes educational resources shared in the whole nation. Micro-lecture has became a hot topic. This article will mainly discuss the instructional design and production of micro-lecture, hoping to give a little inspiration to the development of micro-lecture.\n**【key words】**Micro-lecture instructional design production\n1 绪论 1.1 研究背景 随着科技和信息技术的快速发展，人类的传播交流方式发生了巨大的改变。各种各样的“微”应运而生。例如，2009年微博的出现在我国迅速流行起来，2011年微信的出现改变了人们对传统聊天软件的看法。在教育领域，微课也是应运而生。在全国落实《国家中长期教育改革与发展规划纲要（2010-2020 年）》和实施《教育信息化十年发展规划（2011-2020 年）》的时候，在混合学习和移动学习日益盛行的趋势下，微课成为当前我国教育信息化资源建设的重点和研究热点[1]。教育信息化要求在教育过程中较全面地运用以计算机、多媒体和网络通讯为基础的现代信息技术，促进教育改革。而微课作为教育信息化的产物之一，可以说是对传统教学模式的一种补充与扩展，对传统教育的改革具有一定的促进作用。在2012年秋季，教育部正式面向全国中小学举行微课作品征集评选大赛。如此同时在2012 年11月，教育部全国高校教师网络培训中心正式下发通知，决定于2012年12月至2013年8月，举办首届全国高校微课教学比赛。这两项国家级的微课比赛可以说在在中国教育界掀起了一场“微课”热潮。\n1.2 国内外研究现状 1.2.1 国外研究现状 美国应该说无论是在经济还是在教育上都处在世界的领先地位。国外对微课的研究主要还是集中在美国。微课(Micro-lecture)最初是由美国新墨西哥州圣胡安学院的独立教学设计师和网络学习顾问戴维• 潘罗斯（David Penrose）教授提出的，他明确阐述了微课程的概念和创作过程。戴维•彭罗斯把微课称为“知识脉冲”（Knowledge Burst），他认为微课的效果可能超出任何一个资深教师的想象。而目前，在国外最具有代表性的是可汗学院和翻转课堂，可汗学院可以说在短短的时间内，在整个世界范围内引起了巨大大的轰动，也对当前的教育模式带来了很大的冲击，它的出现促使教育者对当前教育模式的思考和改革。可汗学院是由孟加拉裔美国人萨尔曼·可汗创立，是涵盖各学科的在线网络视频课程，每一节课程时长10分钟左右。视频短而精，内容深入浅出，吸引了各地的学生通过可汗学院进行学习。而翻转课堂最初起源于美国科罗拉多州落基山的一个山区学校，在翻转课堂下，教师打破了传统教学模式，让学生在家观看并学习录制好的课程讲解和PPT演示，这样就让节省下来的时间就可以在课堂上进行协同学习、研究性学习。2011年前后，翻转课堂这种新的教学模式在美国各地兴起，并引起了广泛关注。\n综上所述，国外对微课的研究是一个从理论到实践的过程。国外有关微课的研究主要还是集中在中小学课堂教学中的应用研究。\n1.2.2 国内研究现状 在国内率先对微课进行研究的是广东省佛山市教育局教育信息网络中心的胡铁生老师。他认为微课是以微型教学视频为主要载体，针对某个学科知识点或教学环节而设计开发的一种情境化、支持多种学习方式的新型网络课程资源。而内蒙古鄂尔多斯市东胜区教研中心副主任李玉平及其团队则是开发和推广微课的先行者。他带领其他教师成立了微学时代工作室,对微课程开展了深入的研究和探索,在他的博客中也展示了一系列与教育有关的样例,并设计了微课的开发设计指南、微课程设计模板等,对推动微课在教育领域的深入研究和探索起到了重要的引领作用。2010年11月,佛山教育局启动了首届中小学新课程优秀“微课”资源建设征集与应用活动,征集的微课的内容也涵盖了小学、初中和高中各学科的教学重点、难点和特色内容。2012年12月,中国华南师范大学携手香港凤凰卫视全球发布“凤凰微课”\n综上所述，国内对于微课的应用研究越来越广泛,从佛山微课首次推出到如今席卷全国,微课逐渐成为了教育界关注的热点。同时我们还可以看出微课的研究是国内较为新鲜的一个研究课题。它的设计、开发与应用仍然需要在教学实践中不断地尝试与应用。\n1.3 研究的目的及意义 1.3.1 研究的目的 “微课”是一种全新的资源表现形式,其具有“情景真实、主题突出、资源多样、形式灵活、交互性强、动态生成、便于传播、应用简单”等优点[2]。虽然微课具有这么多的优点，但是微课在我国可以说仍然处于起步阶段。不少老师在制作微课时会遇到问题，或者在微课开发的思路或者说过程中会遇到这样那样的问题。所以笔者希望通过一定的分析研究，总结先前的经验和教训，通过对微课的教学设计和制作两个方面进行讨论，以此希望能够制作出一个符合微课大赛要求的优秀微课。\n1.3.2 研究的意义 研究微课的意义总的来说有两个方面。第一个方面微课是对传统教与学的支持与扩展，有助于提高教学效果。第二个方面是微课对教师专业化发展的支持。在国内率先倡导并且提出微课的胡铁生认为，“对学生而言，微课能更好地满足他们对不同学科知识点的个性化学习、按需选择学习的要求，是传统课堂学习的一种重要补充和拓展资源；对教师而言，微课将革新传统的教学与教研方式，突破教师传统的听评课模式，教师的电子备课、课堂教学和课后反思的资源应用将更具有针对性和实效性，基于微课资源库的校本研修、区域网络教研将大有作为，并成为教师专业成长的重要途径之一。笔者非常赞同胡铁生的看法，研究微课的意义在于提高学习效果以及促进教师的专业发展。\n2 相关概念分析 2.1 什么是微课 微课是个新生的事物，到目前为止对于这个问题还没有达到共识，不同的人具有不同的看法。胡铁生认为：微课又名“微课程”，是“微型视频网络课程”的简称，它是以微型教学视频为主要载体，针对某个学科知识点或教学环节而设计开发的一种情境化、支持多种学习方式的新型网络课程资源。黎加厚认为：微课是指时间在10分钟以内，有明确的教学目标，内容短小，集中说明一个问题的小课程[3]。当然还有官方的解释，首届中小学微课大赛官方文件认为：“微课”全称“微型视频课程”，它是以教学视频为主要呈现方式，围绕学科知识点、例题习题、疑难问题、实验操作等进行的教学过程及相关资源之有机结合体。而首届高校微课大赛官方文件认为：“微课”是指以视频为主要载体记录教师围绕某个知识点或教学环节开展的简短、完整的教学活动。\n综上所述，我们可以看到对于微课不同的理解主要原因是侧重点不同。中小学一线教师更注重微课的表现形式与功能，而理论人员则注重微课的基本原理。\n2.2 微课的特点 微课作为一种新型教学资源建设和应用方式，总的来说具有以下四个特点。\n第一，教学时间较短。根据心理学上的研究，中小学学生的注意力集中在10 分钟左右。所以对如中小学学生来说，微课的时长最好为58分钟，最长不要超过10分钟。而成人的注意力集中在15分钟，所以高校微课的时长一般为1020 分钟。\n第二，教学选题小而精。相对于时间较宽泛的传统课堂，微课课堂的主题更突出、内容更精简。可选取教学环节中某一知识点、专题、实验活动作为选题，针对教学中常见且具有代表性的问题或内容进行设计，有效解决教与学过程的疑点和难点问题。\n第三，资源容量较小。微课的教学视频及配套的辅助扩展资料总容量一般在几十兆左右，视频采用支持网络在线播放的流媒体格式，师生可以流畅地在线观看视频、查阅教学设计和课件，也可方便地将其下载保存到移动终端上，从而实现移动学习的目的。\n第四，资源组织模块化。微课将课程的重难点拆分成一个个主体鲜明、类型多样、结构紧凑的模块，即“主题单元资源包”，营造了一个真实的“微课堂教学环境”。广大师生在这种真实具体、典型案例化的教与学情景中，可以方便地实现知识和教学观念、风格和技能的模仿、迁移和提升，从而迅速地提升教师的课堂教学水平，促进教师的专业成长，提高学生的学业水平。\n2.3 微课与传统课的比较 从上面微课的特点我们能看到微课与传统课的一些差别。那么微课只是将传统的课程分单元剪短吗?严格地说，并非如此。一是传统课程中的一些风格技巧是用来保证课程的连贯性和学生学习兴趣的持久性，而微课是要瞬间抓住学生的眼球，在最短时间内将注意力集中在某个单一主题上；二是微课与传统教学相比，教师与学生的角色不同，要达到的目的不同，因此课件和教学过程的设计方式不同；三是微课就是一段短小视频，它向学生展示的是教学中某个单一的、具有严格定义的主题环节；四是微课向学生提供的是“自助式”教学模式，与传统的内容展示与讲解不同，微课采用的是自主学习与交流的方式；五是微课是由学生根据自己的意愿自主控制播放，可反复学习、多角度评价的一种教学方式。\n2.4 微课与传统教学视频的比较 我们知道微课是以视频为主要载体，那么它与传统教学视频有什么不同之处了。“微课”这种新型的教学资源建设和应用模式可以说是传统教学视频在“微时代”下的衍变。“微课”有其与生俱来的特性，这些特性颠覆了传统教学视频的模式。微课与传统教学视频比较，有以下几点区别：（1）主题明确，针对性强；“微课”主要是为了解决课堂教学中某个学科知识点，特别是教学中的重点、难点等内容。而传统教学视频往往是一堂课的复制，包含多个知识点，含有复杂众多的教学内容，更注重教师的“教”。可以说，“微课”是传统教学视频精华的浓缩。（2）短小精悍，易传播“微课”容量小；一段“微课”视频时间通常控制在一般为5—8分钟左右，最长不宜超过10分钟。根据心理学上的研究，“微课”在时间上符合人类的认知特点。此外，“微课”的视频格式一般采用MP4、WMV、FLV等，视频加上教学课件、教案等总过也只有十几兆。因此“微课”容量小，容易在网络中传播和下载，用户可以在网络中流畅地在线观看“微课”视频，也可以方便地将其下载到各种数码设备上。而传统的教学视频往往要40~45分钟，时间长，容量大，在网络中传播和下载往往需要耗费较多的时间。（3）半结构化；可扩充开放“微课”具有半结构化特点，“微课”的资源要素可以随着教学需要不断地扩充、修改和完善。而传统教学视频资源结构紧密、固化封闭，难以扩充和修改。\n3 微课的教学设计 3.1 微课教学设计的原则 要制作好一节微课，首先要做好教学设计，那么微课的教学设计要遵循哪些原则呢！在《首届全国高校微课教学比赛方案》中对教学设汁的要求是：\n(1)围绕选题设计，突出重点，注重实效。\n(2)教学目的明确，教学思路清晰，注重学生全面发展，并且要符合学生的认知规律。\n(3)教学过程主线清晰、重点突出，逻辑性强，明了易懂。\n(4)注重突出学生的主体性以及教与学活动有机结合[4]。\n这些明确的评分标准就告诉我们，在微课的教学设计过程中要有所创新。充分体现通过微课的设计，充分运用各种教学媒体，选取适当的教学方法，较好地调动学生的积极主动性，在营造愉快轻松的课堂氛围的同时，寓教于乐，达到教与学的有机结合。我们不难从这些标准中看出，在微课的教学设计过程中要充分运用各种教学媒体，选取适当的教学方法，较好地调动学生的积极主动性，在营造愉快轻松的课堂氛围的同时，寓教于乐，达到教与学的有机结合。\n3.2 微课教学设计的具体步骤 微课是一种新的资源形式，那么它的教学设计与传统课的教学设计有什么区别呢！为了弄清楚微课的教学设计与传统课的教学设计有什么异同，笔者仔细分析了全国中小学微课比赛获奖作品和首届全国高校微课教学比赛获奖作品。发现并不是所有的中小学微课获奖作品都有教学设计的附件，而高校微课获奖作品一般都有教学设计的附件。此外，并不是所有作品的教学设计步骤都是一样的。不过总的来说，微课与传统课的教学设计有相同点，也有差别。相同点在于两者的基本组成模块基本相同，不同点在于一些细节上。笔者认为两者最大区别在于教学过程设计上，由于微课时间的限制，教学过程设计就要求精确到每分钟。\n3.2.1 选题 微课的选题要求新颖，尽量做到“小而精”，可以选取教学环节的某个知识点，并具备独立性、完整性、示范性、代表性，能够有效解决教与学过程中的重点、难点问题。俗话说，好的开始就是成功的一半，如何选好微课的题目是在进行微课创作过程中首先需要认真思考分析的问题。首届全国高校微课教学比赛对选题的要求是：选取教学环节中某一知识点、专题、实验活动作为选题，针对教学中的常见、典型、有代表性的问题或内容进行设计，类型包括但不限于：教授类、解题类、答疑类、实验类、活动类。选题尽量“小而精”，具备独立性、完整性、示范性、代表性，能够有效解决教与学过程中的重点、难点问题[5]。\n3.2.2 学习者特征分析 无论微课还是传统课，学习者分析都是教学设计过程中的一个重要步骤，教学设计的一切活动都是为了学习者的学，教学目标是否实现，要在学习者自己的认识和发展的学习活动中体现出来，而作为学习活动主体的学习者在学习过程中又是以自己的特点来进行学习的。因此，要取得教学设计的成功，必须重视对学习者的分析。微课的对象可以是中小学学生，也可以是大学生，也可以是其他学习者。如果微课的对象是小学生的话，他们的学习特点主要表现在以下几个方面：一是已经完全具备假设—演绎思维、抽象思维和系统思维的能力。二是好奇心强，小学生对好玩有趣的学习内容具有强烈的兴趣，所以课程设计时应尽量保持趣味性。三是缺乏学习主动性。小学生缺乏主动学习的能力，而微课针对的又是学生的零散时间，所以微课设计时必须要保证学习的效率[6]。\n3.2.3 教学目标的确定 无论是微课还是传统课，教学目标都是教学活动的出发点和归宿，是教学的灵魂所在。\n因为教学目标是教师选择教学内容、运用教学方法、教学策略、教学媒体以及调控教学环境的基本依据。教学目标规定着教学活动的方向、进程和预期结果，或者说，它具体指引着教学活动往哪里走，只有知道了往哪里走之后，才能选择适当的内容、方法来达成预期目标。如缺乏清晰的目标，教学将失去导向，只能盲目进行。此外，教学目标也是学习者自我激励、自我评估、自我调控的重要手段。由于教学目标能提供给学生一个明确的方向，使学生明确了通过学习要达到的具体目标，因而在学习过程中它可以有效激发学生学习的内部动力，增强学习的兴趣，帮助学生根据目标指引的方向不断调整学习方式，积极克服困难，为达成预定的学习目标而努力。一般说来，微课往往是选取某一知识点进行讲解的，它的教学目标往往是要求学习者掌握某一知识点。不过教学目标的确定还是要体现在三维目标上，知识与技能，过程与方法，情感态度与价值观。\n3.2.4 教学内容分析 无论是微课还是传统课，教学内容分析都是必不可少的一步。教学内容是指为实现教学目标，要求学习者系统学习的知识、技能和行为经验的总和。分析教学内容是为了规定教学内容的范围、深度及教学内容各部分的联系，回答“学什么”的问题。对于教学内容的分析，应以教学目标为基础，明确规定教学内容的范围、深度和揭示教学内容各组成部分之间的联系以保证达到教学最优化的内容效度。教学内容的范围指的是学习者必须达到的知识和能力的广度，深度规定了学习者必须达到的知识深浅程度和能力的质量水平。微课所选取的知识点往往是重难点。所以在制作微课时，要认真思考怎样在短时间里将知识点讲清楚，这就要对教学内容进行认真的分析。\n3.2.5 教学过程结构设计 微课的教学过程要简短而且完整，教学过程一般说来要包括问题的提出、教学活动的安排、总结收尾等环节[7]。微课的结构设计是教学设计的延续和具体反映。根据教学内容和教学目标，依照特定的教学思想、学习理论组织教学内容顺序以及教学控制策略，就是微课的结构设计的呈现。总的来说微课教学过程设计有以下几个要求。\n(1)快速切入课题\n一般而言，微课的基本构成包括开头、主要内容、片尾3个部分。片头具体来说就是引题。通常来说由于微课的时间短，所以就要求开门见山进入课题，可以使用以下几种方法来引题。你可以通过设置一个问题来引出课题；或者你也可以通过总结上节课的教学内容来引入课题等。但是不管你采用的是哪种方法，切题一定要快速，尽量做到引题能够吸引人，使人产生兴趣，要知道一个好的开始就是成功的一半。\n(2)内容讲授条理上要清晰\n由于微课时间短这个原因，所以要求在讲授微课时，要尽可能在一条线索上展开教学，在这条线索上突出重点内容。\n(3)总结收尾要简练\n虽然微课时间短，但是小结是必不可少的，为什么这么说呢！因为一个好的总结可以对讲授的内容起到提纲挈领的作用，也可以使学生更加深刻地理解所学的内容，这样学生就能清楚地了解到这节课学到了什么。\n综上所述，一般来说微课的教学设计应包括选题、学习者特征分析、教学目标确定、教学内容分析以及教学过程结构设计这几个方面。总的来说微课的教学设计与传统课的教学设计有相似点，也有不同点。笔者两者最大差别在于教学过程设计，由于微课的时间短，一般也就5~8分钟，所以整个教学过程必须安排得很充实，为了使教学效果达到最好，教学过程设计必须精确到分钟。下面就综合给出一个微课教学设计的模板，仅供大家参考。\n表3.1 微课的教学设计\n微课名称 视频长度 录制时间 知识点来源 学科： 年级： 教材版本： 学习者特征 教学目标 教学内容 教学过程设计 内 容 时间 一、片头 二、正文讲解 三、结尾 3.3 微课教学设计案例 为了更好的说明问题，笔者在这里选择一部优秀的微课作品进行分析。这部微课作品名为《讲解比喻句》[8]。如下表所示：\n表3.2 微课教学设计案例\n微课名称 讲解比喻句 视频长度 4分51秒 录制时间 2013年7月 知识点来源 学科： 语文 年级：三年级 教材版本： 人教版 学习者特征 此节微课的对象是三年级小学生，小学三年级学生对比喻句已经有一定的认识，基本能判断比喻句，但是他们对此缺乏比较系统的认识。 教学目标 (1)能从学过或未学的课文中，识别出运用比喻修辞手法的句子 (2)能根据比喻句的结构形式特点，仿写比喻句 (3)根据语言环境，分析比喻的基本表达效果 教学内容 比喻句的结构形式在实际运用中较灵活多样，比喻词也不只是常见的“好像”、“像”、“仿佛”，通过认识一些比喻词，加深学生对比喻句的认识。要想灵活运用所学知识去准确判断并运用比喻句，需通过实例多次反复学习。 教学过程设计 内 容 时间 三、片头 大家好，本节微课重点讲解比喻句的特点、作用， 能初步判断一句话是不是比喻句。 30秒以内 四、正文讲解 第一部分内容： 什么是比喻句？并举例 一种修辞方式。就是打比方，用浅显、具体、生动的事物来代替抽象、难理解的事物。 60秒 第二部分内容： 比喻句有什么作用？ 1.比喻说理浅显易懂，使人容易接受。 2.比喻叙事能化抽象为具体，使事物更清楚明白。 3.比喻状物能使概括的东西形象化，给人深刻的印象。 50秒 第三部分内容： 哪些句子不是比喻句？并举例讲解。 （1）表示比较（2）表示举例（3）表示猜测（4）表示联想 （5）表示说明 150秒 四、结尾 授课完毕，谢谢聆听！ 30秒以内 4 微课的制作 制作微课，首先除了做好教学设计之外，接下来就是微课件制作、微课录制以及微课后期制作了。下面就一一进行讲解。\n4.1 微课件制作 一般说来，微课的资源构成由教学设计（微教案）、素材课件（微课件）、微视频等构成[9]。做好教学设计之后，就要进行微教案的制作了。制作教案的工具有PPT、flash、authware等，但是对于微课的制作，用得最多的还是PPT。微课由于它自身的特殊性，所以需要注意的一些问题和设计原则。首先微课的PPT必须做到图文并茂、直观生动，这是PPT制作的最基本要求。此外，由于微课时间限制的原因，为了让学生快速地在有限的时间内找到视觉关注点，应该适宜地添加必要的视觉导航标识，如用颜色、箭头、闪烁、下划线等标出当前所讲内容在PPT中的位置，或用方形、圆形、等形状圈出所讲内容在图片中的区域等。这样就能很好地引起学生的注意。一个精心设计的PPT在微课中会给学生的注意力选择、维持及调整带来极大的促进作用。\n4.2 微课视频录制 微课的载体是视频，所以微课视频的录制就显得尤为重要。通过对比全国中小学微课和高校微课大赛的参赛规则与制作要求，我们可以发现除了视频时长不同之外，最主要区别还是在于制作手段上。中小学微课的制作采用录屏软件(Camtasia Studio V6．02)+PPT。而高校微课大赛的微课制作更多采用的是摄像机摄像+PPT+后期制作。比较这两种方法，应该说各有各的优点。高校全国微课大赛的微课制作必须依靠专业人员摄像并进行后期制作，有片头片尾，除了投人时间和精力外，有一定的制作成本。而中小学全国微课大赛的微课制作则相对简单，每个教师自己就能独立完成，除了投入时间和精力外，制作成本很低。其实除了以上两种方法之外，微课视频录制还有其他的方法，下面就具体地来一一介绍一下。\n4.2.1 Camtasia Studio 6 录屏软件 录屏软件有许多，在微课制作中，用得最多的还是Camtasia Studio 6。它也是中国微课网所推荐使用的录屏软件。下面就简单介绍一下这个软件怎样使用。\n第一步：打开CS 6软件。在界面中找到“录制屏幕”按钮，点击“录制屏幕”按钮打开界面。\n第二步：打开最小化在任务栏的PPT课件并播放，在弹出的界面中用“选择区”去调整录屏大小刚好为PPT课件显示大小。\n第三步：点击软件上的“camera”按钮使摄像头处于打开状态，并调整屏幕中自己头像在画面的合适位置。\n第四步：点击软件上的“Audio”按钮，测试声音是否正常，并调整音量滑块条到95%左右最佳，目的是降低录音时产生较大的噪音。\n第五步：以上调整好后，点软件上“REC”开始录制按钮，当出现倒数数字3、2、1后便可开始录制了。\n第六步：当微课讲解完毕后，快速按下快捷键“F10” 结束，在弹出的界面可以预览刚才录制好的微课。再点“Save”按键保存文件。方法二是先关闭PPT课件，然后按下软件界面上的“Stop”按键结束，再点“Save”按键保存文件。\n4.2.2智能手机拍摄 相对录屏软件，手机拍摄所需要的条件相对来说简单些。一般说来只需要一个手机，一支笔(也可选择不同颜色的笔)和一张纸。当然也可以用电脑对所拍摄视频进行后期编辑。另外手机拍摄应该要用到两个人。具体实施方案如下：用笔在纸上展现教学过程，边讲解边演算，可以用不同颜色的笔书写、画图、标记等行为，例如对重点内容可以用红笔勾出。此外要讲解时要做到尽量保证语音清晰，演算过程逻辑性强，教授或解答过程明了易懂。下面这张图片很清楚地展现手机拍摄微课的场景。\n图4.1 手机拍摄微课\n4.2.3 数码摄像机拍摄 用数码摄像机拍摄相对来说比较繁琐。一般说来高校里的微课比赛更多地是采用这种方式。它往往是利用PPT展开教学过程，用数码摄像机实时记录课堂教学过程中的教师、学生、多媒体教学信号等教学实景画面。相对于以上几种方法，这种方法制作成本相对来说要高些，往往需要比较专业的人员协助拍摄。此外，大多数人在摄像机前讲课还是会紧张的，怎样在20分钟左右时间里把课程的节奏控制得当，都需要下工夫，所以往往在拍摄前要准备脚本，必要时也需要排练预演。在拍摄时，摄像师应注意调整摄像机的机位、高度和仰俯，多采用中景、近景和特写等小景别画面，多使用固定镜头，以保证视频质量。另外，由于教师的形象要出现在屏幕上，因此教师要仪表端庄，衣着整洁得体，教态自然，举止得当。总的来说，这种方法比较传统，特别适合于讲授型、讲题类和答疑类的微课的拍摄。\n4.2.4 可汗学院微课录制方式 利用可汗学院模式也是中国微课网所推荐的一种方式，它的制作方法一般说来是通过手写板和画图工具对教学过程进行讲解演示，并使用屏幕录像软件录制[10]。具体步骤如下：第一步，安装手写板或交互白板及其配套的专用笔等工具，并使之与电脑连接；第二步，使用演示软件如PPT对教学过程进行演示；第三步，利用手写板或交互白板自带的摄录软件或专业录屏软件，录制教学过程。总的来说，）；这种方法制作比较简单，便捷，适合用于常用简笔画图示来讲解的课程，如数学、物理等课程的公式推导、美术课程等。下面的一张图片很清楚地展现了可汗学院录制方式。\n图4.2 可汗学院录制方式\n4.2.5 其他方式 其实制作微课并不一定说局限于以上几种方法，我们也是鼓励其他的一些方法。现在互联网高速发展，平板电脑也日益流行起来。我们也可以选择用平板电脑制作微课，在平板电脑上有几款应用可以用来制作微课，例如Show Me、Educreations、Ask3[11]。下面就来具体说一下Show Me这款应用吧。Show Me是一个非常好的移动学习平台。制作微课你也可以选择用它来做，制作方法也是比较简单的，只要你的平板电脑上安装了Show Me App，你就可以录制微课了，录制完成之后，你也可以将其并上传到Show Me学习平台上去。Show Me不仅是个分享平台，也是一个学习平台。如果你想学习一些知识，你可以选择在里面搜索到你想要学习的东西，你可选择在线学习，也可以下载下来自主学习。我们可以看到无论是制作微课，还是自主学习,Show Me这款软件使用起来都是非常简单的。\n4.3 微课视频后期处理 微课视频录制之后，并不意味着整个微课完成了。要想使微课完美，后期处理是必须的。一般说来微课视频的编辑包括“画中画的编辑”、“视频的剪辑”、“声音的处理”、“批注的添加”、“视频的缩放”、“标题剪辑和转场”、“背景音乐的添加”等，当然你可以按照自己的需要有选择地进行视频的编辑。应该说视频处理软件有许多，比喻说会声会影、Premire等，在这些软件当中，最简单的软件笔者觉得还是会声会影。下面笔者就选择会声会影就微课视频进行处理，具体的步骤如下。\n(1)添加片头：初学者可以在“快速模板”里选择合适的片头，拖放到第二个轨道前，模板中包含的素材可以在相应的轨道里修改，如选中文字轨道，在预览窗口双击有文字，就可修改成需要的文字。\n(2)添加文字说明和特效：在需要添加文字位置分割视频，然后拖动后一段视频，使彼此之间有一段距离，在素材点击“文字”按钮，在预览窗口中双击，输入文字，调整文字图层长度，使其链接两段视频。\n(3)添加字幕：添加字幕的方法与添加说明文字的方法一致，这里就不在重复说明了。\n同样的，你也可以在微课里添加图像和背景音乐等素材。一般说来，在微课视频编辑过程中，要遵循线性思路，不能随意跳跃，避免视频轨道错位而引发的编辑错误。\n5 结论 微课是高速发展的信息时代环境下对传统教学模式、学习方式以及教学资源表现形式等方面的一次变革,本文主要通过文献综述以及对全国高校微课比赛和全国中小学微课比赛作品的一些分析，综合提出了微课教学设计以及微课制作的方法。虽说未必有独创的特性，不过毕竟微课还是一个新鲜的事物，它还处在蓬勃发展时期，也许有关微课制作的方法和制作理念会随着时间的改变而改变。本文还是希望能够对微课的发展起到一点启示与促进作用。\n** **\n参考文献 [1] 胡铁生,黄明燕,李民.我国微课发展的三个阶段及其启示[J].远程教育杂志，2013(04).\n[2] 胡铁生.“微课”:区域教育信息资源发展的新趋势[J].电化教育研究，2011(10).\n[3] 黎加厚.微课的含义与发展[J].中小学信息技术教育，2013(04).\n[4] 吴婵.关于微课对优化高校教学效果的思考[J].科教导刊(中旬刊)，2013(10).\n[5] 首届全国高校微课教学比赛评审规则[EB/OL]. http://weike.enetedu.com/bisai_guize.html\n[6] 张琛.微课程的设计与制作[J].中国职业技术教育，2013(35).\n[7] 黄建军,郭绍青.论微课程的设计与开发[J].现代教育技术，2013(05).\n[8] 教师专业发展与信息化[EB/OL]. http://www.etkeylab.com/cop/wkupload/2013070958014033.doc\n[9] 胡铁生.中小学微课建设与应用难点问题透析[J].中小学信息技术教育，2013(04).\n[10] 中国微课[EB/OL].http://dasai.cnweike.cn/?c=main\u0026amp;a=make\u0026amp;from=dasai\n[11] 焦建利.教师微课制作的简便方法:几款基于平板电脑的应用[J].中国远程教育，2013(06).\nPS：Camtasia 2022更改中文语言：\n参考：\nhttps://www.bilibili.com/video/BV1nZ4y1f74q/?vd_source=cb4a6ad8978ef3ac986f741316ee2cc3\n一、首先记得打开时用防火墙阻止程序联网及选项中取消自动检测更新\n在C:\\windows\\system32\\drivers\\etc\\hosts的末尾中添加下面命令： 127.0.0.1 www.techsmith.com\n127.0.0.1 activation.cloud.techsmith.com\n127.0.0.1 oscount.techsmith.com\n127.0.0.1 updater.techsmith.com\n127.0.0.1 camtasiatudi.techsmith.com\n127.0.0.1 tsccloud.cloudapp.net\n127.0.0.1 assets.cloud.techsmith.com\n2.更改语言后在软件里取消自动检测更新。\n二、更改中文语言\n开始—运行—regedit（注册表）\n以此点开“计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\TechSmith\\Camtasia Studio\\22.0”（可直接粘贴上面地址到地址栏上按回车键，前提是版本是22.0）\n找到InstallLang修改为CHS\n","date":"2020-04-25T17:04:26Z","permalink":"//localhost:1313/archives/%E5%BE%AE%E8%AF%BE%E7%9A%84%E6%95%99%E5%AD%A6%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%B6%E4%BD%9C/","title":"微课的教学设计与制作"},{"content":"服务器环境：Centos 8 x64\n本地环境：Win10 x64\n本地操作 安装 Git 和 Node.js 本地需要安装 Git 和 Node.js，安装过程略。\n安装完git后还要配置环境变量： 右键我的电脑 –\u0026gt; 属性，然后点击高级系统设置 –\u0026gt; 环境变量 –\u0026gt; 选择用户变量或系统变量中的Path,点击编辑；找到Git安装目录,添加以下地址:\n1 2 3 D:\\Program Files\\Git\\bin D:\\Program Files\\Git\\mingw64\\libexec\\git-core D:\\Program Files\\Git\\mingw64\\bin 配置SSH 公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\n1 2 git config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; 1 2 3 4 cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n初始化 Hexo 在电脑任意目录新建一个文件夹 hexo，进入文件夹，在空白处点击右键选择 Git Bash，输入：\n1 2 3 4 5 npm install -g hexo-cli hexo init npm install hexo d -fg hexo serve 这样便在本地初始化了 Hexo 文件夹，然后输入： hexo new post \u0026quot;第一篇文章\u0026quot; 即可新建一篇文章，用文本编辑器打开 hexo/source/_post/第一篇文章.md 可以快速开始写作。其余使用方法和配置按照 Hexo 官网操作即可。推荐编辑器**hexo-editor**\n2020/4/27更新: hexo-editor速度太慢，改用Typora\n修改 deploy 参数 打开位于 hexo 文件夹下的 _config.yml，修改 deploy 参数：\n1 2 3 4 deploy: type: git repo: git@blog.yizhilee.com:hexo.git branch: master 提交到github 1 2 3 4 5 deploy: type: git repo: coding: git@e.coding.net:iwyang/iwyang.coding.me.git branch: master github、coding双线部署 1 2 3 4 5 6 deploy: type: git repo: github: git@github.com:iwyang/iwyang.github.io.git coding: git@e.coding.net:iwyang/iwyang.coding.me.git branch: master github、coding、服务器三线线部署 1 2 3 4 5 6 7 deploy: type: git repo: github: git@github.com:iwyang/iwyang.github.io.git coding: git@e.coding.net:iwyang/iwyang.coding.me.git 服务器: git@45.76.173.167:hexo.git branch: master 服务器操作 首先，在 服务器 上安装 Git 和 nginx。\n2021.5.27 注意最好不要执行下面第一步升级操作，不然升级到最后一步会卡死，最后导致后面无法启动nginx。\r1 2 yum update -y yum install git-core nginx -y 如果是centos 7，先要安装安装epel：yum install epel-release，才能安装nginx。\nNginx 安装完成后需要手动启动，启动Nginx并设置开机自启：\n1 2 systemctl start nginx systemctl enable nginx 如果开启了防火墙，记得添加 HTTP 和 HTTPS 端口到防火墙允许列表。\n1 2 3 4 firewall-cmd --permanent --zone=public --add-service=http firewall-cmd --permanent --zone=public --add-service=https firewall-cmd --reload systemctl restart firewalld.service 或者直接关闭防火墙：\n1 2 systemctl stop firewalld.service systemctl disable firewalld.service 如果提示\u0026quot;Failed to get properties: Access denied\u0026quot;，执行\n1 kill -TERM 1 配置完成后，访问使用浏览器服务器 ip ，如果能看到以下界面，表示运行成功。\n配置用户 然后新增一个名为 git 的用户，过程中需要设置登录密码，输入两次密码即可。\n1 2 adduser git passwd git 给用户 git 赋予无需密码操作的权限（否则到后面 Hexo 部署的时候会提示无权限）\n1 2 chmod 740 /etc/sudoers vi /etc/sudoers 在图示位置root ALL=(ALL:ALL) ALL的下方添加\n1 git ALL=(ALL:ALL) ALL 然后保存。然后更改读写权限。\n1 chmod 440 /etc/sudoers 上传 SSH 公钥 接下来要把本地的 ssh 公钥上传到 服务器 。执行\n1 2 3 4 5 su git cd ~ mkdir .ssh \u0026amp;\u0026amp; cd .ssh touch authorized_keys vi authorized_keys 现在要打开本地的 Git Bash，输入vi ~/.ssh/id_rsa.pub，把里面的内容复制下来粘贴到上面打开的文件里。\n接着把ssh目录设置为只有属主有读、写、执行权限。代码如下：\n1 2 chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh 然后建立放部署的网页的 Git 库。\n1 2 3 cd ~ mkdir hexo.git \u0026amp;\u0026amp; cd hexo.git git init --bare 测试一下，如果在 Git Bash 中输入 ssh git@服务器的IP地址 能够远程登录的话，则表示设置成功了。如果你的服务器端口不是22。参考：上传SSH公钥。\nps: 如果配置完成还是提示要输入密码，可以使用 ssh-copy-id，在本地打开 Git Bash 输入：\n1 ssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址 登录成功会提示：\n1 2 3 $ ssh git@104.224.191.88 Last login: Sat Feb 26 02:33:30 2022 from 171.81.158.144 [git@special-beep-1 ~]$ 用户授权 接下来要给用户 git 授予操作 nginx 放网页的地方的权限：\n1 su 1 2 mkdir -p /var/www/hexo chown git:git -R /var/www/hexo 配置钩子 现在就要向 Git Hooks 操作，配置好钩子：\n1 2 3 su git cd /home/git/hexo.git/hooks vi post-receive 输入内容并保存：（里面的路径看着换吧，上面的命令没改的话也不用换）\n1 2 3 4 5 6 7 8 #!/bin/bash GIT_REPO=/home/git/hexo.git TMP_GIT_CLONE=/tmp/hexo PUBLIC_WWW=/var/www/hexo rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE rm -rf ${PUBLIC_WWW}/* cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} 赋予可执行权限：\n1 chmod +x post-receive 配置 nginx 然后是配置 nginx。执行\n1 su 1 vi /etc/nginx/conf.d/hexo.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 server { listen 80 ; listen [::]:80; root /var/www/hexo; server_name bore.vip www.bore.vip; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 因为放中文进去会乱码所以就不在里面注释了。代码里面配置了默认的根目录，绑定了域名，并且自定义了 404 页面的路径。 最后就重启 nginx 服务器：\n1 systemctl restart nginx 如果上传网页后，Nginx 出现 403 Forbidden，执行：\n1 vi /etc/selinux/config 将SELINUX=enforcing 修改为 SELINUX=disabled 状态。\n1 SELINUX=disabled 重启生效，reboot。\nps: 最好做一个301跳转，把bore.vip和www.bore.vip合并，并把之前的域名也一并合并. 有两种实现方法,第一种方法是判断nginx核心变量host(老版本是http_host)：\n1 2 3 4 5 6 7 server { server_name bore.vip www.bore.vip ; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ http://bore.vip/$1 permanent; } ... } 发布文章 在本地编辑好文章之后使用 hexo g -d ，如果hexo d后， ERROR Deployer not found: git，执行\n1 npm install -- save hexo-deployer-git 参考链接 1.在服务器上搭建hexo博客，利用git更新\n2.从 0 开始搭建 hexo 博客 3.基于CentOS搭建Hexo博客\n4.Nginx出现403 forbidden\n","date":"2020-04-25T10:37:25Z","permalink":"//localhost:1313/archives/hexo%E9%83%A8%E7%BD%B2%E5%88%B0centos%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"hexo部署到centos服务器"},{"content":"本地操作 安装 Git 和 Node.js 本地需要安装 Git （ Latest source Release 2.31.1）和 Node.js（14.16.0 LTS），安装过程略。\n安装完git后还要配置环境变量： 右键我的电脑 –\u0026gt; 属性，然后点击高级系统设置 –\u0026gt; 环境变量 –\u0026gt; 选择用户变量或系统变量中的Path,点击编辑；找到Git安装目录,添加以下地址:\n1 2 3 D:\\Program Files\\Git\\bin D:\\Program Files\\Git\\mingw64\\libexec\\git-core D:\\Program Files\\Git\\mingw64\\bin 配置SSH 公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\n1 2 git config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; 1 2 3 4 cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n初始化 Hexo 在电脑任意目录新建一个文件夹 hexo，进入文件夹，在空白处点击右键选择 Git Bash，输入：\n1 2 3 4 5 npm install hexo-cli -g hexo init blog cd blog npm install hexo server 这样便在本地初始化了 Hexo 文件夹，然后输入： hexo new post \u0026quot;第一篇文章\u0026quot; 即可新建一篇文章，用文本编辑器打开 hexo/source/_post/第一篇文章.md 可以快速开始写作。其余使用方法和配置按照 Hexo 官网操作即可。推荐编辑器**hexo-editor**\n2020/4/27更新: hexo-editor速度太慢，改用Typora\n修改 deploy 参数 打开位于 hexo 文件夹下的 _config.yml，修改 deploy 参数：\n单线部署 1 2 3 4 deploy: type: git repo: git@blog.yizhilee.com:hexo.git branch: master 多线部署 1 2 3 4 5 6 7 deploy: type: git repo: github: git@github.com:iwyang/iwyang.github.io.git coding: git@e.coding.net:iwyang/iwyang.coding.me.git gitee: git@gitee.com:iwyang/iwyang.git branch: master 部署到 GitHub 比部署到服务器要简单，这里着重讲下绑定域名。\n添加解析记录 添加cname记录指向Github Pages\nwww CNAME 境外 iwyang.github.io @ CNAME 境外 iwyang.github.io 这里让境外线路走github\nGithub Pages 对自定义域上 Https 在GitHub pages绑定域名，这里暂时不要勾选SSL。\n解决CNAME反复被删问题 一般我们会将Hexo博客搭建到Github上，如果在Github上为其配置一个自定义的域名时，会自动在项目仓库根目录下新添加一个CNAME文件。但是这里有个问题，如果将Hexo博客重新部署一遍后，Github仓库里的这个CNAME文件就会消失掉，又需要重新配置一遍。\n**其实这里有个技巧，我们可以将需要上传部署到Github的文件都放在source文件夹里，例如CNAME文件、favicon.ico、或者其他的图片等等，这样在执行hexo d这个命令之后，这些文件就不会被删除了。 **\n然后在站点配置文件_config.yml中添加skip_render配置：\n1 2 skip_render: - CNAME 部署到 coding 操作和部署到github大同小异，注意以下几点：\n项目地址按iwyang.coding.me来写，建议勾选“启用readme.md初始化项目” 配置SSH公钥时要勾选启用推送权限。 开启Coding Pages 服务，要先在项目设置—功能开关里开启持续集成和持续部署。然后进行实名认证：右上角—团队管理—团队设置—高级设置。 删除项目，点左下角—项目设置—更多。 添加自定义域名，添加cname记录，指向给你的网址。线路选默认。这样就保证国内线路走coding。 注意：一定要选首选的域名，并且非首选域名要勾选跳转至首选域名，不然有些第三方服务数据会统计不到一起。 开启 HTTPS，要先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书，然后开启强制 HTTPS 访问。（不然会申请失败） 如果后面要用cdn全站加速，这里先不要开启ssl。 解决404错误 可是当你push完hexo g生成的静态页面源码到你的repo中后点Coding给你分配的访问地址后却返回的是404页面，其实解决这个问题也很简单，就是点一下上图中的立即部署就行了。\n部署到 gitee 和部署到coding大同小异，但需要注意以下几点：\n免费版gitee page不支持绑定域名、不支持自动部署，并且上传了代码服务里才有gitee pages选项。还有关于首页地址见官方文档：\n如何创建一个首页访问地址不带二级目录的 pages，如ipvb.gitee.io？\n答：如果你想你的 pages 首页访问地址不带二级目录，如ipvb.gitee.io，你需要建立一个与自己个性地址同名的仓库，如 https://gitee.com/ipvb 这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以ipvb.gitee.io直接访问，那么他就可以创建一个名字为ipvb的仓库 https://gitee.com/ipvb/ipvb 部署完成后，就可以以 https://ipvb.gitee.io 进行访问了。\n自动部署脚本 在根目录新建deploy.sh，输入以下内容：\n1 2 3 4 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; hexo clean hexo g -d 有时候可能需要多次运行脚本才能提交成功，这时不妨手动输入命令。\n全站 CDN 加速 使用Cloudflare，encryption mode选 Full，在Edge Certificates选项卡开启Always Use Https\n参考链接 1.Hexo 框架 (八)：双线部署及全站 CDN 加速\n2.hexo双线部署coding+github pages，实现https并开启又拍云CDN全站加速\n3.2019hexo博客部署到coding该绕的坑-奥怪的小栈\n4.Hexo - 解决更新网站时 Github 删除原先的自定义域名的问题\n","date":"2020-04-25T03:19:25Z","permalink":"//localhost:1313/archives/hexo%E9%83%A8%E7%BD%B2%E5%88%B0githubcodinggitee/","title":"hexo部署到github\u0026coding\u0026gitee"}]